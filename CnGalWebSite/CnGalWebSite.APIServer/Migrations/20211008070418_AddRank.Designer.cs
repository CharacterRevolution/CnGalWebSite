// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CnGalWebSite.APIServer.Infrastructure;

namespace CnGalWebSite.APIServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211008070418_AddRank")]
    partial class AddRank
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("EntryTag", b =>
                {
                    b.Property<int>("EntriesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("EntriesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EntryTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "a99ac971-b015-431e-aba1-1de4d04e1e70",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e576",
                            ConcurrencyStamp = "ce7527b0-474f-48b8-8a97-2adebdbe378d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e577",
                            ConcurrencyStamp = "2461e5b9-9b47-49bf-b5d4-183746dea646",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e576"
                        },
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e577"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("CanComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("ContributionValue")
                        .HasColumnType("int");

                    b.Property<int>("DisplayContributionValue")
                        .HasColumnType("int");

                    b.Property<int>("DisplayIntegral")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Integral")
                        .HasColumnType("int");

                    b.Property<bool>("IsPassedVerification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShowFavotites")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MBgImage")
                        .HasColumnType("longtext");

                    b.Property<string>("MainPageContext")
                        .HasMaxLength(20000000)
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<long>("OnlineTime")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SBgImage")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SteamId")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UnsealTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            CanComment = true,
                            ConcurrencyStamp = "600bac47-f5b9-421d-ac46-99836f9b9a7d",
                            ContributionValue = 0,
                            DisplayContributionValue = 0,
                            DisplayIntegral = 0,
                            Email = "1278490989@qq.com",
                            EmailConfirmed = true,
                            Integral = 0,
                            IsPassedVerification = false,
                            IsShowFavotites = false,
                            LastOnlineTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            MainPageContext = "### 这个人太懒了，什么也没写额(～￣▽￣)～",
                            NormalizedEmail = "1278490989@qq.com",
                            NormalizedUserName = "ADMIN",
                            OnlineTime = 0L,
                            PasswordHash = "AQAAAAEAACcQAAAAEDecloBliZOnB0dNPQmr8qhoodaLmPdrKN10/bvLDrHaAJSxqWOnrEsvBhl5kzrZmQ==",
                            PersonalSignature = "这个人太懒了，什么也没写额(～￣▽￣)～",
                            PhoneNumberConfirmed = false,
                            RegistTime = new DateTime(2021, 10, 8, 15, 4, 17, 700, DateTimeKind.Unspecified).AddTicks(8973),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BackUpArchiveId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackgroundPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("BriefIntroduction")
                        .HasColumnType("longtext");

                    b.Property<bool>("CanComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DisambigId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MainPage")
                        .HasMaxLength(10000000)
                        .HasColumnType("longtext");

                    b.Property<string>("MainPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalLink")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReaderCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RealNewsTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SmallBackgroundPicture")
                        .HasColumnType("longtext");

                    b.Property<int>("ThumbsUpCount")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DisambigId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ArticleRelevance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleRelevance");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BackUpArchive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLastFail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastBackUpTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("LastTimeUsed")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.ToTable("BackUpArchives");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BackUpArchiveDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BackUpArchiveId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BackUpTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFail")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TimeUsed")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BackUpArchiveId");

                    b.ToTable("BackUpArchiveDetails");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BasicEntryInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("BasicEntryInformation");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BasicEntryInformationAdditional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BasicEntryInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BasicEntryInformationId");

                    b.ToTable("BasicEntryInformationAdditional");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ParentCodeNavigationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(10000000)
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserSpaceCommentManagerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("EntryId");

                    b.HasIndex("ParentCodeNavigationId");

                    b.HasIndex("UserSpaceCommentManagerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Disambig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BackgroundPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("BriefIntroduction")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("SmallBackgroundPicture")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Disambigs");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnotherName")
                        .HasColumnType("longtext");

                    b.Property<long?>("BackUpArchiveId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackgroundPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("BriefIntroduction")
                        .HasColumnType("longtext");

                    b.Property<bool>("CanComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<int?>("DisambigId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MainPage")
                        .HasMaxLength(1000000)
                        .HasColumnType("longtext");

                    b.Property<string>("MainPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PubulishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReaderCount")
                        .HasColumnType("int");

                    b.Property<string>("SmallBackgroundPicture")
                        .HasColumnType("longtext");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisambigId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.EntryPicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryPicture");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.EntryRelevance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryRelevance");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ErrorCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ErrorCounts");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Examine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ApplyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Context")
                        .HasMaxLength(4000000)
                        .HasColumnType("longtext");

                    b.Property<int>("ContributionValue")
                        .HasColumnType("int");

                    b.Property<long?>("DisambigId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisambigId1")
                        .HasColumnType("int");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<string>("PassedAdminName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PassedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("PrepositionExamineId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("DisambigId1");

                    b.HasIndex("EntryId");

                    b.HasIndex("TagId");

                    b.ToTable("Examines");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FavoriteFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BriefIntroduction")
                        .HasColumnType("longtext");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainImage")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FavoriteFolders");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FavoriteObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<long>("FavoriteFolderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("EntryId");

                    b.HasIndex("FavoriteFolderId");

                    b.ToTable("FavoriteObjects");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FriendLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FriendLinks");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.HistoryUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("LoginName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("longtext");

                    b.Property<string>("UserIdentity")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HistoryUsers");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Loginkey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Loginkeys");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AdditionalInfor")
                        .HasColumnType("longtext");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("LinkTitle")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Rank")
                        .HasColumnType("longtext");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.PlayedGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CVSocre")
                        .HasColumnType("int");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<int>("PaintSocre")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScoreTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ScriptSocre")
                        .HasColumnType("int");

                    b.Property<int>("ShowSocre")
                        .HasColumnType("int");

                    b.Property<int>("SystemSocre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntryId");

                    b.ToTable("PlayedGames");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CSS")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Styles")
                        .HasColumnType("longtext");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.RankUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RankId");

                    b.ToTable("RankUsers");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.SendCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("IP")
                        .HasColumnType("longtext");

                    b.Property<string>("Mail")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SendCounts");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.SignInDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("SignInDay");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.SteamInfor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CutLowest")
                        .HasColumnType("int");

                    b.Property<int>("CutNow")
                        .HasColumnType("int");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LowestTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<double>("PlayTime")
                        .HasColumnType("double");

                    b.Property<int>("PriceLowest")
                        .HasColumnType("int");

                    b.Property<string>("PriceLowestString")
                        .HasColumnType("longtext");

                    b.Property<int>("PriceNow")
                        .HasColumnType("int");

                    b.Property<string>("PriceNowString")
                        .HasColumnType("longtext");

                    b.Property<int>("SteamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("SteamInfors");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentCodeNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCodeNavigationId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsHidden = false,
                            LastEditTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "游戏"
                        },
                        new
                        {
                            Id = 2,
                            IsHidden = false,
                            LastEditTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "角色"
                        },
                        new
                        {
                            Id = 3,
                            IsHidden = false,
                            LastEditTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "STAFF"
                        },
                        new
                        {
                            Id = 4,
                            IsHidden = false,
                            LastEditTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "制作组"
                        });
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ThirdPartyLoginInfor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ThirdPartyLoginInfors");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ThumbsUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ThumbsUpTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ThumbsUps");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.TimedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EveryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExecuteType")
                        .HasColumnType("int");

                    b.Property<long>("IntervalTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsLastFail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPause")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRuning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastExecutedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimedTasks");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.UserOnlineInfor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserOnlineInfors");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.UserSpaceCommentManager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserSpaceCommentManagers");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.FileManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("TotalSize")
                        .HasColumnType("bigint");

                    b.Property<long>("UsedSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("FileManagers");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.TokenCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Num")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TokenCustoms");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FileManagerId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Sha1")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileManagerId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.BasicInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Engine")
                        .HasColumnType("longtext");

                    b.Property<string>("GameNickname")
                        .HasColumnType("longtext");

                    b.Property<string>("GamePlatforms")
                        .HasColumnType("longtext");

                    b.Property<string>("IssueMethod")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("IssueTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficialWebsite")
                        .HasColumnType("longtext");

                    b.Property<string>("Original")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductionGroup")
                        .HasColumnType("longtext");

                    b.Property<string>("Publisher")
                        .HasColumnType("longtext");

                    b.Property<string>("QQgroupGame")
                        .HasColumnType("longtext");

                    b.Property<long>("RealId")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId")
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BasicInforTableModels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.GroupInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AnotherNameGroup")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("QQgroupGroup")
                        .HasColumnType("longtext");

                    b.Property<long>("RealId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GroupInforTableModels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.MakerInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AnotherName")
                        .HasColumnType("longtext");

                    b.Property<string>("Bilibili")
                        .HasColumnType("longtext");

                    b.Property<string>("Blog")
                        .HasColumnType("longtext");

                    b.Property<string>("Lofter")
                        .HasColumnType("longtext");

                    b.Property<string>("MicroBlog")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("Other")
                        .HasColumnType("longtext");

                    b.Property<long>("RealId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MakerInforTableModels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.RoleInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AnotherNameRole")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BloodType")
                        .HasColumnType("longtext");

                    b.Property<string>("CV")
                        .HasColumnType("longtext");

                    b.Property<string>("Character")
                        .HasColumnType("longtext");

                    b.Property<string>("ClothesAccessories")
                        .HasColumnType("longtext");

                    b.Property<string>("FigureData")
                        .HasColumnType("longtext");

                    b.Property<string>("FigureSubjective")
                        .HasColumnType("longtext");

                    b.Property<string>("GameName")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Haircolor")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Pupilcolor")
                        .HasColumnType("longtext");

                    b.Property<long>("RealId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleAge")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleHeight")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleIdentity")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleTaste")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoleInforTableModels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.StaffInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("GameName")
                        .HasColumnType("longtext");

                    b.Property<string>("NicknameOfficial")
                        .HasColumnType("longtext");

                    b.Property<int>("PositionGeneral")
                        .HasColumnType("int");

                    b.Property<string>("PositionOfficial")
                        .HasColumnType("longtext");

                    b.Property<long>("RealId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Subcategory")
                        .HasColumnType("longtext");

                    b.Property<string>("SubordinateOrganization")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StaffInforTableModels");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CutLowest")
                        .HasColumnType("int");

                    b.Property<int>("CutNow")
                        .HasColumnType("int");

                    b.Property<long>("EntryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LowestTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int>("PriceLowest")
                        .HasColumnType("int");

                    b.Property<int>("PriceNow")
                        .HasColumnType("int");

                    b.Property<int>("SteamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SteamInforTableModels");
                });

            modelBuilder.Entity("EntryTag", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CnGalWebSite.DataModel.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Article", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Disambig", "Disambig")
                        .WithMany("Articles")
                        .HasForeignKey("DisambigId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("Disambig");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ArticleRelevance", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Article", null)
                        .WithMany("Relevances")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BackUpArchive", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Article", "Article")
                        .WithOne("BackUpArchive")
                        .HasForeignKey("CnGalWebSite.DataModel.Model.BackUpArchive", "ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithOne("BackUpArchive")
                        .HasForeignKey("CnGalWebSite.DataModel.Model.BackUpArchive", "EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BackUpArchiveDetail", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.BackUpArchive", "BackUpArchive")
                        .WithMany("BackUpArchiveDetails")
                        .HasForeignKey("BackUpArchiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BackUpArchive");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BasicEntryInformation", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", null)
                        .WithMany("Information")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BasicEntryInformationAdditional", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.BasicEntryInformation", null)
                        .WithMany("Additional")
                        .HasForeignKey("BasicEntryInformationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Comment", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Comment", "ParentCodeNavigation")
                        .WithMany("InverseParentCodeNavigation")
                        .HasForeignKey("ParentCodeNavigationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.UserSpaceCommentManager", "UserSpaceCommentManager")
                        .WithMany("Comments")
                        .HasForeignKey("UserSpaceCommentManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Article");

                    b.Navigation("Entry");

                    b.Navigation("ParentCodeNavigation");

                    b.Navigation("UserSpaceCommentManager");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Entry", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Disambig", "Disambig")
                        .WithMany("Entries")
                        .HasForeignKey("DisambigId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Disambig");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.EntryPicture", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", null)
                        .WithMany("Pictures")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.EntryRelevance", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", null)
                        .WithMany("Relevances")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Examine", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("Examines")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Article", "Article")
                        .WithMany("Examines")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Disambig", "Disambig")
                        .WithMany("Examines")
                        .HasForeignKey("DisambigId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithMany("Examines")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Article");

                    b.Navigation("Comment");

                    b.Navigation("Disambig");

                    b.Navigation("Entry");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FavoriteFolder", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteFolders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FavoriteObject", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.FavoriteFolder", "FavoriteFolder")
                        .WithMany("FavoriteObjects")
                        .HasForeignKey("FavoriteFolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Entry");

                    b.Navigation("FavoriteFolder");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Message", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("Messages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.PlayedGame", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("PlayedGames")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithMany("PlayedGames")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.RankUser", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRanks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Rank", "Rank")
                        .WithMany("RankUsers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.SignInDay", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("SignInDays")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.SteamInfor", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Tag", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.Tag", "ParentCodeNavigation")
                        .WithMany("InverseParentCodeNavigation")
                        .HasForeignKey("ParentCodeNavigationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCodeNavigation");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ThirdPartyLoginInfor", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("ThirdPartyLoginInfors")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ThumbsUp", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CnGalWebSite.DataModel.Model.Article", "Article")
                        .WithMany("ThumbsUps")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.UserOnlineInfor", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithMany("UserOnlineInfors")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.UserSpaceCommentManager", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithOne("UserSpaceCommentManager")
                        .HasForeignKey("CnGalWebSite.DataModel.Model.UserSpaceCommentManager", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.FileManager", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Model.ApplicationUser", "ApplicationUser")
                        .WithOne("FileManager")
                        .HasForeignKey("CnGalWebSite.DataModel.Models.FileManager", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.UserFile", b =>
                {
                    b.HasOne("CnGalWebSite.DataModel.Models.FileManager", "FileManager")
                        .WithMany("UserFiles")
                        .HasForeignKey("FileManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FileManager");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.ApplicationUser", b =>
                {
                    b.Navigation("Examines");

                    b.Navigation("FavoriteFolders");

                    b.Navigation("FileManager");

                    b.Navigation("Messages");

                    b.Navigation("PlayedGames");

                    b.Navigation("SignInDays");

                    b.Navigation("ThirdPartyLoginInfors");

                    b.Navigation("UserOnlineInfors");

                    b.Navigation("UserRanks");

                    b.Navigation("UserSpaceCommentManager");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Article", b =>
                {
                    b.Navigation("BackUpArchive");

                    b.Navigation("Examines");

                    b.Navigation("Relevances");

                    b.Navigation("ThumbsUps");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BackUpArchive", b =>
                {
                    b.Navigation("BackUpArchiveDetails");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.BasicEntryInformation", b =>
                {
                    b.Navigation("Additional");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Comment", b =>
                {
                    b.Navigation("InverseParentCodeNavigation");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Disambig", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Entries");

                    b.Navigation("Examines");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Entry", b =>
                {
                    b.Navigation("BackUpArchive");

                    b.Navigation("Examines");

                    b.Navigation("Information");

                    b.Navigation("Pictures");

                    b.Navigation("PlayedGames");

                    b.Navigation("Relevances");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.FavoriteFolder", b =>
                {
                    b.Navigation("FavoriteObjects");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Rank", b =>
                {
                    b.Navigation("RankUsers");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.Tag", b =>
                {
                    b.Navigation("InverseParentCodeNavigation");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Model.UserSpaceCommentManager", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CnGalWebSite.DataModel.Models.FileManager", b =>
                {
                    b.Navigation("UserFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
