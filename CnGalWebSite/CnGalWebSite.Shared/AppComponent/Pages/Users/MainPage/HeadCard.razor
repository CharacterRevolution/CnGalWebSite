@implements IAsyncDisposable

<div class="mb-2">
    <img src="@Model.BackgroundImage" alt="@Model.UserName" class="w-100" />
    <div class="ms-3 me-3" style="display: flex; flex-direction: column; align-items: center; @("margin-top:-"+(ScreenLength/2).ToString()+"px")">
        <img src="@Model.PhotoPath" alt="@Model.UserName" style="@("width:"+ScreenLength+"px;height:"+ScreenLength+"px;") border-radius:50%" />

        <div class="text-center mt-3" style="font-size:17px">@Model.UserName</div>
        <div  class="text-center mt-2" style="color:gray;">@Model.PersonalSignature</div>
    </div>
</div>

@code {
    [Parameter]
    public UserInforViewModel Model { get; set; } = new UserInforViewModel { Ranks = new List<RankViewModel>() };

    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }


    public int ScreenLength { get; set; } = 75;
    public bool IsAdmin { get; set; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private JSInterop<HeadCard>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<HeadCard>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));


        }
    }


    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (width < 750)
        {
            ScreenLength = 75;
        }
        else
        {
            ScreenLength = width / 10;
        }

        StateHasChanged();
    }
    #endregion
    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}
