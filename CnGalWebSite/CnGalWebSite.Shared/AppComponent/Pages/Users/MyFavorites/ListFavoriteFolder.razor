@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


@if (isReady)
{
    @if (ViewOnFavoriteFolderId != 0)
    {
        <ListFavoriteObject Input="FavoriteObjectInput" OnClickUrl="OnClickUrl" OnReturn="OnReturn" Title="@Title" Id="ViewOnFavoriteFolderId" IsCurrentUser="IsCurrentUser"></ListFavoriteObject>
    }
    else
    {
        <HeadBar Title="收藏夹" Isshadow-sm="true" OnClickGoBack="OnClickBack" OnClickEdit="OnManage" />
        <div style=" margin-top: 60px; width: 100%;margin-bottom:65px;">
            <div class="ms-3 me-3">
                @if (Model != null && Model.Favorites != null)
                {
                    foreach (var item in Model.Favorites)
                    {
                        <FavoriteFolderInforViewTip Model="item" OnClickLayout="OnClickFolder"></FavoriteFolderInforViewTip>
                    }
                }
            </div>

           
        </div>
    }
}
else
{
    <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="收藏夹" Isshadow-sm="true" />
    <div>
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip />
    </div>
}


@code {

    public FavoriteFoldersViewModel Model { get; set; }

    public PagedSortedAndFilterInput FavoriteObjectInput { get; set; } = new PagedSortedAndFilterInput();
    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }


    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public bool IsCurrentUser { get; set; }

    public long ViewOnFavoriteFolderId { get; set; }
    public string Title { get; set; }

    bool isReady = false;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public async Task Refresh(string id)
    {
        UserId = id;
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(UserId))
            {
                return;
            }
            Model = await Http.GetFromJsonAsync<FavoriteFoldersViewModel>(ToolHelper.WebApiPath + "api/favorites/GetUserFavoriteFolders/" + UserId);

            isReady = true;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            isReady = false;
            ErrorHandler.ProcessError(ex, "获取收藏夹列表失败");
        }
    }

    public void OnClickFolder(FavoriteFolderAloneModel model)
    {
        ViewOnFavoriteFolderId = model.Id;
        FavoriteObjectInput.FilterText = model.Id.ToString();
        Title = model.Name;
        StateHasChanged();
    }

    public void OnReturn()
    {
        ViewOnFavoriteFolderId = 0;
        StateHasChanged();
    }
    public async Task OnManage()
    {
        await OnClickUrl.InvokeAsync(new NavigateModel
        {
            Title = "管理收藏夹列表",
            Icon = "fa fa-folder-open",
            Url = "/space/EditSpaceFavoriteFolders/" + UserId
        });
    }

    public async void OnClickBack()
    {
        await JS.InvokeAsync<string>("goback");
    }

}
