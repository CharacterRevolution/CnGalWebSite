@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager


<HeadBar Title="@Title" IsShadow="true" OnClickGoBack="OnReturn" OnClickEdit="OnManage" />

<div style=" margin-top: 60px; width: 100%;margin-bottom:65px;" >
    <div class="ms-3 me-3">
        @if (is404 == true)
        {
            <NotFoundTip IsNeedLayput="true"></NotFoundTip>
        }

        <div>

            <Virtualize ItemsProvider="@LoadArticles" @ref="virtualize">
                @if (context.entry != null)
                {
                    <EntryInforViewTip Model="context.entry" ColorNum="main"></EntryInforViewTip>

                }
                else if (context.article != null)
                {
                    <ArticleInforViewTip Model="context.article"></ArticleInforViewTip>
                }
            </Virtualize>
        </div>
    </div>



</div>


@code {
    [Parameter]
    public PagedSortedAndFilterInput Input { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public bool IsCurrentUser { get; set; }

    [NotNull]
    public Virtualize<FavoriteObjectAloneViewModel>? virtualize { get; set; }
    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }
    [Parameter]
    public EventCallback OnReturn { get; set; }

    private bool is404 = false;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task<PagedResultDto<FavoriteObjectAloneViewModel>> OnGetNewItems()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<PagedSortedAndFilterInput>(ToolHelper.WebApiPath + "api/favorites/GetUserFavoriteObjectList", Input);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<PagedResultDto<FavoriteObjectAloneViewModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取收藏夹内容");
            return new PagedResultDto<FavoriteObjectAloneViewModel> { Data = new List<FavoriteObjectAloneViewModel>() };
        }
    }

    private async ValueTask<ItemsProviderResult<FavoriteObjectAloneViewModel>> LoadArticles(ItemsProviderRequest request)
    {
        Input.CurrentPage = request.StartIndex;
        Input.MaxResultCount = request.Count;
        var articles = await OnGetNewItems();

        if (is404 != (articles.TotalCount == 0))
        {
            is404 = (articles.TotalCount == 0);
            StateHasChanged();
        }

        return new ItemsProviderResult<FavoriteObjectAloneViewModel>(articles.Data, articles.TotalCount);
    }

    public async Task RefreshDataAsync()
    {
        await virtualize.RefreshDataAsync();
    }
    public async Task OnManage()
    {
        await OnClickUrl.InvokeAsync(new NavigateModel
        {
            Title = "管理收藏夹",
            Icon = "fa fa-folder-open",
            Url = "/space/EditSpaceFavoriteObjects/" + Id + "/" + ToolHelper.Base64EncodeName(Title)
        });
    }
}
