@inject HttpClient Http
@inject ToastService? ToastService

@if (is404 == true)
{
    <CnGalWebSite.Shared.AppComponent.Normal.Errors.NotFountCard Type="未找到消息"></CnGalWebSite.Shared.AppComponent.Normal.Errors.NotFountCard>
}

@if (isReady)
{
<div>
        <Virtualize ItemsProvider="@LoadEntries" @ref="virtualize" OverscanCount="20">
            <div class="mb-2">
                <MessageCard Model="context" />
            </div>
        </Virtualize>
</div>

}



@code {

    public PagedSortedAndFilterInput Input { get; set; }
    [NotNull]
    public Virtualize<CnGalWebSite.DataModel.Model.Message>? virtualize { get; set; }

    public int MaxResultCount { get; set; } = 20;

    public int CurrentPage { get; set; } = 1;


    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private bool is404 = false;
    bool isReady = true;

    private async Task<PagedResultDto<CnGalWebSite.DataModel.Model.Message>> OnGetNewItems()
    {
        try
        {
            return await Http.GetFromJsonAsync<PagedResultDto<CnGalWebSite.DataModel.Model.Message>>(ToolHelper.WebApiPath + "api/space/GetUserMessage/" + CurrentPage + "/"+ MaxResultCount + "/true");
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取消息列表");
            return new PagedResultDto<CnGalWebSite.DataModel.Model.Message> { Data = new List<CnGalWebSite.DataModel.Model.Message>() };
        }
    }

    private async ValueTask<ItemsProviderResult<CnGalWebSite.DataModel.Model.Message>> LoadEntries(ItemsProviderRequest request)
    {
        CurrentPage = request.StartIndex;
        MaxResultCount = request.Count;
        var entries = await OnGetNewItems();

        if (is404 != (entries.TotalCount == 0))
        {
            is404 = (entries.TotalCount == 0);
            StateHasChanged();
        }

        return new ItemsProviderResult<CnGalWebSite.DataModel.Model.Message>(entries.Data, entries.TotalCount);
    }

    public async Task RefreshDataAsync()
    {

        await virtualize.RefreshDataAsync();
        StateHasChanged();
    }

}
