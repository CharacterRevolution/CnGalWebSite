@inject HttpClient Http
@inject ToastService? ToastService
@inject IJSRuntime JS
@inject IDataCacheService _dataCacheService
@inject NavigationManager NavigationManager

<div class="mb-3">
    <BootstrapBlazor.Components.Carousel Images="@Images" IsFade="true" OnClick="OnClick" class="h-100 rounded shadow-sm"></BootstrapBlazor.Components.Carousel>
</div>

@code {
    private List<string> Images = new List<string>();
    private List<CarouselViewModel> Carousels { get; set; } = new List<CarouselViewModel>();

    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; } = true;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }



    protected override async Task OnInitializedAsync()
    {

        try
        {

            Carousels = await _dataCacheService.HomePageCarouselsCatche.GetCatche(ToolHelper.WebApiPath + "api/home/GetHomeCarouselsView", true);

            Images = Carousels.OrderByDescending(s => s.Priority).Take(3).Select(s => s.Image).ToList();
            if (Carousels.Count >= 6)
            {
                Images.AddRange(Carousels.Where(s => Images.Any(x => s.Image == x) == false).ToList().Random().Take(3).Select(s => s.Image));

            }
            else
            {
                Images.AddRange(Carousels.Where(s => Images.Any(x => s.Image == x) == false).Select(s => s.Image));
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取轮播图列表失败");
        }
    }


    private async Task OnClick(string imageUrl)
    {
        //查找图片对应的Link

        var img = Carousels.FirstOrDefault(s => s.Image == imageUrl);
        if (img == null)
        {
            return;
        }

        try
        {
            await JS.InvokeAsync<string>("trackEvent", "轮播图", "点击", img.Note ?? img.Link, "1", "click");
        }
        catch (Exception exc)
        {

        }

        await _dataCacheService.OpenNewPage.InvokeAsync(img.Link);

    }

}
