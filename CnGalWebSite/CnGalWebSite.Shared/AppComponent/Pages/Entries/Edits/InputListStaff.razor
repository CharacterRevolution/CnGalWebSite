@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager

<CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="STAFF" ShowButton="true" UrlName="导入" OnClick="OnImportClick" Icon="fa fa-plus" />

<div class="row mt-3">
    @for (int i = 0; i < Staffs.Count; i++)
    {
        int temp = i;
        <div class="col-12 col-md-6 col-lg-4 col-xxl-3 mb-3">
            <div class="card p-3 pt-2" style="background-color:transparent">
                <div class="row">
                    <div class="col mt-2" style="padding-right:0px;">
                        <p class="text-truncate text-center" style="font-size:.875rem">
                            @Staffs[i].PositionOfficial：@Staffs[i].NicknameOfficial
                        </p>
                    </div>
                    <div class="col-12 d-flex" style="justify-content: space-between;">
                        <Button IsOutline="true" Size="Size.Small" Color="Color.Danger" Icon="fa fa-trash-o" @onclick="@(()=> DeleteStaff(temp))" Text="删除"></Button>
                        <Button IsOutline="true" Size="Size.Small" Color="Color.Success" Icon="fa fa-pencil" @onclick="@(()=> EditStaff(temp))" Text="编辑" class="ms-1"></Button>
                    </div>

                </div>
            </div>
        </div>
    }
</div>

@code{
    [Parameter]
    public List<StaffModel> Staffs { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    public async Task DeleteStaff(int i)
    {
        Staffs.RemoveAt(i);
        StateHasChanged();
        await ToastService.Success("删除成功", "成功删除Staff成员");
    }
    public async Task EditStaff(int i)
    {
        var items = Utility.GenerateEditorItems<StaffModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<StaffModel>()
        {
            Title = "编辑STAFF",
            Model = Staffs[i],
            Items = items,
            OnCloseAsync = () =>
            {
                //Trace.Log("关闭按钮被点击");
                return Task.CompletedTask;
            },
            OnSaveAsync = async context =>
            {
                // Trace.Log("保存按钮被点击");
                var item = (StaffModel)context.Model;

                if (Staffs.Where(s => s.Id != item.Id).Any(s => s.NicknameOfficial == item.NicknameOfficial && s.Subcategory + s.PositionOfficial == item.Subcategory + item.PositionOfficial))
                {
                    await ToastService.Error("官方职位和官方称呼必须唯一", "官方职位和官方称呼必须唯一");
                    return false;
                }

                Staffs[i] = item;
                StateHasChanged();
                await ToastService.Success("修改成功", "成功修改Staff成员");
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }
    public async Task AddStaff()
    {
        StaffModel model = new StaffModel();
        var items = Utility.GenerateEditorItems<StaffModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<StaffModel>()
        {
            Title = "添加STAFF",
            Model = model,
            Items = items,
            OnCloseAsync = () =>
            {
                //Trace.Log("关闭按钮被点击");
                return Task.CompletedTask;
            },
            OnSaveAsync = async context =>
            {
                // Trace.Log("保存按钮被点击");
                var item = (StaffModel)context.Model;
                if (Staffs.Any(s => s.NicknameOfficial == item.NicknameOfficial && s.Subcategory + s.PositionOfficial == item.Subcategory + item.PositionOfficial))
                {
                    await ToastService.Error("官方职位和官方称呼必须唯一", "官方职位和官方称呼必须唯一");
                    return false;
                }
                Staffs.Add(item);
                StateHasChanged();
                await ToastService.Success("添加成功", "成功添加Staff成员");
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public async Task OnImportClick()
    {
        var option = new DialogOption()
        {
            Title = "批量导入Staff",
            ShowCloseButton = false
        };
        option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<BatchImportStaffsTip>(new Dictionary<string, object>
        {
            [nameof(BatchImportStaffsTip.OnAddStaffs)] = EventCallback.Factory.Create<List<StaffModel>>(this, async (model) => await OnImported(model)),
            [nameof(BatchImportStaffsTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),
        }).Render();
        await DialogService.Show(option);
    }

    public async Task OnImported(List<StaffModel> model)
    {
        //检查是否符合要求
        foreach (var item in model)
        {
            await OnSaveAsync(item, ItemChangedType.Add);
        }
        StateHasChanged();
    }

    private async Task<bool> OnSaveAsync(StaffModel item, ItemChangedType type)
    {
        //检查数据是否合格
        if (string.IsNullOrWhiteSpace(item.NicknameOfficial))
        {
            await ToastService.Error("官方昵称是必填项目", "官方昵称是必填项目");
            return false;
        }
        if (string.IsNullOrWhiteSpace(item.PositionOfficial))
        {
            await ToastService.Error("官方职位是必填项目", "官方职位是必填项目");
            return false;
        }
        if (item.Id == 0 && Staffs.Any(s => s.NicknameOfficial == item.NicknameOfficial && s.Subcategory + s.PositionOfficial == item.Subcategory + item.PositionOfficial))
        {
            await ToastService.Error("官方职位和官方称呼必须唯一", "官方职位和官方称呼必须唯一");
            return false;
        }
        //检查是否重名
        if (type == ItemChangedType.Add)
        {
            if (Staffs.Any(s => s.NicknameOfficial == item.NicknameOfficial && s.Subcategory + s.PositionOfficial == item.Subcategory + item.PositionOfficial))
            {
                await ToastService.Error("官方职位和官方称呼必须唯一", "官方职位和官方称呼必须唯一");
                return false;
            }
        }
        else
        {
            if (Staffs.Where(s => s.Id != item.Id).Any(s => s.NicknameOfficial == item.NicknameOfficial && s.Subcategory + s.PositionOfficial == item.Subcategory + item.PositionOfficial))
            {
                await ToastService.Error("官方职位和官方称呼必须唯一", "官方职位和官方称呼必须唯一");
                return false;
            }
        }
        // 增加数据演示代码
        if (item.Id == 0)
        {
            if (Staffs.Count == 0)
            {
                item.Id = 1;
            }
            else
            {
                item.Id = Staffs.Max(i => i.Id) + 1;
            }
            Staffs.Add(item);
        }
        else
        {
            var oldItem = Staffs.FirstOrDefault(i => i.Id == item.Id);
            if (oldItem != null)
            {
                oldItem.Subcategory = item.Subcategory;
                oldItem.PositionOfficial = item.PositionOfficial;
                oldItem.NicknameOfficial = item.NicknameOfficial;
                oldItem.PositionGeneral = item.PositionGeneral;
                oldItem.Role = item.Role;
                oldItem.SubordinateOrganization = item.SubordinateOrganization;
            }
        }
        return true;
    }

}
