@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}

<MakeSureInWASMTip></MakeSureInWASMTip>

<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.TagStandard"></AlertTip>
        <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
            未填写的项目将会自动忽略，不需要手动删除
        </div>
        <div class="alert alert-danger  rounded shadow-sm  rounded" role="alert">
            在删除子标签后一定要为子标签添加父标签
        </div>
        @if (isReady == false)
        {
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑子标签</h3>
                <h5 class=" mb-4 fw-bold">当前标签：（Id:）</h5>
                <hr>

                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑子标签</h3>
                <h5 class="mb-4 fw-bold">当前标签：@Model.Name（Id:@Model.Id）</h5>
                <hr />
                <h5 class="fw-bold mb-2">子标签</h5>
                <InputTagListTip AutoCompleteItems="TagItems" Model="Model.Tags"></InputTagListTip>
            </div>



            <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <SearchTagsViewTip></SearchTagsViewTip>
            </div>

            <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
                当你点击“完成”按钮时，将会立即发起审核请求，请在点击前确保内容正确无误
            </div>
            <ValidateForm Model="@Model" ValidateAllProperties="true">

                <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
                    <div>
                        <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                        <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
                    </div>
                </div>

            </ValidateForm>
        }

    </div>
</div>


@code {

    [Parameter]
    public string Id { get; set; }

    private EditTagChildTagsViewModel Model { get; set; } = new EditTagChildTagsViewModel();

    private bool isReady = false;
    private IEnumerable<string> TagItems { get; set; } = new string[1] { "" };


    private ImagesListEditorViewTip ImagesListEditorView;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取所有词条
            TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags");

            Model = await Http.GetFromJsonAsync<EditTagChildTagsViewModel>(ToolHelper.WebApiPath + "api/tags/EditChildTags/" + Id);
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑标签子标签失败");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            //处理数据


            var result = await Http.PostAsJsonAsync<EditTagChildTagsViewModel>(ToolHelper.WebApiPath + "api/tags/EditChildTags", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("编辑标签子标签失败", obj.Error);
            }
            else
            {
                await ToastService.Success("编辑标签子标签成功", "编辑标签子标签成功，等待审核通过");
                NavigationManager.NavigateTo(Provider, "/tags/index/" + Model.Id, Model.Name, "fa fa-tag");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "编辑标签子标签失败");
        }
    }
}
