@inject HttpClient Http
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService
@inject DialogService DialogService


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@Model.Name" Description="@Model.BriefIntroduction" Image="@Model.MainPicture"></TitleTip>
}
else
{
    <TitleTip />
}
<div>
    @if (isReady == false)
    {

        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
            <SkeletonParagraph />
        </div>
        <div class=" mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
            </div>
        </div>
        <div class="mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }
    else
    {
        <div>

            @if (Model.IsHidden == true)
            {
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Warning" Class="mb-3">
                    当前标签处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
            }
            <TagHeadNavTip TagList="Model.Taglevels" />
            <div class="mb-4">
                <TagMainInforCard Model="Model" OnRevoke="OnRevoke" />
            </div>

            @if (Model.ChildrenTags.Count != 0 || Model.IsEdit)
            {
                <div class="mb-3">
                    <TagListChildTagsViewTip Model="Model" OnClickRevoke="OnRevoke" />
                </div>
            }
            @if (Model.ChildrenEntries.Count != 0 || Model.IsEdit)
            {
                <div class="">
                    <TagListChildEntriesViewTip Model="Model" OnClickRevoke="OnRevoke" />
                </div>
            }

        </div>

    }
</div>
<CnGalWebSite.Shared.MasaComponent.Shared.Components.TrackEvent DataType="TrackEventDataType.Tag" EventType="TrackEventType.View" ObjectId="@Model.Id.ToString()"
                                                                ObjectName="@Model.Name" />

@code {
    private string id = "";
    [Parameter]
    public string Id
    {
        get
        {
            return id;
        }
        set
        {
            id = value;
            @if (isFirst == false)
            {
                OnInitializedAsync();
            }


        }
    }

    bool isReady = false;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public TagIndexViewModel Model { get; set; } = new TagIndexViewModel();
    string LastLookName = "";
    bool isFirst = true;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            isFirst = false;
        }

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            //isReady = false;
            StateHasChanged();
            //获取标签信息
            Model = await _dataCatcheService.TagIndexPageCatche.GetCache(Id);
            //判断标签名称是否为空 为空则跳转到主页
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                NavigationManager.NavigateTo(Provider, "/home", "主页", "fa fa-home");
            }

            isReady = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取标签失败");
        }

    }

    private void OnCreate()
    {
        NavigationManager.NavigateTo(Provider, "/tags/createtag", "创建标签", "fa fa-pencil");
    }


    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",

            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/tags/RevokeExamine", new RevokeExamineModel { Id = Model.Id, ExamineType = operation });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                switch (operation)
                {
                    case Operation.EditTagMain:
                        Model.MainState = EditState.Normal;
                        break;
                    case Operation.EditTagChildTags:
                        Model.ChildTagsState = EditState.Normal;
                        break;
                    case Operation.EditTagChildEntries:
                        Model.ChildEntriesState = EditState.Normal;
                        break;
                }
                Id = id;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "撤销审核请求失败");
        }
    }

}

