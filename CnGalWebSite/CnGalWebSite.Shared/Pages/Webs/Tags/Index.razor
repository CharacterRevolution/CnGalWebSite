@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService
@inject DialogService DialogService
@implements IAsyncDisposable


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@Model.Name" Description="@Model.BriefIntroduction" Image="@Model.MainPicture"></TitleTip>
}
else
{
    <TitleTip />
}
<div>
    @if (isReady == false)
    {

            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                <SkeletonParagraph />

            </div>

        <div class=" mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
            </div>
        </div>
        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }
    else
    {
        <div>

            @if (Model.IsHidden == true)
            {
                <div class="alert alert-info  rounded shadow-sm  rounded" role="alert">
                    当前标签处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                </div>

            }
            <TagHeadNavTip TagList="Model.Taglevels" />
            <TagMainInforCard Model="Model" OnClickRevoke="OnRevoke" OnTagClick="OnTagClick" IsShowButton="true" IsSmallScreen="IsSmallScreen"/>

            @if (Model.ChildrenTags.Count != 0 || Model.IsEdit)
            {
                <div class="mb-3">
                    <TagListChildTagsViewTip Model="Model.ChildrenTags" IsNormalScreen="true" EditState="Model.ChildTagsState" IsEdit="Model.IsEdit" OnClickRevoke="OnRevoke" Id="Model.Id" />
                </div>
            }
            @if (Model.ChildrenEntries.Count != 0 || Model.IsEdit)
            {
                <div class="">
                    <TagListChildEntriesViewTip Model="Model.ChildrenEntries" IsNormalScreen="true" EditState="Model.ChildEntriesState" IsEdit="Model.IsEdit" OnClickRevoke="OnRevoke" Id="Model.Id" />
                </div>
            }

        </div>

    }
</div>

@code {
    private string id = "";
    [Parameter]
    public string Id
    {
        get
        {
            return id;
        }
        set
        {
            id = value;
            @if(isFirst==false)
            {
                OnInitializedAsync();
            }
       

        }
    }

    bool isReady = false;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public TagIndexViewModel Model { get; set; } = new TagIndexViewModel();
    string LastLookName = "";
    bool isFirst = true;

    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    private JSInterop<Index>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            isFirst = false;
        }
        try
        {
            await JS.InvokeAsync<string>("highlightAllCode");
        }
        catch
        {

        }

        //记录数据
        if (Model.Name != LastLookName && string.IsNullOrWhiteSpace(Model.Name)==false)
        {
            LastLookName = Model.Name;
            try
            {
                await JS.InvokeAsync<string>("trackEvent", "标签", "浏览", Model.Name, "1", "look");
            }
            catch (Exception exc)
            {

            }
        }
        if (firstRender)
        {
            Interop = new JSInterop<Index>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));
        }

    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 850))
        {
            IsSmallScreen = width < 850;
            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 850 && width < 1500))
        {
            IsNormalScreen = width >= 850 && width < 1500;
            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1500))
        {
            IsLargeScreen = width >= 1500;
            StateHasChanged();
        }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isReady = false;
            StateHasChanged();
            //获取标签信息
            Model = await _dataCatcheService.TagIndexPageCatche.GetCatche(Id);
            //判断标签名称是否为空 为空则跳转到主页
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                NavigationManager.NavigateTo(Provider, "/home", "主页", "fa fa-home");
            }

            isReady = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取标签失败");
        }

    }

    private void OnCreate()
    {
        NavigationManager.NavigateTo(Provider, "/tags/createtag", "创建标签", "fa fa-pencil");
    }

    private void OnEdit()
    {
        Model.IsEdit = true;
        StateHasChanged();
    }
    private void OnUnEdit()
    {
        Model.IsEdit = false;
        StateHasChanged();
    }
    private async void UnHidden()
    {
        try
        {

            var result = await Http.PostAsJsonAsync<HiddenTagModel>(ToolHelper.WebApiPath + "api/tags/HiddenTag", new HiddenTagModel { Ids = new int[] { Model.Id }, IsHidden = false });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("显示标签失败", obj.Error);
            }
            else
            {
                await ToastService.Success("显示标签成功", "显示标签成功，离开此页面后可以请在后台恢复标签状态");
                Model.IsHidden = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "显示标签失败");
        }
    }
    private async void Hidden()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenTagModel>(ToolHelper.WebApiPath + "api/tags/HiddenTag", new HiddenTagModel { Ids = new int[] { Model.Id }, IsHidden = true });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("隐藏标签失败", obj.Error);
            }
            else
            {
                await ToastService.Success("隐藏标签成功", "隐藏文章成功，离开此页面后可以请在后台恢复标签状态");
                Model.IsHidden = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "隐藏标签失败");
        }
    }
    public async Task OnTagClick(int index)
    {
        if (index == 0)
        {
            var option = new DialogOption()
            {
                Title = "历史编辑记录"
            };
            option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<EditRecordListViewTip>(new Dictionary<string, object>
            {
                [nameof(EditRecordListViewTip.Id)] =(long) Model.Id,
                [nameof(EditRecordListViewTip.Type)] = ExaminedNormalListModelType.Tag,
                [nameof(EditRecordListViewTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),
            }).Render();
            await DialogService.Show(option);
        }
        else if (index == 1)
        {

            OnUnEdit();
        }
        else if (index == 2)
        {
            OnEdit();
        }
        else if (index == 3)
        {
            NavigationManager.NavigateTo("/account/login/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
        }
        else if (index == 4)
        {
            UnHidden();
        }
        else if (index == 5)
        {
            Hidden();
        }
    }

    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",
            IsConfirm = true,
            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/tags/RevokeExamine", new RevokeExamineModel { Id = Model.Id, ExamineType = operation });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                switch (operation)
                {
                    case Operation.EditTagMain:
                        Model.MainState = EditState.Normal;
                        break;
                    case Operation.EditTagChildTags:
                        Model.ChildTagsState = EditState.Normal;
                        break;
                    case Operation.EditTagChildEntries:
                        Model.ChildEntriesState = EditState.Normal;
                        break;
                }
                Id = id;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "撤销审核请求失败");
        }
    }

    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}

