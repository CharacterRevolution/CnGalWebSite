
@inject HttpClient Http
@inject ExamineService _examineService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService

@inject DialogService DialogService

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@(Model.Name)" Description="@Model.BriefIntroduction" Image="@Model.MainPicture"></TitleTip>
}
else
{
    <TitleTip></TitleTip>
}
@if (_dataCatcheService.ThemeSetting.IsTransparent)
{
    @if (string.IsNullOrWhiteSpace(Model.SmallBackgroundPicture) == false)
    {
        <div id="web_bg" style="background-image: url(@Model.SmallBackgroundPicture)" class=" d-none  bg-d-lg-block bgimage-ison"></div>
    }
    @if (string.IsNullOrWhiteSpace(Model.BackgroundPicture) == false)
    {
        <div id="web_bg" style="background-image: url(@Model.BackgroundPicture)" class=" d-none d-sm-block bgimage-ison"></div>
    }
}


@if (isNotFound == true)
{
    int temp = 0;
    <NotFoundPeriphery IsNeedLayput="true"></NotFoundPeriphery>
}
else
{
    <div>
        @if (isReady == false)
        {
            <div style="padding-right: 0;padding-left: 0;">
                <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                    <SkeletonParagraph />
                    <hr class="m-2" />
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {
            @if (Model.IsHidden == true)
            {
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Warning" Class="mb-3">
                    当前周边处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
            }

            <div class="  rounded shadow-sm  bg-opacity mb-3">
                <PeripheryMainInforTip Model="Model" />
                <div>
                    <CnGalWebSite.Shared.Component.Votes.Relevances.ListRelatedVotesInforCard Type="VoteOptionType.Periphery" Id="Model.Id" />
                </div>
                <div class="mt-4 pb-4">
                    <PeripheryOperationTip Model="Model" CollectionChanged="CollectionChanged"></PeripheryOperationTip>
                </div>

            </div>
            <div class="rounded shadow-sm bg-opacity mb-3">
                <PeripheryBasicInforTip Model="Model" OnRevoke="OnRevoke" />
            </div>

            @if (Model.Pictures.Count != 0)
            {
                <div class="mb-3">
                    <PeripheryImagesViewTip Model="Model" OnRevoke="OnRevoke" />
                </div>
            }
            <div class="">
                <PeripheryListOverviewsTip Model="Model" @ref="peripheryOverViewTip" OnRevoke="OnRevoke" />
            </div>

            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="留言板" Icon="fa fa-fw fa-sticky-note-o" Outline>
                <CnGalWebSite.Shared.MasaComponent.PC.Comments.CommentTip CanComment="Model.CanComment" CanDeleted="IsAdmin" ObjectId="@Model.Id.ToString()" Type="CommentType.CommentPeriphery" />
            </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
        }
    </div>
}



@code {
    private string id = "";
    [Parameter]
    public string Id
    {
        get { return id; }
        set
        {
            id = value;
            if (isFrist == false)
            {
                OnInitializedAsync();

            }
        }
    }
    public string steam { get; set; }
    public string MainPageHtml { get; set; }
    public int currentPage { get; set; } = 1;
    public string NoticeCard { get; set; } = "";
    public string CurrentUserRank { get; set; }
    bool isReady = false;
    bool isNotFound = false;
    bool isAsyncReady = false;

    public PeripheryViewModel Model { get; set; } = new PeripheryViewModel();

    public PagedResultDto<CommentViewModel> ListComments = new CnGalWebSite.DataModel.Application.Dtos.PagedResultDto<CommentViewModel> { Data = new List<CommentViewModel>(), CurrentPage = 1, TotalCount = 0 };

    public bool IsUserFavorited { get; set; }
    public FavoriteFoldersViewModel UserFavoriteInfor { get; set; }
    private PeripheryListOverviewsTip peripheryOverViewTip;
    public bool IsAdmin { get; set; } = false;
    string LastLookName = "";
    bool isFrist = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //记录数据
        if (LastLookName != Model.Name && string.IsNullOrWhiteSpace(Model.Name) == false)
        {
            LastLookName = Model.Name;
            try
            {
                await JS.InvokeAsync<string>("trackEvent", "周边", "浏览", Model.Name, "1", "look");
            }
            catch (Exception exc)
            {

            }
        }
        if (firstRender)
        {

            isFrist = false;
        }

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isReady = false;
            isNotFound = false;
            //获取周边信息
            Model = await _dataCatcheService.PeripheryIndexPageCatche.GetCatche(Id);
            //判断周边名称是否为空 为空则跳转到主页
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                NavigationManager.NavigateTo(Provider, "/home", "主页", "fa fa-home");
            }

            isReady = true;
            StateHasChanged();

            var user = await authenticationStateTask;

            if (user.User.Identity.IsAuthenticated)
            {
                IsAdmin = user.User.IsInRole("Editor");
            }


        }
        catch (Exception exc)
        {
            isReady = true;
            isNotFound = true;
            StateHasChanged();
        }

    }

    public async Task CollectionChanged(bool isCollected)
    {
        Model.IsCollected = isCollected;
        peripheryOverViewTip.CollectionChanged(isCollected, Model.Id);
    }

    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",

            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/peripheries/RevokeExamine", new RevokeExamineModel { Id = Model.Id, ExamineType = operation });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                switch (operation)
                {
                    case Operation.EditPeripheryMain:
                        Model.MainState = EditState.Normal;
                        break;
                    case Operation.EditPeripheryImages:
                        Model.ImagesState = EditState.Normal;
                        break;
                    case Operation.EditPeripheryRelatedEntries:
                        Model.RelatedEntriesState = EditState.Normal;
                        break;
                }
                Id = id;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "撤销审核请求失败");
        }
    }

}
