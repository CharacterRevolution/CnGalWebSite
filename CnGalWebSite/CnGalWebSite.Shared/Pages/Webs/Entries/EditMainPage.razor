@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}
<link rel="stylesheet" href="https://app.cngal.org/_content/BootstrapBlazor.Markdown/css/bootstrap.blazor.markdown.min.css" media="none" onload="this.media='all'" />


<div class="">
    <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
    <AlertTip Type="AlertTip.AlertTipType.EntryStandard"></AlertTip>
    <div class="alert alert-success  rounded shadow  rounded" role="alert">
        可以在这里填写遗漏的信息、游戏的剧情、人物的性格......这个页面将会成为词条主页中最大版面的部分
    </div>
    @if (isReady == false)
    {
        <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
            <h3 class="text-truncate mb-4 fw-bold">编辑主页</h3>
            <h5 class=" mb-4 fw-bold">当前词条：（Id:）</h5>
            <hr>

            <div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }
    else
    {
        @if (Model.Type == EntryType.Staff)
        {
            <div class="alert alert-danger  rounded shadow  rounded" role="alert">
                这个词条可能涉及到现实人物，请勿过分较真，也请谨慎编辑，仔细斟酌词句
            </div>
        }
        else
        {

        }
        <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-3">
            <h3 class="text-truncate mb-4 fw-bold">编辑主页</h3>
            <h5 class="text-truncate mb-4 fw-bold">当前词条：@Model.Name（Id:@Model.Id）</h5>
            <hr class="mb-4" />

            @if (isReady == true)
            {
                <MarkdownEditorTip Context="@Model.Context" @ref="markdownEditorTip"></MarkdownEditorTip>

            }
        </div>
        <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
            <div>
                <ValidateForm Model="@Model">
                    <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                </ValidateForm>
                <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
            </div>
        </div>
    }

</div>


@code {
    [Parameter]
    public string Id { get; set; }
    public EditMainPageViewModel Model { get; set; } = new EditMainPageViewModel();

    bool isReady = false;
    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditMainPageViewModel>(ToolHelper.WebApiPath + "api/entries/editmainpage/" + Id);

            isReady = true;
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑词条主页失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            Model.Context = await markdownEditorTip.GetContext();
            if (string.IsNullOrWhiteSpace(Model.Context))
            {
                Model.Context = "";
            }
            //检查文本长度
            if (Model.Context.Length > 100000)
            {
                await ToastService.Error("文本长度超过上限", "强烈建议使用链接显示图片，内嵌图片会导致性能严重下降。请控制文本量，额外的文字可以移动到关联文章中");
                return;
            }
            var result = await Http.PostAsJsonAsync<EditMainPageViewModel>(ToolHelper.WebApiPath + "api/entries/editmainpage", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存词条主页失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存成功", "保存词条主页成功，等待审核通过");
                NavigationManager.NavigateTo(Provider,"/entries/index/" + Model.Id, Model.Name, "fa fa-codepen");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存词条主页失败");
        }
    }
}
