@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}

<div class="">
    <div class="" style="padding-right: 0; padding-left: 0">

        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.EntryStandard"></AlertTip>
        <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
            请尽量填写此部分，我们会根据名称动态关联词条，即使词条此时并不存在也可以填写，只要你确保会在未来创建
        </div>

        <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
            未填写的词条将会自动忽略，不需要手动删除
        </div>
        @if (Model.Type == EntryType.Staff)
        {
            <div class="alert alert-danger  rounded shadow-sm  rounded" role="alert">
                这个词条可能涉及到现实人物，请勿过分较真，也请谨慎编辑，仔细斟酌词句
            </div>
        }
        else
        {

        }
        @if (isReady == false)
        {
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑关联词条</h3>
                <h5 class="mb-4 fw-bold">当前词条：（Id:）</h5>
                <hr>

                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {

            <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-3">
                <h3 class="text-truncate mb-4 fw-bold">
                    编辑关联词条
                </h3>
                <h5 class=" mb-4 fw-bold">当前词条：@Model.Name（Id:@Model.Id）</h5>
                <hr />

                <InputRelevancesListTip AutoCompleteItems="@EntryRoleItems" Model="Model.Roles" Title="出场角色"></InputRelevancesListTip>


                @if (Model.Type != EntryType.Game)
                {
                    <hr class="mt-4" />
                    <InputRelevancesListTip AutoCompleteItems="@EntryStaffItems" Model="Model.staffs" Title="STAFF"></InputRelevancesListTip>
                }
                <hr class="mt-4" />
                <InputRelevancesListTip AutoCompleteItems="@ArticleItems" Model="Model.news" Title="动态"></InputRelevancesListTip>
                <hr class="mt-4" />
                <InputRelevancesListTip AutoCompleteItems="@ArticleItems" Model="Model.articles" Title="文章"></InputRelevancesListTip>
                <hr class="mt-4" />
                <InputRelevancesListTip AutoCompleteItems="@EntryGameItems" Model="Model.Games" Title="游戏"></InputRelevancesListTip>
                <hr class="mt-4" />
                <InputRelevancesListTip AutoCompleteItems="@EntryGroupItems" Model="Model.Groups" Title="制作组"></InputRelevancesListTip>
                <hr class="mt-4" />
                <InputOtherLinkListTip Model="Model.others" Title="自定义链接"></InputOtherLinkListTip>
            </div>

            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
                <div>
                    <ValidateForm Model="@Model">
                        <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                    </ValidateForm>
                    <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public EditRelevancesViewModel Model { get; set; } = new EditRelevancesViewModel()
    {
        Roles = new List<RelevancesModel>(),
        articles = new List<RelevancesModel>(),
        Groups = new List<RelevancesModel>(),
        Games = new List<RelevancesModel>(),
        others = new List<RelevancesModel>(),
        staffs = new List<RelevancesModel>(),
        news = new List<RelevancesModel>()
    };
    private IEnumerable<string> EntryGameItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryRoleItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryGroupItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryStaffItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> ArticleItems { get; set; } = new string[1] { "" };

    bool isReady = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditRelevancesViewModel>(ToolHelper.WebApiPath + "api/entries/editrelevances/" + Id);
            //获取所有词条
            EntryGameItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/0");
            EntryRoleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/1");
            EntryGroupItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/2");
            EntryStaffItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/3");
            //获取所有文章
            ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles");
            isReady = true;
            StateHasChanged();

        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑词条关联信息失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<EditRelevancesViewModel>(ToolHelper.WebApiPath + "api/entries/editrelevances", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存词条关联信息失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存成功", "保存词条关联信息成功，等待审核通过");
                NavigationManager.NavigateTo(Provider,"/entries/index/" + Model.Id, Model.Name, "fa fa-codepen");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存词条关联信息失败");
        }
    }
}
