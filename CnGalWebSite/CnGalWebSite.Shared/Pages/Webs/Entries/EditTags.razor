@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}
<div class="">
    <div class="" style="padding-right: 0; padding-left: 0">

        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.EntryStandard"></AlertTip>
        <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
            未填写的标签将会自动忽略，不需要手动删除
        </div>
        @if (Model.Type == EntryType.Staff)
        {
            <div class="alert alert-danger  rounded shadow-sm  rounded" role="alert">
                这个词条可能涉及到现实人物，请勿过分较真，也请谨慎编辑，仔细斟酌词句
            </div>
        }
        else
        {

        }
        @if (isReady == false)
        {
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑词条标签</h3>
                <h5 class="mb-4 fw-bold">当前词条：（Id:）</h5>
                <hr>

                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
                <h3 class="text-truncate mb-4 fw-bold">可选标签</h3>
                <hr>

                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {
            <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">
                    编辑词条标签
                </h3>
                <h5 class="text-truncate mb-4 fw-bold">当前词条：@Model.Name（Id:@Model.Id）</h5>
                <hr />
                <InputTagListTip AutoCompleteItems="@TagItems" Model="Model.Tags"></InputTagListTip>
            </div>
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3">
                <div>
                    <ValidateForm Model="@Model">
                        <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                    </ValidateForm>
                    <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
                </div>
            </div>

            <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
                <SearchTagsViewTip></SearchTagsViewTip>

            </div>

        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public EditEntryTagViewModel Model { get; set; } = new EditEntryTagViewModel();

    private bool isReady = false;
    string SearchString { get; set; } = "";
    private IEnumerable<string> TagItems { get; set; } = new string[1] { "" };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditEntryTagViewModel>(ToolHelper.WebApiPath + "api/entries/edittags/" + Id);
            //获取所有标签
            TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags");

            //获取该分类下的所有二级三级标签
            string tagString = "";
            switch (Model.Type)
            {
                case EntryType.Game:
                    tagString = "游戏";
                    break;
                case EntryType.Role:
                    tagString = "角色";
                    break;
                case EntryType.Staff:
                    tagString = "STAFF";
                    break;
                case EntryType.ProductionGroup:
                    tagString = "制作组";
                    break;
            }
            isReady = true;
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑词条标签失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理标签 删除空标签
            for (int i = 0; i < Model.Tags.Count; i++)
            {
                if (string.IsNullOrWhiteSpace(Model.Tags[i].DisplayName) == true)
                {
                    Model.Tags.RemoveAt(i);
                }
            }
            var result = await Http.PostAsJsonAsync<EditEntryTagViewModel>(ToolHelper.WebApiPath + "api/entries/edittags", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存词条标签失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存成功", "保存词条标签成功，等待审核通过");
                NavigationManager.NavigateTo(Provider,"/entries/index/" + Model.Id, Model.Name, "fa fa-codepen");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存词条标签失败");
        }
    }


}
