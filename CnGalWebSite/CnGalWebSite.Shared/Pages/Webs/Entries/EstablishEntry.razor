
@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


<TitleTip Title="创建词条"></TitleTip>

<MakeSureInWASMTip></MakeSureInWASMTip>
<link rel="stylesheet" href="https://app.cngal.org/_content/BootstrapBlazor.Markdown/css/bootstrap.blazor.markdown.min.css" media="none" onload="this.media='all'" />

<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.EntryStandard"></AlertTip>
        @if (Model.Type == EntryType.Staff)
        {
            <div class="alert alert-danger  rounded shadow-sm  rounded" role="alert">
                这个词条可能涉及到现实人物，请勿过分较真，也请谨慎编辑，仔细斟酌词句
            </div>
        }
        <ValidateForm Model="@Model" ValidateAllProperties="true" @ref="ComplexForm">
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">填写主要信息</h3>
                <hr />

                <div class="row">
                    <div class=" col-12 col-md-6  col-lg-3 mt-2">
                        <ImageCropperButton ImagePath="@MainImagePath" OnUploadedImage="OnCardUploadMain" EntryType_="Model.Type" IsMainImage="true"
                                            IsMustCropper="true" Text="上传主图"></ImageCropperButton>
                    </div>
                    <div class=" col-12 col-md-6  col-lg-3 mt-2">
                        <ImageCropperButton ImagePath="@ThuImagePath" OnUploadedImage="OnCardUploadThu" Type="ImageAspectType._1_1" Text="上传缩略图"></ImageCropperButton>
                    </div>
                    <div class=" col-12 col-md-6  col-lg-3 mt-2">
                        <ImageCropperButton ImagePath="@BackImagePath" OnUploadedImage="OnCardUploadBack" Type="ImageAspectType.None" Text="上传大背景"></ImageCropperButton>
                    </div>
                    <div class=" col-12 col-md-6  col-lg-3 mt-2">
                        <ImageCropperButton ImagePath="@SmallBackImagePath" OnUploadedImage="OnCardUploadSmall" Type="ImageAspectType.None" Text="上传小背景"></ImageCropperButton>
                    </div>

                </div>

                <div class="form-group mt-4">
                    <div class="row">
                        <div class="form-group col-12  col-sm-6">
                            <Select @bind-Value="Model.Type"></Select>
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Name" />
                        </div>

                        <div class="form-group col-12">
                            <AlertTip Type="AlertTip.AlertTipType.CreateDisambig"></AlertTip>
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.DisplayName" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.AnotherName" />
                        </div>

                        <div class="form-group col-12">
                            <BootstrapInput @bind-Value="Model.BriefIntroduction" />
                        </div>
                    </div>
                </div>


            </div>
        </ValidateForm>
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
            <h3 class="text-truncate mb-4 fw-bold">填写基本信息</h3>
            <hr />
            <h5 class="fw-bold mb-4">基本信息</h5>


            @switch (Model.Type)
            {
                case EntryType.Game:
                    <div class="row">
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.SteamId" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <DateTimePicker @bind-Value="@Model.IssueTime" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="@Model.IssueTimeString" ShowLabel="true" />
                        </div>

                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Original" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <AutoComplete Items="@EntryGroupItems" IsLikeMatch="true" IgnoreCase="true" @bind-Value="Model.ProductionGroup" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Engine" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Publisher" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.IssueMethod" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.OfficialWebsite" ShowLabel="true" />
                        </div>

                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.QQgroupGame" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12">
                            <CheckboxList @bind-Value="@GamePlatformsValue" ShowBorder="true" Items="@GamePlatforms" DisplayText="游戏平台" ShowLabel="true"></CheckboxList>
                        </div>
                        <div class="col-12 p-3">
                            <Divider></Divider>
                        </div>
                    </div>

                    <h5 class="fw-bold mb-4">STAFF</h5>
                    <StaffEditorChartListTip Staffs="Model.InforStaffs" @ref="staffEditor"></StaffEditorChartListTip>

                    break;
                case EntryType.ProductionGroup:
                    <ValidateForm Model="@Model" ValidateAllProperties="true">
                        <div class="row">
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.QQgroupGroup" />
                            </div>
                        </div>
                    </ValidateForm>

                    break;
                case EntryType.Role:
                    <div class="row">
                        <div class="form-group col-12  col-sm-6">
                            <AutoComplete Items="@EntryStaffItems" IsLikeMatch="true" IgnoreCase="true" @bind-Value="Model.CV" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <Select @bind-Value="Model.Gender" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.FigureData" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.FigureSubjective" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <DateTimePicker @bind-Value="@Model.Birthday" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Haircolor" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Pupilcolor" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.ClothesAccessories" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Character" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.RoleIdentity" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.BloodType" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.RoleHeight" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.RoleTaste" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.RoleAge" ShowLabel="true" />
                        </div>
                    </div>

                    break;
                case EntryType.Staff:
                    <ValidateForm Model="@Model" ValidateAllProperties="true">
                        <div class="row">
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.Nickname" />
                            </div>
                        </div>
                    </ValidateForm>
                    break;
            }

            <div class="col-12 pt-3 pb-3">
                <Divider></Divider>
            </div>
            <InputSocialPlatformListTip Model="Model.SocialPlatforms"></InputSocialPlatformListTip>
        </div>
    </div>

    <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
        未填写的标签将会自动忽略，不需要手动删除
    </div>
    <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
        <h3 class="text-truncate mb-4 fw-bold">
            添加词条标签
        </h3>
        <hr />
        <InputTagListTip AutoCompleteItems="@TagItems" Model="Model.Tags"></InputTagListTip>
    </div>
    <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
        <SearchTagsViewTip></SearchTagsViewTip>
    </div>
    <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
        可以在这里上传游戏的宣传图，不涉及<strong>剧透、侵权、违法</strong>的游戏CG和角色立绘等图片
    </div>

    <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
        <h3 class="text-truncate mb-4 fw-bold">相册</h3>
        <hr />
        <ImagesListEditorViewTip Images="Model.Images" @ref="ImagesListEditorView"></ImagesListEditorViewTip>

    </div>
    <div class="alert alert-success  rounded shadow-sm  rounded" role="alert">
        请尽量填写此部分，我们会根据名称动态关联词条，即使词条此时并不存在也可以填写，只要你确保会在未来创建
    </div>
    <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
        未填写的词条将会自动忽略，不需要手动删除
    </div>
    <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
        <h3 class="text-truncate mb-4 fw-bold">
            添加关联词条
        </h3>
        <hr />
        <InputRelevancesListTip AutoCompleteItems="@EntryRoleItems" Model="Model.Roles" Title="出场角色"></InputRelevancesListTip>


        @if (Model.Type != EntryType.Game)
        {
            <hr class="mt-4" />
            <InputRelevancesListTip AutoCompleteItems="@EntryStaffItems" Model="Model.ReStaffs" Title="STAFF"></InputRelevancesListTip>
        }
        <hr class="mt-4" />
        <InputRelevancesListTip AutoCompleteItems="@ArticleItems" Model="Model.News" Title="动态"></InputRelevancesListTip>
        <hr class="mt-4" />
        <InputRelevancesListTip AutoCompleteItems="@ArticleItems" Model="Model.articles" Title="文章"></InputRelevancesListTip>
        <hr class="mt-4" />
        <InputRelevancesListTip AutoCompleteItems="@EntryGameItems" Model="Model.Games" Title="游戏"></InputRelevancesListTip>
        <hr class="mt-4" />
        <InputRelevancesListTip AutoCompleteItems="@EntryGroupItems" Model="Model.Groups" Title="制作组"></InputRelevancesListTip>
        <hr class="mt-4" />
        <InputOtherLinkListTip Model="Model.Others" Title="自定义链接"></InputOtherLinkListTip>
    </div>


    <div class="alert alert-success  rounded shadow-sm  rounded" role="alert">
        可以在这里填写遗漏的信息、游戏的剧情、人物的性格......这个页面将会成为词条主页中最大版面的部分
    </div>
    <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
        <h3 class="text-truncate mb-4 fw-bold">编辑主页</h3>
        <hr class="mb-4" />

        @if (isReady == true)
        {
            <MarkdownEditorTip @ref="markdownEditorTip"></MarkdownEditorTip>
        }


    </div>
    <div class="alert alert-warning  rounded shadow-sm  rounded" role="alert">
        当你点击“完成”按钮时，将会立即发起审核请求，请在点击前确保内容正确无误
    </div>
    <div class="alert alert-success  rounded shadow-sm  rounded" role="alert">
        不需要填写完所有的项目再提交，你也可以先提交审核再慢慢修改
    </div>
    <ValidateForm Model="@Model" ValidateAllProperties="true">
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
            <div>
                <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
            </div>
        </div>
    </ValidateForm>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Name { get; set; }

    private EstablishEntryViewModel Model { get; set; } = new EstablishEntryViewModel();

    private string MainImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    private string ThuImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    private string BackImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    private string SmallBackImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";

    [Display(Name = "游戏平台")]
    private List<SelectedItem> GamePlatforms { get; set; } = new List<SelectedItem> {
        new SelectedItem{Text=GamePlatformType.Android.ToString(),Value=GamePlatformType.Android.ToString()},
        new SelectedItem{Text=GamePlatformType.DOS.ToString(),Value=GamePlatformType.DOS.ToString()},
        new SelectedItem{Text=GamePlatformType.IOS.ToString(),Value=GamePlatformType.IOS.ToString()},
        new SelectedItem{Text=GamePlatformType.Linux.ToString(),Value=GamePlatformType.Linux.ToString()},
        new SelectedItem{Text=GamePlatformType.Mac.ToString(),Value=GamePlatformType.Mac.ToString()},
        new SelectedItem{Text=GamePlatformType.NS.ToString(),Value=GamePlatformType.NS.ToString()},
        new SelectedItem{Text=GamePlatformType.PS.ToString(),Value=GamePlatformType.PS.ToString()},
        new SelectedItem{Text=GamePlatformType.Windows.ToString(),Value=GamePlatformType.Windows.ToString()},
        new SelectedItem{Text=GamePlatformType.HarmonyOS.ToString(),Value=GamePlatformType.HarmonyOS.ToString()},
        };
    [Display(Name = "游戏平台")]
    private List<string> GamePlatformsValue { get; set; } = new List<string>();
    private List<UploadFile> DefaultFormatFileListImages { get; set; } = new List<UploadFile>();
    public List<ImagesUploadAloneModel> images { get; set; } = new List<ImagesUploadAloneModel>();
    private List<UploadFile> DefaultFormatFileListMain { get; set; } = new List<UploadFile>();
    [NotNull]
    private ValidateForm? ComplexForm { get; set; }
    public DataModel.Model.Tag TagList = new DataModel.Model.Tag()
    {
        InverseParentCodeNavigation = new List<DataModel.Model.Tag>()
    };
    string SearchString { get; set; } = "";
    private List<string> Items = new List<string>();
    private List<string> SearchResult = new List<string>();
    string TagString = "";

    private bool isReady = true;
    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;
    [NotNull]
    private StaffEditorChartListTip? staffEditor { get; set; }
    [NotNull]
    private ImagesListEditorViewTip? ImagesListEditorView;
    private IEnumerable<string> EntryGameItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryRoleItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryGroupItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryStaffItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> ArticleItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> TagItems { get; set; } = new string[1] { "" };

    public ImageCropperButton MainImageButton;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model.Name = Model.DisplayName = Name;
            //获取所有词条
            EntryGameItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/0");
            EntryRoleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/1");
            EntryGroupItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/2");
            EntryStaffItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/3");
            //获取所有文章
            ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles");
            //获取所有标签
            TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags");

        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取所有词条文章标签名称列表失败");
        }
    }
    private async Task OnSubmit()
    {
        try
        {
            //复制数据
            Model.Images = ImagesListEditorView.Images;
            Model.Context = await markdownEditorTip.GetContext();
            //调整时间
            if (Model.IssueTime != null)
            {
                Model.IssueTime = Model.IssueTime.Value.AddHours(Model.IssueTime.Value.Hour < 12 ? (12 - Model.IssueTime.Value.Hour) : 0);
            }
            if (Model.Birthday != null)
            {
                Model.Birthday = Model.Birthday.Value.AddHours(Model.Birthday.Value.Hour < 12 ? (12 - Model.Birthday.Value.Hour) : 0);
            }
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name) || string.IsNullOrWhiteSpace(Model.DisplayName))
            {
                await ToastService.Error("创建词条失败", "请填写所有必填项目");
                return;
            }

            //检查图片链接 是否包含外链
            foreach (var item in Model.Images)
            {
                if (item.Url.Contains("image.cngal.org") == false && item.Url.Contains("pic.cngal.top") == false)
                {
                    await ToastService.Error("相册中不能添加外部图片", item.Url);
                }
            }
            //处理游戏平台数据
            Model.GamePlatforms = new List<GamePlatformModel>();
            foreach (var item in GamePlatforms)
            {
                bool isSelected = false;
                foreach (var infor in GamePlatformsValue)
                {
                    if (infor == item.Value)
                    {
                        isSelected = true;
                    }
                }
                Model.GamePlatforms.Add(new GamePlatformModel
                {
                    GamePlatformType = (GamePlatformType)Enum.Parse(typeof(GamePlatformType), item.Value),
                    IsSelected = isSelected
                });
            }
            //检查文本长度
            if (Model.Context != null && Model.Context.Length > 100000)
            {
                await ToastService.Error("文本长度超过上限", "强烈建议使用链接显示图片，内嵌图片会导致性能严重下降。请控制文本量，额外的文字可以移动到关联文章中");
                return;
            }
            //复制staff
            if (staffEditor != null)
            {
                Model.InforStaffs = staffEditor.Staffs;
            }

            var result = await Http.PostAsJsonAsync<EstablishEntryViewModel>(ToolHelper.WebApiPath + "api/entries/EstablishEntry", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                if (obj.Error == "该词条的名称与其他词条重复")
                {
                    ComplexForm.SetError<EstablishEntryViewModel>(f => f.Name, "已经存在该名称的词条");
                }
                await ToastService.Error("创建词条失败", obj.Error);
            }
            else
            {
                await ToastService.Success("创建词条成功", "创建词条成功，等待审核通过");
                NavigationManager.NavigateTo(Provider,"/entries/index/" + obj.Error, Model.Name, "fa fa-codepen");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "创建词条失败");
        }
    }

    private Task OnCardUploadMain(string url)
    {
        MainImagePath = url;
        Model.MainPicture = url;
        return Task.CompletedTask;
    }
    private Task OnCardUploadThu(string url)
    {
        ThuImagePath = url;
        Model.Thumbnail = url;
        return Task.CompletedTask;
    }
    private Task OnCardUploadBack(string url)
    {
        BackImagePath = url;
        Model.BackgroundPicture = url;
        return Task.CompletedTask;
    }
    private Task OnCardUploadSmall(string url)
    {
        SmallBackImagePath = url;
        Model.SmallBackgroundPicture = url;
        return Task.CompletedTask;
    }


    public Task OnChangeEntryType()
    {
        switch (Model.Type)
        {
            case EntryType.Game:
                MainImageButton.Type = ImageAspectType._16_9;
                break;
            case EntryType.ProductionGroup:
                MainImageButton.Type = ImageAspectType._16_9;
                break;
            case EntryType.Role:
                MainImageButton.Type = ImageAspectType.None;
                break;
            case EntryType.Staff:
                MainImageButton.Type = ImageAspectType.None;
                break;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
}
