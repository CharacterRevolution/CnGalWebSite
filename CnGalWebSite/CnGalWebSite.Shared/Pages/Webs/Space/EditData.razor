@inject HttpClient Http
@inject ExamineService _examineService
@inject SwalService SwalService
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


<TitleTip Title="编辑个人资料"></TitleTip>
<AutoSaveTip TItem="EditUserDataViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />

<div class="rounded shadow-sm p-4 bg-opacity rounded">
    @if (isReady == false)
    {
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <hr />
        <h5 class="fw-bold mb-3">账户安全</h5>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <hr />
        <h5 class="fw-bold mb-3">基本信息</h5>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
    }
    else
    {
        <div class="row">
            <div class=" col-12 col-md-6  col-lg-3 mb-2">
                <ImageCropperButton @bind-ImagePath="@Model.PhotoName" Type="ImageAspectType._1_1" Text="上传头像"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mb-2">
                <ImageCropperButton @bind-ImagePath="@Model.BackgroundName" Type="ImageAspectType._4_1A2" Text="上传空间主图"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mb-2">
                <ImageCropperButton @bind-ImagePath="@Model.MBgImageName" Type="ImageAspectType.None" Text="上传大背景"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mb-2">
                <ImageCropperButton @bind-ImagePath="@Model.SBgImageName" Type="ImageAspectType.None" Text="上传小背景"></ImageCropperButton>
            </div>
        </div>
        <hr />
        <h5 class="fw-bold mb-3">账户安全</h5>
        <p>
            密码：********
            <a href="@("/account/ChangePassword/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">修改</a>


        </p>
        <p>
            邮箱：@Model.Email
            <a href="@("/account/ChangeEmail/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">修改</a>
        </p>
        <p>

            @if (string.IsNullOrWhiteSpace(Model.Phone))
            {
                <span>手机：无</span>
                <a href="@("/account/AddPhoneNumber/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">绑定</a>
            }
            else
            {
                <span>手机：@Model.Phone</span>
                <a href="@("/account/ChangePhoneNumber/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">修改</a>

            }

        </p>
        @if (string.IsNullOrWhiteSpace(Model.GiteeAccountName))
        {
            <p>
                Gitee：无
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl(NavigationManager.Uri), ThirdPartyLoginType.Gitee))" class="ms-3" one-link-mark="yes">绑定</a>
            </p>
        }
        else
        {
            <p>
                Gitee：@Model.GiteeAccountName
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl(NavigationManager.Uri), ThirdPartyLoginType.Gitee))" class="ms-3" one-link-mark="yes">修改</a>
            </p>
        }
        @if (string.IsNullOrWhiteSpace(Model.QQAccountName))
        {
            <p>
                QQ：无
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl(NavigationManager.Uri), ThirdPartyLoginType.QQ))" class="ms-3" one-link-mark="yes">绑定</a>
            </p>
        }
        else
        {
            <p>
                QQ：@Model.QQAccountName
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl(NavigationManager.Uri), ThirdPartyLoginType.QQ))" class="ms-3" one-link-mark="yes">修改</a>
            </p>
        }

        <hr />
        <h5 class="fw-bold mb-3">基本信息</h5>
        <ValidateForm Model="@Model" OnValidSubmit="OnSubmit" ValidateAllProperties="true">

            <div class="row">

                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.UserName" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.SteamId" />
                </div>

                <div class="form-group col-12  col-sm-6">
                    <DateTimePicker @bind-Value="@Model.Birthday" />
                </div>
                <div class="form-group col-12 col-sm-6">
                    <Switch @bind-Value="Model.CanComment" />
                </div>
                <div class="form-group col-12 col-sm-6">
                    <Switch @bind-Value="Model.IsShowGameRecord" />
                </div>

                <div class="form-group col-12">
                    <BootstrapInput @bind-Value="Model.PersonalSignature" />
                </div>
                <div class="form-group col-12">
                    <CheckboxList @bind-Value="@RanksName" ShowBorder="true" Items="@UserRanks" DisplayText="展示的头衔" ShowLabel="true"></CheckboxList>
                </div>

            </div>
            <Button ButtonType="ButtonType.Submit" IsOutline="true" Color="Color.Success" class="mt-4" style="width: 100px" IsAsync="true" Icon="fa fa-check" Text="完成"> </Button>
        </ValidateForm>
    }

</div>
@code {


    [Parameter]
    public string Id { get; set; }
    public EditUserDataViewModel Model { get; set; } = new EditUserDataViewModel();
    private bool isReady = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<SelectedItem> UserRanks { get; set; } = new List<SelectedItem>();
    private List<string> RanksName { get; set; } = new List<string>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EditUserDataViewModel> autoSave { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata/");
            //处理头衔
            foreach (var item in Model.Ranks)
            {

                UserRanks.Add(new SelectedItem
                {
                    Text = item.Name,
                    Active = item.IsShow,
                    Value = item.Name
                });
                if (item.IsShow)
                {
                    RanksName.Add(item.Name);
                }
            }
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑用户资料失败");
        }
    }

    private async Task OnSubmit(EditContext context)
    {
        //上传
        try
        {
            //处理时间
            if (Model.Birthday != null)
            {
                Model.Birthday = Model.Birthday.Value.AddHours(Model.Birthday.Value.Hour < 12 ? (12 - Model.Birthday.Value.Hour) : 0);
            }
            //处理头衔
            if (RanksName.Count == 0)
            {
                await ToastService.Error("保存用户信息失败", "至少展示一个头衔");
                return;
            }
            Model.Ranks = new List<UserEditRankIsShow>();
            foreach (var item in UserRanks)
            {
                Model.Ranks.Add(new UserEditRankIsShow
                {
                    Name = item.Text,
                    IsShow = RanksName.Any(s => s == item.Text)
                });
            }
            if(string.IsNullOrWhiteSpace(Model.SteamId)==false)
            {
                System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("^(-?[0-9]*[.]*[0-9]{0,3})$");
                var steamIds = Model.SteamId.Replace("，", ",").Replace("、", ",").Split(',');
                foreach (var item in steamIds)
                {
                    if (regex.IsMatch(Model.SteamId) == false)
                    {
                        await ToastService.Error("编辑用户Steam信息失败", "SteamId需为64位纯数字");
                        return;
                    }
                }
            }

            var result = await Http.PostAsJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存用户信息失败", obj.Error);
            }
            else
            {
                await autoSave.Clean();

                var userState = await authenticationStateTask;
                var user = userState.User;
                SwalOption op = null;
                if (user.Identity.Name == Model.UserName)
                {
                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改个人资料成功",
                        Content = "我们需要对你的修改进行审核，在通过审核之前你的修改对其他用户不可见",
                        ShowClose = false
                    };
                }
                else
                {

                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改用户名成功",
                        Content = "我们需要对你的修改进行审核，通过后重新登入即可生效",
                        ShowClose = false
                    };
                }
                op.ButtonTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<Button>(0);
                    builder.AddAttribute(1, nameof(Button.Text), "我知道了");
                    builder.AddAttribute(2, nameof(Button.Icon), "fa fa-check");
                    builder.AddAttribute(3, nameof(Button.Color), Color.Success);
                    builder.AddAttribute(4, nameof(Button.IsOutline), true);
                    builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                    {
                        await op.Close();
                        NavigationManager.NavigateTo(Provider, "/space/index/" + Model.Id, "个人空间", "fa fa-star-o");
                    }));
                    builder.CloseComponent();
                });
                await SwalService.Show(op);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存用户信息失败");
        }
    }

    private Task DataLoaded(EditUserDataViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

}
