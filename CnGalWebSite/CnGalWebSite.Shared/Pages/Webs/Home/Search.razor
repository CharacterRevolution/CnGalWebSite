@inject HttpClient Http
@inject IRoleService _roleService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService

<TitleTip Title="搜索"></TitleTip>

<style>
    .search-view .tab-Badge-color .line {
        background: transparent;
        transition: none;
    }

    .search-view .auto-complete {
        width: 100%;
    }
</style>

<div class="search-view">
    <div class="shadow-sm bg-opacity rounded">
        <div style=" display: flex; justify-content: center; " class="pt-3 ps-3 pe-3">
            <div style="display: flex; justify-content: center; max-width: 500px; width: 100%; ">
                <AutoComplete Items="Items" IsLikeMatch="true" PlaceHolder="可以搜索哦~" @bind-Value="_dataCacheService.SearchViewModel.pagedResultDto.FilterText" style=" width: 100%;"></AutoComplete>
                <Button OnClick="@OnSearchString" Color="Color.Dark" IsAsync="true" Icon="fa fa-search" style="width: 100px;" class="ms-3">&nbsp;&nbsp;搜索</Button>
            </div>
        </div>
        <div class="mt-3">
            <CnGalWebSite.Shared.Component.Search.NewVersion.PivotLine OnTabClick="OnTabClick" DefaultIndex="defaultIndex" RandomIndex="randomIndex" @ref="pivotLine" />
        </div>
        <div class="mt-3 ms-3 me-3">
            <CnGalWebSite.Shared.Component.Search.NewVersion.SortTab OnTabClick="OnSort" ScreenString="@_dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions" Type="searchScreenType" Sorting="@_dataCacheService.SearchViewModel.pagedResultDto.Sorting" @ref="sortTab" />
        </div>
        <div class="mt-2  ms-3 me-3 pb-3">
            <CnGalWebSite.Shared.Component.Search.NewVersion.ScreenTab OnTabClick="OnScreen" ScreenString="@_dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions" Type="searchScreenType" @ref="screenTab" />
        </div>
    </div>
    <div class="mt-3">

        @if (isReady == false)
        {
            <div style="height:300px">
                <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip Height="100%" />
            </div>
        }
        else
        {
            @if (_dataCacheService.IsApp)
            {
                <CnGalWebSite.Shared.AppComponent.Pages.Home.Search.ListSearchResult Model="@_dataCacheService.SearchViewModel.pagedResultDto.Data" />
            }
            else
            {
                @for (int i = 0; i < _dataCacheService.SearchViewModel.pagedResultDto.Data.Count; i++)
                {
                    <div class="mb-3">
                        @if (_dataCacheService.SearchViewModel.pagedResultDto.Data[i].entry != null)
                        {
                            <CnGalWebSite.Shared.Component.Search.NewVersion.EntryInforViewTip Model="_dataCacheService.SearchViewModel.pagedResultDto.Data[i].entry" ColorNum="main"></CnGalWebSite.Shared.Component.Search.NewVersion.EntryInforViewTip>
                            tempNum++;
                        }
                        else if (_dataCacheService.SearchViewModel.pagedResultDto.Data[i].article != null)
                        {
                            <CnGalWebSite.Shared.Component.Search.NewVersion.ArticleInforViewTip Model="_dataCacheService.SearchViewModel.pagedResultDto.Data[i].article"></CnGalWebSite.Shared.Component.Search.NewVersion.ArticleInforViewTip>
                        }
                        else if (_dataCacheService.SearchViewModel.pagedResultDto.Data[i].periphery != null)
                        {
                            <CnGalWebSite.Shared.Component.Search.NewVersion.PeripheryInforViewTip Model="_dataCacheService.SearchViewModel.pagedResultDto.Data[i].periphery"></CnGalWebSite.Shared.Component.Search.NewVersion.PeripheryInforViewTip>
                        }
                        else if (_dataCacheService.SearchViewModel.pagedResultDto.Data[i].tag != null)
                        {
                            <CnGalWebSite.Shared.Component.Search.NewVersion.TagInforViewTip Model="_dataCacheService.SearchViewModel.pagedResultDto.Data[i].tag"></CnGalWebSite.Shared.Component.Search.NewVersion.TagInforViewTip>
                        }

                    </div>
                }
            }


            @if (_dataCacheService.SearchViewModel.pagedResultDto.Data.Count == 0)
            {
                <NotFoundSearch IsNeedLayput="true"></NotFoundSearch>
            }
            else
            {


                @if (_dataCacheService.SearchViewModel.pagedResultDto.TotalPages > 1)
                {
                    @if (_dataCacheService.IsApp)
                    {
                        <MPagination Value="@_dataCacheService.SearchViewModel.pagedResultDto.CurrentPage" Class="my-4" Length="@_dataCacheService.SearchViewModel.pagedResultDto.TotalPages" ValueChanged="@((e)=>OnPageClick(e,_dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount))" Color="@_dataCacheService.ThemeSetting.Theme" TotalVisible="5"></MPagination>
                    }
                    else
                    {
                        <div class=" rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
                            <Pagination PageItems="@_dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount" PageItemsSource="@PageItems" TotalCount="@_dataCacheService.SearchViewModel.pagedResultDto.TotalCount" OnPageClick="@OnPageClick" OnPageItemsChanged="@OnPageItemsChanged" PageIndex="@_dataCacheService.SearchViewModel.pagedResultDto.CurrentPage"></Pagination>
                        </div>
                    }
                }

            }

        }
    </div>
</div>


@code {
    [Parameter]
    public string ScreeningConditions { get; set; } = "全部";
    public int currentPage { get; set; } = 1;
    [Parameter]
    public string SearchString { get; set; } = "";
    [Parameter]
    public string FilterText { get; set; } = "";
    bool isReady = false;
    int tempNum = 0;

    private IEnumerable<int> PageItems => new int[] { 4, 8, 16, 30 };

    private IEnumerable<string> Items { get; set; } = new string[1] { "" };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private int defaultIndex { get; set; } = 0;

    [Parameter]
    public string DefaultIndex
    {
        get
        {
            return defaultIndex.ToString();
        }
        set
        {
            try
            {
                defaultIndex = int.Parse(value);
            }
            catch
            {
                defaultIndex = 0;
            }
        }

    }
    public int TabIndexNum = 0;
    public int randomIndex = new Random().Next();

    private SearchScreenType searchScreenType { get; set; }

    private CnGalWebSite.Shared.Component.Search.NewVersion.PivotLine pivotLine;
    private CnGalWebSite.Shared.Component.Search.NewVersion.SortTab sortTab;
    private CnGalWebSite.Shared.Component.Search.NewVersion.ScreenTab screenTab;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            tempNum = 0;
            try
            {
                Items = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/home/GetSearchTipList");
                if (_dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions == "全部")
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = ScreeningConditions;

                }
                if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting == "Default")
                {
                    if (string.IsNullOrWhiteSpace(SearchString) == false && SearchString.Contains("PubulishTime"))
                    {
                        if (_dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions == "游戏")
                        {
                            _dataCacheService.SearchViewModel.pagedResultDto.Sorting = SearchString;
                        }
                    }
                    else
                    {
                        _dataCacheService.SearchViewModel.pagedResultDto.Sorting = SearchString;
                    }

                }
                if (string.IsNullOrWhiteSpace(_dataCacheService.SearchViewModel.pagedResultDto.FilterText))
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.FilterText = FilterText;
                }


                StateHasChanged();

                if (ScreeningConditions == "游戏")
                {
                    await sortTab.RefreshTab(SearchScreenType.Entry, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
                }
                else
                {
                    await sortTab.RefreshTab(SearchScreenType.All, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
                }
                await screenTab.RefreshTab(SearchScreenType.All);

                await OnSearch();

            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "无法获取搜索结果");
            }

            isReady = true;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {


    }

    private async Task OnTabClick(int index)
    {

        if (index == 0)
        {
            await sortTab.RefreshTab(SearchScreenType.All, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
            await screenTab.RefreshTab(SearchScreenType.All);
            searchScreenType = SearchScreenType.All;
            _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = "全部";
        }
        else if (index == 1)
        {
            await sortTab.RefreshTab(SearchScreenType.Entry, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
            await screenTab.RefreshTab(SearchScreenType.Entry);
            searchScreenType = SearchScreenType.Entry;
            _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = "词条";

        }
        else if (index == 2)
        {
            await sortTab.RefreshTab(SearchScreenType.Article, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
            await screenTab.RefreshTab(SearchScreenType.Article);
            searchScreenType = SearchScreenType.Article;
            _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = "文章";

        }
        else if (index == 3)
        {
            await sortTab.RefreshTab(SearchScreenType.Periphery, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
            await screenTab.RefreshTab(SearchScreenType.Periphery);
            searchScreenType = SearchScreenType.Periphery;
            _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = "周边";
        }

        await OnSearch();
    }


    private async Task OnSort(int index)
    {
        switch (index)
        {
            case 0:
                _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "Default";
                break;
            case 1:
                if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting == "LastEditTime desc")
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "LastEditTime";
                }
                else
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "LastEditTime desc";
                }
                break;
            case 2:
                if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting == "Id desc")
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "Id";
                }
                else
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "Id desc";
                }
                break;
            case 3:
                if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting == "ReaderCount desc")
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "ReaderCount";
                }
                else
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "ReaderCount desc";
                }
                break;
            case 4:
                if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting == "PubulishTime desc")
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "PubulishTime";
                }
                else
                {
                    _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "PubulishTime desc";
                }

                break;
        }
        await OnSearch();
    }

    private async Task OnScreen(int index)
    {
        _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions = index switch
        {
            0 => "游戏",
            1 => "角色",
            2 => "STAFF",
            3 => "制作组",
            4 => "感想",
            5 => "访谈",
            6 => "攻略",
            7 => "动态",
            8 => "评测",
            9 => "文章周边",
            10 => "公告",
            11 => "杂谈",
            12 => "二创",
            13 => "设定集或画册等",
            14 => "原声集",
            15 => "套装",
            16 => "其他",
            666 => searchScreenType switch
            {
                SearchScreenType.All => "全部",
                SearchScreenType.Entry => "词条",
                SearchScreenType.Article => "文章",
                SearchScreenType.Periphery => "周边",
            }
        };

        //如果不是词条类型 切换排序
        if (index != 0)
        {
            if (_dataCacheService.SearchViewModel.pagedResultDto.Sorting?.Contains("PubulishTime")??false)
            {
                _dataCacheService.SearchViewModel.pagedResultDto.Sorting = "Default";
                StateHasChanged();
                await sortTab.RefreshTab(searchScreenType, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions, "Default");
            }
            else
            {
                StateHasChanged();
                await sortTab.RefreshTab(searchScreenType, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
            }
        }
        else
        {
            StateHasChanged();
            await sortTab.RefreshTab(SearchScreenType.Entry, _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions);
        }

        await OnSearch();
    }

    private async Task OnSearch(bool noRefresh = false)
    {
        if (isReady == false && _dataCacheService.SearchViewModel.pagedResultDto.Data.Count != 0)
        {
            return;
        }
        try
        {
            if(noRefresh==false)
            {
                isReady = false;
                StateHasChanged();
            }

            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = _dataCacheService.SearchViewModel.pagedResultDto.CurrentPage, MaxResultCount = _dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount, Sorting = _dataCacheService.SearchViewModel.pagedResultDto.Sorting ?? "Default", FilterText = _dataCacheService.SearchViewModel.pagedResultDto.FilterText, ScreeningConditions = _dataCacheService.SearchViewModel.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            _dataCacheService.SearchViewModel = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (_dataCacheService.SearchViewModel.pagedResultDto.Data == null)
            {
                _dataCacheService.SearchViewModel.pagedResultDto.Data = new List<SearchAloneModel>();
            }

            if (noRefresh == false)
            {
                isReady = true;
            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取搜索结果");
        }
    }

    private async Task OnPageClick(int pageIndex, int pageItems)
    {
        if (isReady == false ||( _dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount == pageItems && _dataCacheService.SearchViewModel.pagedResultDto.CurrentPage == pageIndex))
        {
            return;
        }
        _dataCacheService.SearchViewModel.pagedResultDto.CurrentPage = pageIndex;
        _dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount = pageItems;
        await OnSearch(true);
    }
    private async Task OnPageItemsChanged(int pageItems)
    {
        if (isReady == false || _dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount == pageItems)
        {
            return;
        }

        _dataCacheService.SearchViewModel.pagedResultDto.CurrentPage = 1;
        _dataCacheService.SearchViewModel.pagedResultDto.MaxResultCount = pageItems;
        await OnSearch();
    }



    private async Task OnSearchString()
    {
        await OnSearchString(_dataCacheService.SearchViewModel.pagedResultDto.FilterText);
    }


    private async Task OnSearchString(string text)
    {
        _dataCacheService.SearchViewModel.pagedResultDto.FilterText = text;

        _dataCacheService.SearchViewModel.pagedResultDto.CurrentPage = 1;
        await OnSearch();
    }


}
