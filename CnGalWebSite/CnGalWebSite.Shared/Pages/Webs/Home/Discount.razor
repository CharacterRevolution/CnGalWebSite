@inject HttpClient Http
@inject ToastService? ToastService
@inject IJSRuntime JS
@inject IDataCacheService _dataCacheService
@implements IAsyncDisposable
@inject IDataCacheService _dataCacheService

<TitleTip Title="打折中的游戏" Description="Steam游戏折扣专题页，可以按价格，发行时间，好评率等排序"></TitleTip>

<style>
    .row {
        flex: 0;
    }
</style>
<div>
    @if (isReady == false)
    {
        <div class="  rounded shadow-sm  bg-opacity pt-3">

            <div class="row mt-2 ms-2 me-2" style="padding-right: 0;padding-left: 0;">
                <div class="col-12 col-md-12 col-lg-5 mt-1 mb-4">
                    <SkeletonAvatar Round="false" />
                </div>

                <div class="col-12 col-md-12 col-lg-6 mt-1 mb-2">
                    <SkeletonParagraph />
                </div>
            </div>
        </div>
        <div class="mt-3">
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                <SkeletonParagraph />

            </div>
        </div>


        <div class=" mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
            </div>
        </div>
        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }
    else
    {
        <div>
            <CnGalWebSite.Shared.Component.Steam.ScreenGamesTip ScreenType="_dataCacheService.DiscountPageCatcheHelper.ScreenType"
                                                                OrderType="_dataCacheService.DiscountPageCatcheHelper.OrderType"
                                                                ThenOrderType="_dataCacheService.DiscountPageCatcheHelper.ThenOrderType"
                                                                ScreenTypeChanged="ScreenTypeChanged" OrderTypeChanged="OrderTypeChanged" ThenOrderTypeChanged="ThenOrderTypeChanged" />
        </div>
        <div class="row">
            @foreach (var item in _dataCacheService.DiscountPageCatcheHelper.Items)
            {
                <div class="@("mb-3 "+(IsSmallScreen?"col-12 col-md-6":"col-12"))">
                    <CnGalWebSite.Shared.Component.Steam.SteamInforViewTip Model="item" IsSmallScreen="IsSmallScreen" />
                </div>
            }


        </div>
        @if (_dataCacheService.DiscountPageCatcheHelper.Items.Count == 0)
        {
            <NotFoundTip IsNeedLayput="true" />
        }
    }
</div>

@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    bool isReady = false;

    #region 获取屏幕大小
    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; } = true;

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime JSRuntime { get; set; }

    private JSInterop<Discount> Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<Discount>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));
        }
    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 1100))
        {
            IsSmallScreen = width < 1100;

            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 1100 && width < 1630))
        {
            IsNormalScreen = width >= 1100 && width < 1630;

            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1630))
        {
            IsLargeScreen = width >= 1630;
            StateHasChanged();
        }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {

        try
        {
            if(_dataCacheService.DiscountPageCatcheHelper.IsInit==false)
            {
                _dataCacheService.DiscountPageCatcheHelper.Init(await Http.GetFromJsonAsync<List<SteamInforTipViewModel>>(ToolHelper.WebApiPath + "api/steam/GetAllDiscountSteamGame"));
            }

            isReady = true;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取Steam折扣游戏列表失败");
        }


    }

    public Task ScreenTypeChanged(ScreenSteamType type)
    {
        _dataCacheService.DiscountPageCatcheHelper.ScreenType = type;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task OrderTypeChanged(SteamSortType type)
    {
        _dataCacheService.DiscountPageCatcheHelper.OrderType = type;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ThenOrderTypeChanged(SteamSortType type)
    {
        _dataCacheService.DiscountPageCatcheHelper.ThenOrderType = type;
        StateHasChanged();
        return Task.CompletedTask;
    }



    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}
