@inject HttpClient Http
@inject ExamineService _examineService
@inject SwalService SwalService
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<TitleTip></TitleTip>

<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="@Model.UserName" />

<div style=" margin-top: 45px; width: 100%;margin-bottom:65px;">
    @if (isReady == false)
    {
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip />

    }
    else
    {
        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑主要信息" />

            <div class="row">
                <div class=" col-12 col-md-6  col-lg-3 mt-2">
                    <ImageCropperButton ImagePath="@Model.PhotoPath" OnUploadedImage="OnCardUpload1" Type="ImageAspectType._1_1" Text="上传头像"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6  col-lg-3 mt-2">
                    <ImageCropperButton ImagePath="@Model.BackgroundPath" OnUploadedImage="OnCardUpload2" Type="ImageAspectType._4_1A2" Text="上传空间主图"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6  col-lg-3 mt-2">
                    <ImageCropperButton ImagePath="@Model.MBgImagePath" OnUploadedImage="OnCardUpload3" Type="ImageAspectType.None" Text="上传大背景"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6  col-lg-3 mt-2">
                    <ImageCropperButton ImagePath="@Model.SBgImagePath" OnUploadedImage="OnCardUpload4" Type="ImageAspectType.None" Text="上传小背景"></ImageCropperButton>
                </div>
            </div>
            <hr />

            <ValidateForm Model="@Model" ValidateAllProperties="true" class="form-group mt-3">

                <div class="row">

                    <div class="form-group col-12  col-sm-6">
                        <BootstrapInput @bind-Value="Model.UserName" />
                    </div>
                    <div class="form-group col-12  col-sm-6">
                        <DateTimePicker @bind-Value="@Model.Birthday" />
                    </div>
                    <div class="form-group col-12 col-sm-6">
                        <Switch @bind-Value="Model.CanComment" />
                    </div>

                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.PersonalSignature" />
                    </div>
                    <div class="form-group col-12">
                        <CheckboxList @bind-Value="@RanksName" ShowBorder="true" Items="@UserRanks" DisplayText="展示的头衔" ShowLabel="true"></CheckboxList>
                    </div>
                </div>
            </ValidateForm>
        </div>
    }

</div>
<CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.EditFooter OnSubmit="OnSubmit" />


@code {


    [Parameter]
    public string Id { get; set; }
    public EditUserDataViewModel Model { get; set; } = new EditUserDataViewModel();
    private bool isReady = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<SelectedItem> UserRanks { get; set; } = new List<SelectedItem>();
    private List<string> RanksName { get; set; } = new List<string>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata/");
            //处理头衔
            foreach (var item in Model.Ranks)
            {

                UserRanks.Add(new SelectedItem
                {
                    Text = item.Name,
                    Active = item.IsShow,
                    Value = item.Name
                });
                if (item.IsShow)
                {
                    RanksName.Add(item.Name);
                }
            }
            isReady = true;
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑用户资料失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理时间
            if (Model.Birthday != null)
            {
                Model.Birthday = Model.Birthday.Value.AddHours(Model.Birthday.Value.Hour < 12 ? (12 - Model.Birthday.Value.Hour) : 0);
            }
            //处理头衔
            if (RanksName.Count == 0)
            {
                await ToastService.Error("保存用户信息失败", "至少展示一个头衔");
                return;
            }
            Model.Ranks = new List<UserEditRankIsShow>();
            foreach (var item in UserRanks)
            {
                Model.Ranks.Add(new UserEditRankIsShow
                {
                    Name = item.Text,
                    IsShow = RanksName.Any(s => s == item.Text)
                });
            }
            var result = await Http.PostAsJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存用户信息失败", obj.Error);
            }
            else
            {
                var userState = await authenticationStateTask;
                var user = userState.User;
                SwalOption op = null;
                if (user.Identity.Name == Model.UserName)
                {
                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改个人资料成功",
                        Content = "我们需要对你的修改进行审核，在通过审核之前你的修改对其他用户不可见",
                        ShowClose = false
                    };
                }
                else
                {

                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改用户名成功",
                        Content = "我们需要对你的修改进行审核，通过后重新登入即可生效",
                        ShowClose = false
                    };
                }
                op.ButtonTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<Button>(0);
                    builder.AddAttribute(1, nameof(Button.Text), "我知道了");
                    builder.AddAttribute(2, nameof(Button.Icon), "fa fa-check");
                    builder.AddAttribute(3, nameof(Button.Color), Color.Success);
                    builder.AddAttribute(4, nameof(Button.IsOutline), true);
                    builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                    {
                        await op.Close();
                        NavigationManager.NavigateTo("/space/index/" + Model.Id);
                    }));
                    builder.CloseComponent();
                });
                await SwalService.Show(op);
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存用户信息失败");
        }
    }
    private Task OnCardUpload1(string url)
    {

        Model.PhotoPath = url;
        Model.PhotoName = url;
        return Task.CompletedTask;

    }
    private Task OnCardUpload2(string url)
    {
        Model.BackgroundPath = url;
        Model.BackgroundName = url;
        return Task.CompletedTask;
    }

    private Task OnCardUpload3(string url)
    {
        Model.MBgImagePath = url;
        Model.MBgImageName = url;
        return Task.CompletedTask;
    }
    private Task OnCardUpload4(string url)
    {
        Model.SBgImageName = url;
        Model.SBgImagePath = url;
        return Task.CompletedTask;

    }
    private async Task<bool> OnCardDelete1(string file)
    {
        Model.PhotoName = "";
        return true;
    }
    private async Task<bool> OnCardDelete2(string file)
    {
        Model.BackgroundName = "";
        return true;
    }
    private async Task<bool> OnCardDelete3(string file)
    {
        Model.MBgImageName = "";
        return true;
    }
    private async Task<bool> OnCardDelete4(string file)
    {
        Model.SBgImageName = "";
        return true;
    }
}
