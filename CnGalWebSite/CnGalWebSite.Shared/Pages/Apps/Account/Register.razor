@page "/account/apps/register/{*ReturnUrl}"
@page "/account/apps/register/"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IAppHelper _appHelper
@inject ToastService? ToastService
@inject IJSRuntime JS
@inject HttpClient Http
@inject IDataCacheService _dataCacheService


<TitleTip></TitleTip>
<CnGalWebSite.Shared.AppComponent.Normal.Redirections.MakeAccountLayoutRight />


<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="注册新用户" />

<div class="p-3" style="margin-top:45px">
    <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadCard />
    <div class="form-group col-12 mt-4  ps-4 pe-4 mb-0">

        <div class="row">
            <div class="form-group col-12  col-sm-12">
                <BootstrapInput @bind-Value="Model.Email" type="email" ShowLabel="true"/>
            </div>
            <div class="form-group col-12  col-sm-12">
                <BootstrapInput @bind-Value="Model.Name" ShowLabel="true"/>
            </div>
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="Model.Password" type="password" ShowLabel="true"/>
            </div>
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="Model.ConfirmPassword" type="password" ShowLabel="true"/>
            </div>
            <div class="form-group col-12">
                <a href="/articles/index/225">CnGal资料站隐私协议</a>
            </div>

            <div class="form-group col-6">
                <Button Color="Color.Dark"  IsOutline="true" style="width:100%" @onclick="@(()=>OnLogin())">登录</Button>
            </div>
            <div class="form-group col-6">
                <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="HandleRegistration">注册</Button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private int widgetId = -1;

    private DotNetObjectReference<Register> objRef;

    private RegisterModel Model = new RegisterModel();

    bool isSuccess = true;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task HandleRegistration()
    {
        try
        {
            var geetestCodeModel = await Http.GetFromJsonAsync<GeetestCodeModel>(ToolHelper.WebApiPath + "api/account/GetGeetestCode");

            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initGeetestBindCAPTCHA", objRef, geetestCodeModel.Gt, geetestCodeModel.Challenge, geetestCodeModel.Success);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "初始化极验人机验证失败");
            return;
        }
        isSuccess = true;
        int count = 0;
        while (isSuccess)
        {
            /*if (count > 5)
            {
                isSuccess = false;
            }*/
            await Task.Delay(500);
            count++;
        }
    }

    private async Task<bool> InitGeetest()
    {
        //初始化人机验证
        try
        {
            //获取词条信息
            var geetestCodeModel = await Http.GetFromJsonAsync<GeetestCodeModel>(ToolHelper.WebApiPath + "api/account/GetGeetestCode");

            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initGeetestBindCAPTCHA", objRef, geetestCodeModel.Gt, geetestCodeModel.Challenge, geetestCodeModel.Success);

            return true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "初始化极验人机验证失败");

            return false;
        }
    }


    [JSInvokable]
    public async Task OnChecked(string challenge, string validate, string seccode)
    {
        try
        {
            Model.Challenge = challenge;
            Model.Validate = validate;
            Model.Seccode = seccode;


            var result = await AuthService.Register(Model);

            if (result.Successful)
            {
                _dataCacheService.UserName = Model.Name;
                NavigationManager.NavigateTo("/account/apps/ConfirmEmailRegister/" + ReturnUrl);
            }
            else
            {
                await ToastService.Error("注册失败", String.IsNullOrWhiteSpace(result.Error) ? "参数错误" : result.Error);
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "注册失败");
            isSuccess = false;
        }
    }

    [JSInvokable]
    public Task OnCancel()
    {
        isSuccess = false;
        return Task.CompletedTask;
    }


    private async void OnLogin()
    {
        try
        {
            NavigationManager.NavigateTo("/account/apps/login/" + ReturnUrl);
        }
        catch
        {
            await ToastService.Error("尝试导航失败", "请尝试刷新页面");
        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}
