@page "/account/apps/changephonenumber/{*ReturnUrl}"
@attribute [Authorize]

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<TitleTip></TitleTip>
<CnGalWebSite.Shared.AppComponent.Normal.Redirections.MakeAccountLayoutRight />


@if (isReady == false)
{
    <CnGalWebSite.Shared.AppComponent.Pages.Account.SecondAuthenticationCheck ReturnUrl="@ReturnUrl" OnPassed="OnPassed"></CnGalWebSite.Shared.AppComponent.Pages.Account.SecondAuthenticationCheck>
}
else
{

    if (state == "输入新手机号码")
    {
        <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="请输入新手机号码" />

        <div class="p-3" style="margin-top:45px">

            <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadCard />
            <div  class="form-group mt-4 ps-4 pe-4  mb-0">

                <div class="row">
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="ModelBefore.NewPhone" ShowLabel="true"/>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Dark"  IsAsync="true" style="width:100%" OnClick="ConfirmEmailBefore">确定</Button>
                    </div>

                </div>
            </div>
        </div>
    }
    else if (state == "验证新手机号码")
    {
        <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="验证手机号码" />

        <div class="p-3" style="margin-top:45px">

            <h3 class="mb-3 text-center">验证手机号码</h3>
            <CnGalWebSite.Shared.AppComponent.Pages.Account.HeadCard Text="@("我们已经向 "+ModelBefore.NewPhone+" 发送了一封验证短信，请在下方填写其中的验证码。")" />
            <div  class="form-group mt-4 ps-4 pe-4   mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="ModelAfter.NumToken" ShowLabel="true"/>
                    </div>

                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <CnGalWebSite.Shared.AppComponent.Pages.Account.PostVerificationCode Email="@ModelBefore.NewPhone" SmsType="DataModel.Models.SMSType.ChangeMobilePhoneNumber"></CnGalWebSite.Shared.AppComponent.Pages.Account.PostVerificationCode>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmEmailAfter">验证</Button>
                    </div>

                </div>
            </div>
        </div>

    }
}



@code {
    [Parameter]
    public string ReturnUrl { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private ChangePhoneNumberBeforeModel ModelBefore = new ChangePhoneNumberBeforeModel();
    private ChangePhoneNumberAfterModel ModelAfter = new ChangePhoneNumberAfterModel();
    public string Email { get; set; }
    string state = "输入新手机号码";
    bool isReady = false;


    private Task OnPassed()
    {
        isReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ConfirmEmailBefore()
    {
        if (string.IsNullOrWhiteSpace(ModelBefore.NewPhone))
        {
            await ToastService.Error("请输入手机号码", "请输入手机号码");
            return;
        }
        try
        {

            ModelBefore.LoginKey = _dataCacheService.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberBeforeModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberBefore", ModelBefore);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("向新手机发送验证码失败", obj.Error);
            }
            else
            {
                state = "验证新手机号码";
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "向新手机发送验证码失败","手机号码无效");
        }
    }
    private async Task ConfirmEmailAfter()
    {
        try
        {
            ModelAfter.NewPhone = ModelBefore.NewPhone;
            ModelAfter.LoginKey = ModelBefore.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberAfterModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberAfter", ModelAfter);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证新手机号码失败", obj.Error);
            }
            else
            {
                await ToastService.Success("修改手机号码成功", "修改手机号码成功");
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "验证新手机号码失败", "手机号码无效");
        }
    }
}
