@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}


<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="@Model.Name" />


<div style=" margin-top: 45px; width: 100%;margin-bottom:65px;">

    @if (isReady == false)
    {
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip />
    }
    else
    {
        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑标签" />
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.InputListTag AutoCompleteItems="@TagItems" Model="Model.Tags"/>

            </div>
        </div>

        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Pages.Tags.Normal.SearchTags/>
        </div>
    }
</div>
<CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.EditFooter OnSubmit="OnSubmit" />

@code {
    [Parameter]
    public string Id { get; set; }
    public EditEntryTagViewModel Model { get; set; } = new EditEntryTagViewModel();
    private bool isReady = false;
    string SearchString { get; set; } = "";
    private IEnumerable<string> TagItems { get; set; } = new string[1] { "" };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {

        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditEntryTagViewModel>(ToolHelper.WebApiPath + "api/entries/edittags/" + Id);
            //获取所有标签
            TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags");

            //获取该分类下的所有二级三级标签
            string tagString = "";
            switch (Model.Type)
            {
                case EntryType.Game:
                    tagString = "游戏";
                    break;
                case EntryType.Role:
                    tagString = "角色";
                    break;
                case EntryType.Staff:
                    tagString = "STAFF";
                    break;
                case EntryType.ProductionGroup:
                    tagString = "制作组";
                    break;
            }
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑词条标签失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理标签 删除空标签
            for (int i = 0; i < Model.Tags.Count; i++)
            {
                if (string.IsNullOrWhiteSpace(Model.Tags[i].DisplayName) == true)
                {
                    Model.Tags.RemoveAt(i);
                }
            }
            var result = await Http.PostAsJsonAsync<EditEntryTagViewModel>(ToolHelper.WebApiPath + "api/entries/edittags", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存词条标签失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存成功", "保存词条标签成功，等待审核通过");
                NavigationManager.NavigateTo("/entries/index/" + Model.Id);
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存词条标签失败");
        }
    }


}
