@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}
<AutoSaveTip TItem="EditRelevancesViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />

<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="@Model.Name" />

<div style=" margin-top: 45px; width: 100%;margin-bottom:65px;">

    @if (isReady == false)
    {
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip />
    }
    else
    {
        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑关联信息" />
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryRoleItems" Model="Model.Roles" Title="角色" />

            </div>


            @if (Model.Type != EntryType.Game)
            {
                <div class="mt-3">
                    <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryStaffItems" Model="Model.staffs" Title="STAFF"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

                </div>
            }
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@ArticleItems" Model="Model.news" Title="动态"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

            </div>
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@ArticleItems" Model="Model.articles" Title="文章"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

            </div>
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryGameItems" Model="Model.Games" Title="游戏"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

            </div>
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryGroupItems" Model="Model.Groups" Title="制作组"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

            </div>
            <div class="mt-3">
                <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListOtherLink Model="Model.others" Title="自定义链接"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListOtherLink>

            </div>
        </div>
    }
</div>

<CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.EditFooter OnSubmit="OnSubmit" />

@code {
    [Parameter]
    public string Id { get; set; }
    public EditRelevancesViewModel Model { get; set; } = new EditRelevancesViewModel()
    {
        Roles = new List<RelevancesModel>(),
        articles = new List<RelevancesModel>(),
        Groups = new List<RelevancesModel>(),
        Games = new List<RelevancesModel>(),
        others = new List<RelevancesModel>(),
        staffs = new List<RelevancesModel>(),
        news = new List<RelevancesModel>()
    };
    private IEnumerable<string> EntryGameItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryRoleItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryGroupItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryStaffItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> ArticleItems { get; set; } = new string[1] { "" };

    bool isReady = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EditRelevancesViewModel> autoSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditRelevancesViewModel>(ToolHelper.WebApiPath + "api/entries/editrelevances/" + Id);
            //获取所有词条
            EntryGameItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/0");
            EntryRoleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/1");
            EntryGroupItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/2");
            EntryStaffItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/3");
            //获取所有文章
            ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles");
            isReady = true;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑词条关联信息失败");
        }
    }

    private async Task OnSubmit(string text)
    {
        //上传
        try
        {

            Model.Note = text;

            var result = await Http.PostAsJsonAsync<EditRelevancesViewModel>(ToolHelper.WebApiPath + "api/entries/editrelevances", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存词条关联信息失败", obj.Error);
            }
            else
            {
                autoSave.Clean();

                await ToastService.Success("保存成功", "保存词条关联信息成功，等待审核通过");
                NavigationManager.NavigateTo("/entries/index/" + Model.Id);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存词条关联信息失败");
        }
    }


    private Task DataLoaded(EditRelevancesViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

}
