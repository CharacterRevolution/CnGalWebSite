@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<TitleTip Title="发表文章"></TitleTip>
<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="发表文章" />

<link rel="stylesheet" href="https://app.cngal.org/_content/BootstrapBlazor.Markdown/css/bootstrap.blazor.markdown.min.css" media="none" onload="this.media='all'" />

<div style=" margin-top: 45px; width: 100%;margin-bottom:65px;">
    <ValidateForm Model="@Model" ValidateAllProperties="true" @ref="ComplexForm">
        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑主要信息" />

            <div class="row">
                <div class=" col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                    <ImageCropperButton ImagePath="@MainImagePath" OnUploadedImage="OnCardUploadMain" Type="ImageAspectType._16_9" Text="上传主图"></ImageCropperButton>
                </div>
                <div class="col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                    <ImageCropperButton ImagePath="@BackImagePath" OnUploadedImage="OnCardUploadBack" Type="ImageAspectType.None" Text="上传大背景图"></ImageCropperButton>
                </div>
                <div class="col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                    <ImageCropperButton ImagePath="@SmallBackImagePath" OnUploadedImage="OnCardUploadSmall" Type="ImageAspectType.None" Text="上传小背景图"></ImageCropperButton>
                </div>
            </div>

            <div class="form-group mt-4">
                <div class="row">
                    <div class="form-group col-12  col-sm-6">
                        <Select @bind-Value="Model.Type"></Select>
                    </div>
                    <div class="form-group col-12  col-sm-6">
                        <BootstrapInput @bind-Value="Model.Name" />
                    </div>

                    <div class="form-group col-12  col-sm-6">
                        <div class="mb-3">
                            <AlertTip Type="AlertTip.AlertTipType.CreateDisambig"></AlertTip>
                        </div>
                        <BootstrapInput @bind-Value="Model.DisplayName" />
                    </div>
                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.BriefIntroduction" />
                    </div>
                    <div class="form-group col-12">
                        <hr />
                    </div>
                    <div class="form-group col-12  col-sm-6">
                        <BootstrapInput @bind-Value="Model.OriginalAuthor" />
                    </div>

                    <div class="form-group col-12  col-sm-6">
                        <DateTimePicker @bind-Value="@Model.PubishTime" ViewModel="DatePickerViewModel.DateTime" />
                    </div>
                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.OriginalLink" />
                    </div>
                    @if (Model.Type == ArticleType.News)
                    {
                        <div class="form-group col-12">
                            <hr />
                        </div>
                        <div class="col-12">
                            <div class="alert alert-warning  rounded shadow  rounded" role="alert">
                                请选择该动态发生时的真实时间，我们会据此生成时间轴
                            </div>
                        </div>

                        <div class="form-group col-12 col-sm-6">
                            <Switch @bind-Value="IsOnlyNeedPublishTime" ShowLabel="true" DisplayText="动态发生时间与发布日期一致" />
                        </div>
                        @if (IsOnlyNeedPublishTime)
                        {
                            <div class="form-group col-12  col-sm-6">
                                <DateTimePicker @bind-Value="@Model.PubishTime" ViewModel="DatePickerViewModel.DateTime" IsDisabled="true" DisplayText="动态发生时间"/>
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-12  col-sm-6">
                                <DateTimePicker @bind-Value="@Model.RealNewsTime" ViewModel="DatePickerViewModel.DateTime" />
                            </div>
                        }
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.NewsType"></BootstrapInput>
                        </div>
                    }
                </div>
            </div>


        </div>
    </ValidateForm>
    <div class="ps-3 pe-3 pt-2 mb-3">
        <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑正文" />

        <div class="mt-3">
            @if (isReady == true)
            {
                <MarkdownEditorTip @ref="markdownEditorTip"></MarkdownEditorTip>
            }

        </div>


    </div>
    <div class="ps-3 pe-3 pt-2 mb-3">
        <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑关联信息" />
        <div class="mt-4">
            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryRoleItems" Model="Model.Roles" Title="出场角色"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

        </div>
        <div class="mt-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryStaffItems" Model="Model.staffs" Title="STAFF"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

        </div>
        <div class="mt-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@ArticleItems" Model="Model.articles" Title="文章"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

        </div>
        <div class="mt-3">

            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryGameItems" Model="Model.Games" Title="游戏"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>
        </div>
        <div class="mt-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString AutoCompleteItems="@EntryGroupItems" Model="Model.Groups" Title="制作组"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListString>

        </div>
        <div class="mt-3">

            <CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListOtherLink Model="Model.others" Title="自定义链接"></CnGalWebSite.Shared.AppComponent.Normal.Lists.InputListOtherLink>
        </div>
    </div>
</div>

<CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.EditFooter OnSubmit="OnSubmit" />

@code {
    private CreateArticleViewModel Model { get; set; } = new CreateArticleViewModel
    {
        Roles = new List<RelevancesModel>(),
        articles = new List<RelevancesModel>(),
        Groups = new List<RelevancesModel>(),
        Games = new List<RelevancesModel>(),
        others = new List<RelevancesModel>(),
        staffs = new List<RelevancesModel>()
    };
    private string MainImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    private string BackImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    private string SmallBackImagePath { get; set; } = "_content/CnGalWebSite.Shared/images/default/app.png";
    [NotNull]
    private ValidateForm? ComplexForm { get; set; }
    private bool IsOnlyNeedPublishTime { get; set; } = true;

    private bool isReady = false;
    private IEnumerable<string> EntryGameItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryRoleItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryGroupItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> EntryStaffItems { get; set; } = new string[1] { "" };
    private IEnumerable<string> ArticleItems { get; set; } = new string[1] { "" };

    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取所有词条
            EntryGameItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/0");
            EntryRoleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/1");
            EntryGroupItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/2");
            EntryStaffItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/3");
            //获取所有文章
            ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles");

            isReady = true;
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }

    private async Task OnSubmit(string text)
    {
        try
        {
            Model.Context = await markdownEditorTip.GetContext();
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name) || string.IsNullOrWhiteSpace(Model.BriefIntroduction) || string.IsNullOrWhiteSpace(Model.DisplayName))
            {
                await ToastService.Error("创建文章失败", "请填写所有必填项目");
                return;
            }
            if (string.IsNullOrWhiteSpace(Model.Context) && Model.Type != ArticleType.News)
            {
                await ToastService.Error("创建文章失败", "必须输入文章正文");
                return;
            }
            //检查文本长度
            if (Model.Context != null && Model.Context.Length > 100000)
            {
                await ToastService.Error("文本长度超过上限", "强烈建议使用链接显示图片，内嵌图片会导致性能严重下降。请控制文本量，额外的文字可以移动到关联文章中");
                return;
            }
            //调整时间
            Model.PubishTime = Model.PubishTime.AddHours(Model.PubishTime.Hour < 12 ? (12 - Model.PubishTime.Hour) : 0);
            if (Model.RealNewsTime != null)
            {
                Model.RealNewsTime = Model.RealNewsTime.Value.AddHours(Model.RealNewsTime.Value.Hour < 12 ? (12 - Model.RealNewsTime.Value.Hour) : 0);
            }

            Model.Note = text;

            var result = await Http.PostAsJsonAsync<CreateArticleViewModel>(ToolHelper.WebApiPath + "api/articles/createarticle", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                if (obj.Error == "该文章的名称与其他文章重复")
                {
                    ComplexForm.SetError<CreateArticleViewModel>(f => f.Name, "已经存在该名称的文章");
                }
                await ToastService.Error("创建文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("创建文章成功", "创建文章成功，等待审核通过");
                NavigationManager.NavigateTo("/articles/index/" + obj.Error);
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "创建文章失败");
        }
    }

    private Task OnCardUploadMain(string url)
    {

        MainImagePath = url;
        Model.MainPicture = url;
        return Task.CompletedTask;
    }

    private Task OnCardUploadBack(string url)
    {
        BackImagePath = url;
        Model.BackgroundPicture = url;
        return Task.CompletedTask;
    }
    private Task OnCardUploadSmall(string url)
    {
        SmallBackImagePath = url;
        Model.SmallBackgroundPicture = url;
        return Task.CompletedTask;
    }

}
