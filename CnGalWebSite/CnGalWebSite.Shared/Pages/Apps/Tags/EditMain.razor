@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}
else
{
    <TitleTip></TitleTip>

}
<AutoSaveTip TItem="EditTagMainViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />


<CnGalWebSite.Shared.AppComponent.Pages.Account.HeadBar Title="@Model.Name" />


<div style=" margin-top: 45px; width: 100%;margin-bottom:65px;">
    @if (isReady == false)
    {
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip />
    }
    else
    {
        <div class="ps-3 pe-3 pt-2 mb-3">
            <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="编辑主要信息" />

            <div class="row">
                <div class=" col-12 col-md-6 col-lg-3 col-xl-3 mt-2">
                    <ImageCropperButton @bind-ImagePath="@Model.MainPicture" Type="ImageAspectType._16_9" Text="上传主图"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6 col-lg-3 col-xl-3 mt-2">
                    <ImageCropperButton @bind-ImagePath="@Model.Thumbnail" Type="ImageAspectType._1_1" Text="上传缩略图"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6 col-lg-3 col-xl-3 mt-2">
                    <ImageCropperButton @bind-ImagePath="@Model.BackgroundPicture" Type="ImageAspectType.None" Text="上传大背景图"></ImageCropperButton>
                </div>
                <div class=" col-12 col-md-6 col-lg-3 col-xl-3 mt-2">
                    <ImageCropperButton @bind-ImagePath="@Model.SmallBackgroundPicture" Type="ImageAspectType.None" Text="上传小背景图"></ImageCropperButton>
                </div>
            </div>

            <div class="form-group mt-4">
                <div class="row">
                    <div class="form-group col-12  col-sm-6">
                        <BootstrapInput @bind-Value="Model.Name" ShowLabel="true" />
                    </div>
                    <div class="form-group col-12  col-sm-6">
                        <AutoComplete Items="@TagItems" IsLikeMatch="true" IgnoreCase="true" @bind-Value="Model.ParentTagName" ShowLabel="true" />
                    </div>
                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.BriefIntroduction" ShowLabel="true" />
                    </div>
                </div>
            </div>
        </div>

        @if (Model.Name != "游戏" && Model.Name != "角色" && Model.Name != "制作组" && Model.Name != "STAFF")
        {
            <div class="ps-3 pe-3 pt-2 mb-3">
                <CnGalWebSite.Shared.AppComponent.Pages.Tags.Normal.SearchTags />
            </div>
        }

    }
</div>
<CnGalWebSite.Shared.AppComponent.Pages.Entries.Edits.EditFooter OnSubmit="OnSubmit" />


@code {
    [Parameter]
    public string Id { get; set; }

    private EditTagMainViewModel Model { get; set; } = new EditTagMainViewModel();

    private bool isReady = false;
    private IEnumerable<string> TagItems { get; set; } = new string[1] { "" };

    [NotNull]
    private ValidateForm? ComplexForm { get; set; }


    private ImagesListEditorViewTip ImagesListEditorView;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EditTagMainViewModel> autoSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取所有标签
            TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags");

            Model = await Http.GetFromJsonAsync<EditTagMainViewModel>(ToolHelper.WebApiPath + "api/tags/editmain/" + Id);
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑标签主要信息失败");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                await ToastService.Error("编辑标签失败", "请填写所有必填项目");
                return;
            }
            if (Model.Name != "游戏" && Model.Name != "角色" && Model.Name != "制作组" && Model.Name != "STAFF")
            {
                if (string.IsNullOrWhiteSpace(Model.ParentTagName))
                {
                    await ToastService.Error("编辑标签失败", "除四个顶级标签外，其他标签必须关联父标签");
                    return;
                }
            }
            else
            {
                if (string.IsNullOrWhiteSpace(Model.ParentTagName) == false)
                {
                    await ToastService.Error("编辑标签失败", "四个顶级标签不能关联父标签");
                    return;
                }
            }

            var result = await Http.PostAsJsonAsync<EditTagMainViewModel>(ToolHelper.WebApiPath + "api/tags/EditMain", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {

                await ToastService.Error("编辑标签主要信息失败", obj.Error);
            }
            else
            {
                autoSave.Clean();

                await ToastService.Success("编辑标签主要信息成功", "编辑标签主要信息成功，等待审核通过");
                NavigationManager.NavigateTo(Provider, "/tags/index/" + Model.Id, Model.Name, "fa fa-tag");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "编辑标签主要信息失败");
        }
    }


    private Task DataLoaded(EditTagMainViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }


}
