@page "/admin/listentries"
@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject IRoleService _roleService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable


<TitleTip Title="词条版块"></TitleTip>

<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <div class="  rounded shadow-sm  bg-opacity p-3">
            <h3 class="fw-bold text-center">词条版块</h3>
            <p class="text-center" style="color: gray;margin-top:20px">
                <i class="fa fa-gamepad fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Games + "个游戏")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-users fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Roles + "位角色")</span>
                @if (IsSmallScreen)
                {
                    <br /> }
                else
                {
                    <span>&nbsp; &nbsp; &nbsp;</span>}
                <i class="fa fa-star fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Staffs + "名STAFF")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-object-group fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Groups + "个制作组")</span>
                @if (IsSmallScreen)
                {
                    <br /> }
                else
                {
                    <span>&nbsp; &nbsp; &nbsp;</span>}
                <i class="fa fa-unlink fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Hiddens + "个隐藏词条")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-codepen fa-fw "></i>
                <span class="article-infor-text">@("总计"+InforModel.All + "个词条")</span>

            </p>
        </div>

        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow-sm -lg p-4 bg-opacity">
                <Table TItem="ListEntryAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelEntry" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="340" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                       ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-pencil" Text="编辑" OnClickCallback="OnEditModel" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-map-signs" Text="开外链" OnClickCallback="OnUnHideOutlinkClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="关外链" OnClickCallback="OnHideOutlinkClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Info" Icon="fa fa-comments" Text="开评" OnClickCallback="OnCanCommentClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-comments-o" Text="关评" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />

                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" />
                        <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="80" />
                        <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" Width="120" TextWrap="true" />
                        <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="300" />

                        <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
                        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="95" />
                        <TableColumn @bind-Field="@context.IsHideOutlink" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                        <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                    </TableColumns>
                    <RowButtonTemplate>
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClickWithoutRender="@(() => OnRowLookClick( context.Id , context.Name))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new int[] { context.Id },1 , true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-arrow-down" Text="降权" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new int[] { context.Id }, - 1 , true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" IsAsync="true" IsShow="!context.IsHidden" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new int[] { context.Id }, true, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-link" Text="显示" IsAsync="true" IsShow="context.IsHidden" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new int[] { context.Id }, false, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="关外链" IsAsync="true" IsShow="!context.IsHideOutlink" OnClickWithoutRender="@(() => OnRowEditIsHideOutlinkClick(new int[] { context.Id }, true, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-link" Text="开外链" IsAsync="true" IsShow="context.IsHideOutlink" OnClickWithoutRender="@(() => OnRowEditIsHideOutlinkClick(new int[] { context.Id }, false, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-comments-o" Text="开评" IsAsync="true" IsShow="!context.CanComment" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new int[] { context.Id }, true, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="关评" IsAsync="true" IsShow="context.CanComment" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new int[] { context.Id }, false, true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>

    </div>

</div>


@code { [NotNull]
    private Table<ListEntryAloneModel>? TableRows { get; set; }
    private List<ListEntryAloneModel> SelectedRows { get; set; } = new();

    public ListEntriesInforViewModel InforModel { get; set; } = new ListEntriesInforViewModel();
    public ListEntriesViewModel ListModel { get; set; } = new ListEntriesViewModel { Entries = new List<ListEntryAloneModel>() };

    private ListEntryAloneModel SearchModelEntry { get; set; } = new ListEntryAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }


    private JSInterop<ListEntries>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<ListEntries>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));
        }

    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 768))
        {
            IsSmallScreen = width < 768;

            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 768 && width < 2000))
        {
            IsNormalScreen = width >= 768 && width < 2000;

            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 2000))
        {
            IsLargeScreen = width >= 2000;

            StateHasChanged();
        }
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        //Thread.Sleep(10000);
#endif
        try
        {
            InforModel = await Http.GetFromJsonAsync<ListEntriesInforViewModel>(ToolHelper.WebApiPath + "api/admin/listentries");
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取词条数据");
        }

    }

    private async Task<QueryData<ListEntryAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<EntriesPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetEntryList", new EntriesPagesInfor { SearchModel = SearchModelEntry, Options = (QueryPageOptionsHelper)options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListEntryAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取词条列表");
            return new QueryData<ListEntryAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(int[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<EditEntryPriorityViewModel>(ToolHelper.WebApiPath + "api/entries/EditEntryPriority", new EditEntryPriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            if (obj.Successful == false)
            {
                await ToastService.Error("修改词条权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改词条权重成功", "修改词条权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改词条权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条权重", "请选中词条");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改词条权重成功", "修改词条权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListEntryAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条权重", "请选中词条");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改词条权重成功", "修改词条权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(int[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenEntryModel>(ToolHelper.WebApiPath + "api/entries/HiddenEntry", new HiddenEntryModel { Ids = ids, IsHidden = isHidden });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "词条失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "词条成功", tempString + "词条成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "词条失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏词条成功", "隐藏词条成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示词条成功", "显示词条成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHideOutlinkClick(int[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenEntryModel>(ToolHelper.WebApiPath + "api/entries/HideEntryOutlink", new HiddenEntryModel { Ids = ids, IsHidden = isHidden });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "词条外部链接失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "词条外部链接成功", tempString + "词条外部链接成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "词条外部链接失败");
        }
    }

    private async Task OnHideOutlinkClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条外部链接显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHideOutlinkClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏词条外部链接成功", "隐藏词条外部链接成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHideOutlinkClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条外部链接显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHideOutlinkClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示词条外部链接成功", "显示词条外部链接成功");
        await TableRows.QueryAsync();
    }

    public Task OnRowLookClick(int id, string name)
    {
        NavigationManager.NavigateTo(Provider,"/entries/index/" + id, name, "fa fa-codepen");
        return Task.CompletedTask;
    }

    private async Task OnRowEditCanCommentClick(int[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用词条评论" : "关闭词条评论";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<EditEntryCanCommentModel>(ToolHelper.WebApiPath + "api/comments/EditEntryCanComment", new EditEntryCanCommentModel { Ids = ids, CanComment = canComment });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启词条评论成功", "开启词条评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭词条评论成功", "关闭词条评论成功");
        await TableRows.QueryAsync();
    }


    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    public async Task OnEditModel(IEnumerable<ListEntryAloneModel> items)
    {
        int count = items.Count();
        if (count == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }
        else if (count > 1)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中一个词条");
            return;
        }
        var model = Utility.GenerateEditorItems<ListEntryAloneModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<ListEntryAloneModel>()
        {
            Title = "编辑词条",
            Model = items.First(),
            Items = model,
            OnCloseAsync = () =>
            {
                //Trace.Log("关闭按钮被点击");
                return Task.CompletedTask;
            },
            OnEditAsync = async context =>
            {
                // Trace.Log("保存按钮被点击");
                var editModel = (ListEntryAloneModel)context.Model;
                await EditData(editModel);
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public async Task EditData(ListEntryAloneModel model)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<ListEntryAloneModel>(ToolHelper.WebApiPath + "api/batch/UpdateEntryData", model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("保存数据失败", obj.Error);
            }
            else
            {

                await ToastService.Success("保存数据成功", "保存数据成功，不会留下审核记录和编辑记录");
                await TableRows.QueryAsync();
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存数据失败");
        }
    }

    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}

