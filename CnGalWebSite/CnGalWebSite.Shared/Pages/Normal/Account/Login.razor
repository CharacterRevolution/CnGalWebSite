@page "/account/login/{*ReturnUrl}"
@page "/account/login/"

@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inject HttpClient Http
@implements IAsyncDisposable
@inject IDataCacheService _dataCacheService

@inject WebClientService? ClientService
@inject IAppHelper? _appHelper
<TitleTip></TitleTip>
<CnGalWebSite.Shared.AppComponent.Normal.Redirections.MakeAccountLayoutRight />

@if (isReady)
{
    @if (isOnRedirecting)
    {
        <AccountWaitingTip Title="正在重定向" Subtitle="我们正在重定向到第三方登入页面，若长时间无响应，请尝试刷新页面"></AccountWaitingTip>
    }
    else
    {
        <div class="rounded  rounded shadow  bg-opacity  p-3">
            <h2 class="mb-4 text-center">欢迎，请登入</h2>
            <div  class="form-group col-12 mt-4  mb-0">
                <div class="row">

                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.UserName" PlaceHolder="推荐使用邮箱登入" ShowLabel="true"/>
                    </div>
                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.Password" PlaceHolder="请输入密码" type="password"  ShowLabel="true"/>
                    </div>
                    <div class="form-group col-12">
                        <a style="float:right" href="/account/forgetpassword" class="link-primary">忘记密码</a>

                        <div style="display:flex">
                            <Checkbox @bind-Value="Model.RememberMe" ShowAfterLabel="true" ShowLabel="false"></Checkbox>&nbsp;记住我
                        </div>
                    </div>
                    <div class="form-group col-12">
                        <div id="captcha-box"></div>
                    </div>
                    <div class="form-group col-6">
                        <Button Color="Color.Primary" IsOutline="true" style="width:100%" @onclick="@(()=>OnRegister())">注册</Button>
                    </div>
                    <div class="form-group col-6">
                        <Button Color="Color.Primary" IsAsync="true" style="width:100%" OnClick="HandleLogin">登录</Button>
                    </div>
                    @if (_dataCacheService.IsOnThirdPartyLogin)
                    {
                        <ThirdPartyLoginButtonListView ReturnUrl="@ReturnUrl" OnRedirecting="OnRedirecting"></ThirdPartyLoginButtonListView>
                    }
                </div>
            </div>
        </div>
    }


}

@code {
    [Parameter]
    public string ReturnUrl { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private DotNetObjectReference<Login> objRef;

    bool isOnRedirecting = false;
    bool isReady = false;
    private int widgetId = -1;
    private LoginModel Model = new LoginModel();
    private string Rememer
    {
        get
        {
            return Model.RememberMe.ToString();
        }
        set
        {
            Model.RememberMe = bool.Parse(value);
        }
    }

    bool isSuccess = true;
    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }

    string Challenge = "";
    string Validate = "";
    string Seccode = "";
    bool IsInitGeetest = false;
    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }


    private JSInterop<Login> Interop { get; set; }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 768))
        {
            IsSmallScreen = width < 768;

            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 768 && width < 1517))
        {
            IsNormalScreen = width >= 768 && width < 1517;

            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1517))
        {
            IsLargeScreen = width >= 1517;
            StateHasChanged();
        }
    }
    #endregion


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            Interop = new JSInterop<Login>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));

            //判断是否已经登入
            if (await AuthService.IsLogin())
            {
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                return;
            }
            //服务端登入跳转到客户端
            try
            {
                if (ToolHelper.IsSSR == true)//&& IsSmallScreen == false)
                {

                    /* NavigationManager.NavigateTo(Provider,"https://app.cngal.org/account/loginfromssr?ReturnUrl=" + ReturnUrl);
                     return;*/

                    //NavigationManager.NavigateTo(Provider,"/account/loginfromssr/" + ReturnUrl);

                }
                else
                {
                    isReady = true;
                    StateHasChanged();
                }

            }
            catch(Exception ex)
            {
                ErrorHandler.ProcessError(ex, "尝试跳转客户端模式失败");
            }
            isReady = true;
            StateHasChanged();
        }
    }


    private async Task HandleLogin()
    {

        try
        {
            var geetestCodeModel = await Http.GetFromJsonAsync<GeetestCodeModel>(ToolHelper.WebApiPath + "api/account/GetGeetestCode");

            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initGeetestBindCAPTCHA", objRef, geetestCodeModel.Gt, geetestCodeModel.Challenge, geetestCodeModel.Success);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "初始化极验人机验证失败");
            return;
        }
        isSuccess = true;
        int count = 0;
        while (isSuccess)
        {
            /*if (count > 5)
            {
                isSuccess = false;
            }*/
            await Task.Delay(500);
            count++;
        }
    }


    [JSInvokable]
    public async Task OnChecked(string challenge, string validate, string seccode)
    {
        try
        {
            Model.Challenge = challenge;
            Model.Validate = validate;
            Model.Seccode = seccode;

            Model.isNeedVerification = false;

            //判断是否需要验证
            /* string country;
             if (ToolHelper.IsSSR)
             {
                 //await ClientService.RetrieveRemoteInfo();
                 //country = ClientService.City;

             }
             else
             {
                country=await  _appHelper.GetIPCountiy("67.220.90.13");
             }*/


            var result = await AuthService.Login(Model);

            switch (result.Code)
            {
                case LoginResultCode.OK:
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                    break;
                case LoginResultCode.HistoricalUser:
                    _dataCacheService.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/historyuserlogin/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedRealNameValidation:
                    await AuthService.Login(result.Token);
                    NavigationManager.NavigateTo("/account/ChooseVerificationMethod/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedEmailValidation:
                    _dataCacheService.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/ConfirmEmailRegister/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                default:
                    await ToastService.Error("登入失败", result.ErrorDescribe);
                    isSuccess = false;
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "登入失败");
            isSuccess = false;
        }
    }
    [JSInvokable]
    public Task OnCancel()
    {
        isSuccess = false;
        return Task.CompletedTask;
    }

    private void OnRegister()
    {
        NavigationManager.NavigateTo("/account/register/" + ReturnUrl);
    }

    private Task OnRedirecting()
    {
        isOnRedirecting = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
        if (objRef != null)
        {
            objRef?.Dispose();
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}


