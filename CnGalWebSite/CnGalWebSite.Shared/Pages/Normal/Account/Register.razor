@page "/account/register/{*ReturnUrl}"
@page "/account/register/"
@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IAppHelper _appHelper
@inject ToastService? ToastService
@inject IJSRuntime JS
@inject HttpClient Http
@inject IDataCacheService _dataCacheService


<TitleTip Title="注册"></TitleTip>
<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>

    <div class="p-3">
        <h1 class="login-h1-text mb-4 text-center">欢迎来到CnGal资料站</h1>
        <div>
            <MTextField @bind-Value="Model.Email"
                        Color="@_dataCacheService.ThemeSetting.Theme"
                        Label="电子邮件"></MTextField>

            <MTextField Dense Label="用户名" Color="@_dataCacheService.ThemeSetting.Theme"
                        @bind-Value="Model.Name"></MTextField>

            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaPasswordInput Placeholder="请输入密码" Label="密码"
                                                                                   @bind-Value="Model.Password" />

            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaPasswordInput Placeholder="请输入密码" Label="确认密码"
                                                                                   @bind-Value="Model.ConfirmPassword" />

            <div class="mb-4">
                <a href="/privacy">CnGal资料站隐私协议</a>
            </div>
            <div class="mb-4">
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="注册" IsAsync="true" OnClick="HandleRegistration" Class="w-100" Rounded Depressed />
            </div>

            <span class=" d-flex" style="justify-content: center; ">
                已经有账号了？ <a style="float:right" href="/account/login">立即登入</a>
            </span>
        </div>
    </div>

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>



@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private int widgetId = -1;

    private DotNetObjectReference<Register> objRef;

    private RegisterModel Model = new RegisterModel();

    bool isSuccess = true;

    string Challenge = "";
    string Validate = "";
    string Seccode = "";
    bool IsInitGeetest = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task HandleRegistration()
    {
        try
        {
            //判断输入是否正确
            if (Model.Password != Model.ConfirmPassword)
            {
                await ToastService.Error("注册失败", "两次输入的密码不一致");
                return;
            }
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                await ToastService.Error("注册失败", "请输入用户名");
                return;

            }
            if (Model.Name.Length > 20)
            {
                await ToastService.Error("注册失败", "用户名必须少于20个字符");
                return;
            }
            if (string.IsNullOrWhiteSpace(Model.Email))
            {
                await ToastService.Error("注册失败", "请输入电子邮件");
                return;

            }
            if (System.Text.RegularExpressions.Regex.Match(Model.Email, "^[\\w-]+@[\\w-]+\\.[\\w-]+$").Success == false)
            {
                await ToastService.Error("注册失败", "输入的电子邮件无效");
                return;
            }
            var geetestCodeModel = await Http.GetFromJsonAsync<GeetestCodeModel>(ToolHelper.WebApiPath + "api/account/GetGeetestCode");

            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initGeetestBindCAPTCHA", objRef, geetestCodeModel.Gt, geetestCodeModel.Challenge, geetestCodeModel.Success);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "初始化极验人机验证失败");
            return;
        }
        isSuccess = true;
        int count = 0;
        while (isSuccess)
        {
            await Task.Delay(500);
            count++;
        }
    }


    [JSInvokable]
    public async Task OnChecked(string challenge, string validate, string seccode)
    {
        try
        {
            Model.Challenge = challenge;
            Model.Validate = validate;
            Model.Seccode = seccode;


            var result = await AuthService.Register(Model);

            if (result.Successful)
            {
                _dataCacheService.UserName = Model.Name;
                NavigationManager.NavigateTo(Provider, "/account/ConfirmEmailRegister/" + ReturnUrl, "验证邮箱", "fa-at");
            }
            else
            {
                await ToastService.Error("注册失败", "参数错误 " + result.Error);
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "注册失败");
            isSuccess = false;
        }
    }

    [JSInvokable]
    public Task OnCancel()
    {
        isSuccess = false;
        return Task.CompletedTask;
    }


    private async void OnLogin()
    {
        try
        {
            NavigationManager.NavigateTo(Provider, "/account/login/" + ReturnUrl, "登入", "fa fa-sign-in");
        }
        catch
        {
            await ToastService.Error("尝试导航失败", "请尝试刷新页面");
        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}
