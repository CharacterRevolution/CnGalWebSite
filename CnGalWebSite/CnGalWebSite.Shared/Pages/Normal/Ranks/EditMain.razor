@page "/ranks/editmain/{Id}"
@attribute [Authorize]

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


@if(string.IsNullOrWhiteSpace(Model.Name)==false)
{
    <TitleTip Title="@("编辑 " + Model.Name)"></TitleTip>
}


<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.EntryStandard"></AlertTip>
        @if (isReady == false)
        {
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
            <h3 class="text-truncate mb-4 fw-bold">编辑头衔主要信息</h3>
            <h5 class=" mb-4 fw-bold">当前头衔：（Id:）</h5>
            <hr>

            <div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
        }
        else
        {

             <ValidateForm Model="@Model" ValidateAllProperties="true" class="mt-4" @ref="ComplexForm">
                    <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-3">
             
                        <h3 class="text-truncate mb-4 fw-bold">编辑头衔主要信息</h3>
                        <h5 class="mb-4 fw-bold">当前头衔：@Model.Name（Id:@Model.Id）</h5>
                        <hr />

                        <div class="row  mt-4">
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.Name" />
                            </div>              
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.Text" />
                            </div>              
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.Styles" />
                            </div>              
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.CSS" />
                            </div>              
                        </div>
                    </div>
             </ValidateForm>

           <ManageRankUsersTip Id="@long.Parse(Id)" Title="管理拥有该头衔的用户"></ManageRankUsersTip>
           <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
                <div>
                    <Button style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true"  Icon="fa fa-check" Text="完成"></Button>
                </div>
            </div>
        }


    </div>
</div>
@code {


    [Parameter]
    public string Id { get; set; }
    public EditRankViewModel Model { get; set; } = new EditRankViewModel();
    private bool isReady = false;
    [NotNull]
    private ValidateForm? ComplexForm { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<EditRankViewModel>(ToolHelper.WebApiPath + "api/ranks/EditRank/" + Id);
            isReady = true;
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑头衔失败");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                ComplexForm.SetError<EditRankViewModel>(f => f.Name, "必须填写头衔名称");
                return;
            }

            var result = await Http.PostAsJsonAsync<EditRankViewModel>(ToolHelper.WebApiPath + "api/ranks/EditRank", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                if (obj.Error == "已经存在该名称的头衔")
                {
                    ComplexForm.SetError<EditRankViewModel>(f => f.Name, "已经存在该名称的头衔");
                }
                await ToastService.Error("保存头衔主要信息失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存成功", "保存头衔主要信息成功，等待审核通过");
                NavigationManager.NavigateTo(Provider,"/admin/listranks/" , "管理头衔", "fa fa-tree");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存头衔失败");
        }
    }

}
