@page "/votes/index/{Id}"

@inject HttpClient Http
@inject ExamineService _examineService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable
@inject IDataCacheService _dataCatcheService

@inject DialogService DialogService

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <TitleTip Title="@(Model.Name)" Description="@Model.BriefIntroduction" Image="@Model.MainPicture"></TitleTip>
}


@if (string.IsNullOrWhiteSpace(Model.SmallBackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.SmallBackgroundPicture)" class=" d-none  bg-d-lg-block bgimage-ison"></div>
}
@if (string.IsNullOrWhiteSpace(Model.BackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.BackgroundPicture)" class=" d-none d-sm-block bgimage-ison"></div>
}

@if (isNotFound == true)
{
    int temp = 0;
    <NotFoundVote IsNeedLayput="true" ArticleName="@(int.TryParse(Id, out temp) ? "" : ToolHelper.Base64DecodeName(Id))"></NotFoundVote>
}
else
{
    <div class="row">
        @if (isReady == false)
        {
            <div style="padding-right: 0;padding-left: 0;">
                <div class="  rounded shadow  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                    <SkeletonParagraph />
                    <hr class="m-2" />
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {
            <div class="col-12 @(IsLargeScreen ? " col-xl-6" : "")">

                @if (Model.IsHidden == true)
                {
                    <div class="alert alert-info  rounded shadow  rounded" role="alert">
                        当前投票处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                    </div>

                }

                <div class="rounded shadow  bg-opacity mb-4 pb-3">
                    <div>
                        <CnGalWebSite.Shared.Component.Votes.MainPage.MainInforCard Model="Model" />

                    </div>
                    <div class="ms-3 me-3 mt-4">
                        <CnGalWebSite.Shared.Component.Votes.MainPage.OptionsInforCard Model="Model" IsShowResult="IsShowResult" />
                    </div>
                </div>


                @if (Model.CanComment)
                {
                    <CommentListView OnPageChanged="OnCommentPageClick" Comments="ListComments" IsShowNotFound="false" IsSmallScreen="IsSmallScreen" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely" IsAdmin="@IsAdmin" CanDeleted="IsAdmin" DeletedCallBack="OnDeleted"></CommentListView>
                    <ReplyCommentTip CurrentUserRank="@CurrentUserRank" IsChild="false" ObjectId="@Model.Id.ToString()" Type="CommentType.CommentVote" RelyCallBack="OnRely" IsAdmin="IsAdmin"></ReplyCommentTip>

                }
                else
                {
                    <CloseCommentTip IsNeedLayput="true"></CloseCommentTip>
                }

            </div>
            @if (IsLargeScreen)
            {
                <div class="col-xl-6">
                    @if (Model.Entries.Count != 0 && Model.Artciles.Count != 0 && Model.Peripheries.Count != 0)
                    {
                        <CnGalWebSite.Shared.Component.Votes.MainPage.RelevanceInforCard Model="Model" />
                    }
                    @if (Model.Users.Count != 0)
                    {
                        <CnGalWebSite.Shared.Component.Votes.MainPage.ListUserInforCard Model="Model" />
                    }
                </div>
            }
        }



    </div>
}


    @code {
        private string id = "";
        [Parameter]
        public string Id
        {
            get { return id; }
            set
            {
                id = value;
                if (isFrist == false)
                {
                    OnInitializedAsync();

                }
            }
        }
        public string MainPageHtml { get; set; }
        public int currentPage { get; set; } = 1;
        public string NoticeCard { get; set; } = "";
        public string CurrentUserRank { get; set; }
        bool isReady = false;
        bool isNotFound = false;

        public VoteViewModel Model { get; set; } = new VoteViewModel();
        public bool IsShowResult { get; set; }

        public PagedResultDto<CommentViewModel> ListComments = new CnGalWebSite.DataModel.Application.Dtos.PagedResultDto<CommentViewModel> { Data = new List<CommentViewModel>(), CurrentPage = 1, TotalCount = 0 };


        #region 获取屏幕大小

        /// <summary>
        /// 获得/设置 IJSRuntime 实例
        /// </summary>
        [Inject]
        [System.Diagnostics.CodeAnalysis.NotNull]
        public IJSRuntime? JSRuntime { get; set; }



        public bool IsSmallScreen { get; set; }
        public bool IsNormalScreen { get; set; }
        public bool IsLargeScreen { get; set; }
        public bool IsAdmin { get; set; } = false;
        string LastLookName = "";
        bool isFrist = true;
        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

        [CascadingParameter]
        public ErrorHandler ErrorHandler { get; set; }

        private JSInterop<Index>? Interop { get; set; }
        /// <summary>
        /// OnAfterRenderAsync 方法
        /// </summary>
        /// <param name="firstRender"></param>
        /// <returns></returns>
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            try
            {
                await JS.InvokeAsync<string>("highlightAllCode");
            }
            catch
            {

            }

            //记录数据
            if (LastLookName != Model.Name && string.IsNullOrWhiteSpace(Model.Name))
            {
                LastLookName = Model.Name;
                try
                {
                    await JS.InvokeAsync<string>("trackEvent", "投票", "浏览", Model.Name, "1", "look");
                }
                catch (Exception exc)
                {

                }
            }
            if (firstRender)
            {
                Interop = new JSInterop<Index>(JSRuntime);
                await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));

                isFrist = false;


            }

        }

        /// <summary>
        /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
        /// </summary>
        /// <returns></returns>
        [JSInvokable]
        public void SetCollapsed(int width)
        {
            if (IsSmallScreen != (width < 850))
            {
                IsSmallScreen = width < 850;
                StateHasChanged();
            }
            if (IsNormalScreen != (width >= 850 && width < 1500))
            {
                IsNormalScreen = width >= 850 && width < 1500;
                StateHasChanged();
            }
            if (IsLargeScreen != (width >= 1500))
            {
                IsLargeScreen = width >= 1500;
                StateHasChanged();
            }
        }
        #endregion

        protected override async Task OnInitializedAsync()
        {
            try
            {
                isReady = false;
                isNotFound = false;
                //获取周边信息
                Model = await _dataCatcheService.VoteIndexPageCatche.GetCatche(Id,true);
                //判断投票名称是否为空 为空则跳转到主页
                if (string.IsNullOrWhiteSpace(Model.Name))
                {
                    NavigationManager.NavigateTo(Provider, "/votes/home", "主页", "fa fa-home");
                }
                IsShowResult = Model.UserSelections.Any();
                isReady = true;
                StateHasChanged();

                var user = await authenticationStateTask;

                try
                {
                    await OnCommentPageClick(1);
                }
                catch (Exception ex)
                {
                    ErrorHandler.ProcessError(ex, "获取投票评论列表失败");
                }
            }
            catch (Exception exc)
            {
                isReady = true;
                isNotFound = true;
                StateHasChanged();
            }

        }

        private async void UnHidden()
        {
            try
            {

                var result = await Http.PostAsJsonAsync<HiddenVoteModel>(ToolHelper.WebApiPath + "api/votes/HiddenVote", new HiddenVoteModel { Ids = new long[] { Model.Id }, IsHidden = false });
                string jsonContent = result.Content.ReadAsStringAsync().Result;
                Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
                //判断结果
                if (obj.Successful == false)
                {
                    await ToastService.Error("显示投票失败", obj.Error);
                }
                else
                {
                    await ToastService.Success("显示投票成功", "显示投票成功，离开此页面后可以请在后台恢复投票状态");
                    Model.IsHidden = false;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "显示投票失败");
            }
        }
        private async void Hidden()
        {
            try
            {
                var result = await Http.PostAsJsonAsync<HiddenVoteModel>(ToolHelper.WebApiPath + "api/votes/HiddenVote", new HiddenVoteModel { Ids = new long[] { Model.Id }, IsHidden = true });
                string jsonContent = result.Content.ReadAsStringAsync().Result;
                Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
                //判断结果
                if (obj.Successful == false)
                {
                    await ToastService.Error("隐藏投票失败", obj.Error);
                }
                else
                {
                    await ToastService.Success("隐藏投票成功", "隐藏投票成功，离开此页面后可以请在后台恢复投票状态");
                    Model.IsHidden = true;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "隐藏投票失败");
            }
        }


        private async Task OnCommentPageClick(int pageIndex)
        {
            try
            {
                ListComments = await Http.GetFromJsonAsync<PagedResultDto<CommentViewModel>>(ToolHelper.WebApiPath + "api/comments/GetComments/" + (int)CommentType.CommentVote + "/" + Id + "/" + pageIndex + "/8");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取评论列表失败");
            }
        }

        private async Task OnRely()
        {
            Model.CommentCount++;
            await OnCommentPageClick(ListComments.CurrentPage);
        }
        private async Task OnDeleted()
        {
            await OnCommentPageClick(ListComments.CurrentPage);
        }

        public async void OnClickUrl(NavigateModel model)
        {
            try
            {
                NavigationManager.NavigateTo(Provider, model.Url, model.Title, model.Icon);
            }
            catch
            {
                await ToastService.Error("导航失败", "请尝试刷新页面");
            }
        }




        #region 释放实例
        private async ValueTask DisposeAsyncCore()
        {
            if (Interop != null)
            {
                await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
                Interop.Dispose();
                Interop = null;
            }
        }
        public async ValueTask DisposeAsync()
        {
            await DisposeAsyncCore();
            GC.SuppressFinalize(this);
        }
        #endregion

    }
