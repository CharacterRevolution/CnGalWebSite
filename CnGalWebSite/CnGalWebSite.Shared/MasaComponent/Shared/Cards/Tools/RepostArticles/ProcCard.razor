@inject IArticleService _articleService
@implements IDisposable
@inject IDataCacheService _dataCacheService

<div>
    <div>@($"{item.Url} ({index}/{Model.Count})")</div>
    <MProgressLinear Value="index*100.0/Model.Count" Class="mb-2" Stream BufferValue="0" Color="@_dataCacheService.ThemeSetting.Theme"></MProgressLinear>
</div>
<div>
    <div>@($"{infor} ({item.CompleteTaskCount}/{item.TotalTaskCount})")</div>
    <MProgressLinear Value="item.CompleteTaskCount*100.0/item.TotalTaskCount" Stream BufferValue="0" Color="@_dataCacheService.ThemeSetting.Theme"></MProgressLinear>
</div>

@code {
    [Parameter]
    public List<RepostArticleModel> Model { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public IEnumerable<string> ArticleItems { get; set; }
    [Parameter]
    public IEnumerable<string> EntryGameItems { get; set; }

    int index = 0;
    string infor = "";
    RepostArticleModel item = new RepostArticleModel();

    private System.Threading.Timer mytimer;




    public async void OnProgressUpdate(KeyValuePair<OutputLevel, string> model)
    {

        try
        {
            await InvokeAsync(() =>
            {
                infor = model.Value;
                StateHasChanged();
            });
        }
        catch
        {

        }
    }

    public async void Send(object o)
    {
        try
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        catch
        {

        }
    }

    public async Task Proc()
    {
        mytimer = new System.Threading.Timer(new System.Threading.TimerCallback(Send), null, 0, 500);

        _articleService.ProgressUpdate += OnProgressUpdate;

        for (index = 0; index < Model.Count; index++)
        {
            item = Model[index];
            await _articleService.ProcArticle(item,ArticleItems,EntryGameItems);
        }

        mytimer.Dispose();

        _articleService.ProgressUpdate -= OnProgressUpdate;
    }

    #region 释放实例
    public void Dispose()
    {
        if (mytimer != null)
        {
            mytimer?.Dispose();
        }
        _articleService.ProgressUpdate -= OnProgressUpdate;
        GC.SuppressFinalize(this);
    }
    #endregion

}
