@inject IDataCacheService _dataCacheService

<style>
    .theme--light.m-icon {
        color: none;
    }
</style>
@if (currentAudio != null)
{
    <div style="display:flex;">
        <div class="me-4">
            <img src="@currentAudio.Thumbnail" alt="@currentAudio.Name" style="width:150px;height:150px;" />
        </div>
        <div class="w-100">
            <div class="mb-4">
                <MBorder Color="@_dataCacheService.ThemeSetting.Theme" Style="border-radius:0;margin: auto 0;" Width="@("2px")">
                    <div class="ms-4">
                        <div class="h6 fw-bold">@currentAudio.Name</div>
                        <div style=" color: gray; " class="text-truncate-1">@currentAudio.BriefIntroduction</div>

                    </div>
                </MBorder>

            </div>
            <MSimpleTable Class="mb-4 overflow-auto" Style="max-height:150px;">
                <tbody>
                    @{ int index = 0; }
                    @foreach (var item in Model.OrderByDescending(s => s.Priority))
                    {
                        <tr class="@(item==currentAudio?"font-color fw-bold":"")" @key="item.Url" @onclick="@(()=>OnClick(item))">
                            <td class="p-0" style="height: 30px; width: 0px;"><MIcon Style="@(item== currentAudio?"color:var(--main-color)!important;":"")" Size="@("20px")">mdi-play-box</MIcon></td>
                            <td style="min-width: 100px;height:30px; ">@($"{++index}. {item.Name}" )</td>
                            <td style="min-width: 100px; height: 30px; display: flex; justify-content: flex-end; align-items: center;">
                                @(item.Duration.TotalMinutes.ToString("0") + ":"+(item.Duration.TotalSeconds%60).ToString("00"))
                            </td>
                        </tr>
                    }
                </tbody>
            </MSimpleTable>
        </div>
    </div>
    <hr class="mt-3 mb-3">
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAudio Src="@currentAudio.Url" AutoPlay="AutoPlay" Class="w-100" />

}
@code {
    [Parameter]
    public List<AudioViewModel> Model { get; set; }
    [Parameter]
    public bool AutoPlay { get; set; } = true;

    AudioViewModel currentAudio;


    protected override async Task OnParametersSetAsync()
    {
        if (currentAudio == null)
        {
            currentAudio = Model.FirstOrDefault();
        }
    }

    public Task OnClick(AudioViewModel model)
    {
        if (currentAudio == model)
        {
            return Task.CompletedTask;
        }
        currentAudio = model;
        StateHasChanged();
        return Task.CompletedTask;

    }

}
