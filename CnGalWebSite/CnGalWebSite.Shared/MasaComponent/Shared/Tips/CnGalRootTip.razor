@inject IDataCacheService _dataCacheService
@inject IHostApplicationLifetime _applicationLifetime
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Hosting

<ErrorHandler @ref="errorHandler">
    @if (ToolHelper.IsMaui)
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Tips.StyleTip @ref="styleTip" OnStateChanged="OnStateChanged" />
        <ImagesLargeViewTip />
        <CascadingValue Value=this IsFixed="true">
            @ChildContent
        </CascadingValue>

    }
    else
    {
        <ErrorLogger ShowToast="false" OnErrorHandleAsync="OnErrorHandleAsync">
            <CnGalWebSite.Shared.MasaComponent.Shared.Tips.StyleTip @ref="styleTip" OnStateChanged="OnStateChanged" />
            <ImagesLargeViewTip />
            <CascadingValue Value=this IsFixed="true">
                @ChildContent
            </CascadingValue>
        </ErrorLogger>
    }


</ErrorHandler>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    ErrorHandler errorHandler;
    CnGalWebSite.Shared.MasaComponent.Shared.Tips.StyleTip styleTip;
    public Task OnErrorHandleAsync(ILogger logger, Exception ex)
    {
        if (ex is OutOfMemoryException)
        {

            //内存溢出 强制关闭服务端 由于Docker设置 会重启
            _applicationLifetime.StopApplication();
            throw ex;
        }
        else
        {
            errorHandler.ProcessError(ex, "发生未经捕获的异常", "代码里有Bug");
            return Task.CompletedTask;
        }
    }

    public async Task SaveTheme()
    {
        if (styleTip != null)
        {
            await styleTip.SaveTheme();
            styleTip.Refresh();
        }
    }

    public async Task OnStateChanged(bool refreshApp)
    {
        if (refreshApp)
        {
            await _dataCacheService.RefreshApp.InvokeAsync();
        }
        StateHasChanged();
    }
}
