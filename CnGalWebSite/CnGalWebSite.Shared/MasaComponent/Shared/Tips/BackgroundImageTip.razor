@inject IDataCacheService _dataCacheService


@if (_dataCacheService.ThemeSetting.IsTransparent && _dataCacheService.ThemeSetting.IsDark == false)
{
    if (string.IsNullOrWhiteSpace(BigImage) == false)
    {
        <div id="web_bg" style="@($"background-image: url({BigImage})")" class=" d-none d-sm-block"></div>
    }
    @if (string.IsNullOrWhiteSpace(SmallImage) == false)
    {
        <div id="web_bg" style="@($"background-image: url({SmallImage})")" class="d-md-none"></div>

    }
}

@code {
    string BigImage = "";
    string SmallImage = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        string mimage = null;
        string simage = null;
        if (authenticationStateTask != null)
        {
            var user = await authenticationStateTask;
            if (user.User.Identity.IsAuthenticated)
            {
                foreach (var item in user.User.Claims)
                {
                    if (item.Type == "mbgimage")
                    {
                        mimage = item.Value;
                    }
                    else if (item.Type == "sbgimage")
                    {
                        simage = item.Value;
                    }
                }

            }
        }
        BigImage = mimage;
        SmallImage = simage;

        StateHasChanged();
    }
}
