@inject IDataCacheService _dataCacheService
@implements IDisposable

@if (OnlyShowContext)
{
    @ChildContent
}
else
{
    @if (Small)
    {
        <div class="@( (OutlineHead?"":"rounded shadow-sm  bg-opacity p-2 ") + Class + (IsCollapsed ? " mb-3" : ""))">
            <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
                <h2 class="@("m-0 " + (string.IsNullOrWhiteSpace(TextColor)?"font-color":TextColor))" style="font-size: inherit;">
                    <i class="@Icon"></i> &nbsp;&nbsp;@Title
                </h2>
                <div>
                    @ButtonContent
                    @if (Collapable)
                    {
                        <MasaButton Color="@ButtonColor" Fab XSmall Icon="@(IsCollapsed?"fa fa-chevron-right":"fa fa-chevron-down")" Tooltip="@(IsCollapsed?"展开":"折叠")" OnClick="@(() => OnCollapseChanged(!IsCollapsed))" />

                    }
                </div>
            </div>
            @if (Outline == false)
            {
                <div class="@((IsCollapsed ? "d-none " : "d-block") + " mt-2")">
                    @ChildContent
                </div>
            }
        </div>
        @if (Outline)
        {
            <div class="@((IsCollapsed ? "d-none " : "d-block") + " mt-2")">
                @ChildContent
            </div>
        }

    }
    else
    {
        <div class="@( (OutlineHead?"":"rounded shadow-sm  bg-opacity p-3 ") + Class + (IsCollapsed ? " mb-3" : ""))">
            <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
                <h2 class="@("fw-bold h5 m-0 " + (string.IsNullOrWhiteSpace(TextColor)?"font-color":TextColor))">
                    <i class="@Icon"></i> &nbsp;&nbsp;@Title
                </h2>
                <div>
                    @ButtonContent
                    @if (Collapable)
                    {
                        <MasaButton Color="@ButtonColor" Fab XSmall Icon="@(IsCollapsed?"fa fa-chevron-right":"fa fa-chevron-down")" Tooltip="@(IsCollapsed?"展开":"折叠")" OnClick="@(() => OnCollapseChanged(!IsCollapsed))" />
                    }
                </div>
            </div>
            @if (Outline == false)
            {
                <div class="@((IsCollapsed ? "d-none " : "d-block") + " mt-3")">
                    @ChildContent
                </div>
            }
        </div>
        @if (Outline)
        {
            <div class="@((IsCollapsed ? "d-none " : "d-block") + " mt-3")">
                @ChildContent
            </div>
        }

    }

}

@code {
    [Parameter]
    public string Icon { get; set; }
    [Parameter]
    public string TextColor { get; set; }
    [Parameter]
    public string ButtonColor { get; set; }

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public RenderFragment ButtonContent { get; set; }
    [Parameter]
    public bool Collapable { get; set; }
    [Parameter]
    public bool Outline { get; set; }
    [Parameter]
    public bool OutlineHead { get; set; }
    [Parameter]
    public bool OnlyShowContext { get; set; }
    [Parameter]
    public bool IsCollapsed { get; set; }
    [Parameter]
    public bool Small { get; set; }
    [Parameter]
    public EventCallback<bool> IsCollapsedChanged { get; set; }

    private async Task OnCollapseChanged(bool state)
    {
        IsCollapsed = state;
        await IsCollapsedChanged.InvokeAsync(state);
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        _dataCacheService.RefreshRequsted -= RefreshRequsted;
        _dataCacheService.RefreshRequsted += RefreshRequsted;

    }

    public async void RefreshRequsted(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);

    }
    #region 释放实例

    public void Dispose()
    {

        _dataCacheService.RefreshRequsted -= RefreshRequsted;

        GC.SuppressFinalize(this);
    }
    #endregion
}
