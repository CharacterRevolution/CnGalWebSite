@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService
@implements IDisposable

@if (string.IsNullOrWhiteSpace(Text) == false && string.IsNullOrWhiteSpace(Url) == false)
{
    <MMenu OffsetY @bind-Value="menu" Top>
        <ActivatorContent Context="m">
            <MTooltip Bottom>
                <ActivatorContent Context="c">
                    @{
                        var attrs = new Dictionary<string, object>();
                        m.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                        c.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                    }
                    <MButton Fab Small Color="@_dataCacheService.ThemeSetting.Theme" Class="@Class" @attributes="@attrs" Dark>
                        <MIcon>mdi-format-list-bulleted-square </MIcon>
                    </MButton>
                </ActivatorContent>
                <ChildContent>
                    <span>目录</span>
                </ChildContent>
            </MTooltip>
        </ActivatorContent>

        <ChildContent>
            <div class="bg-theme p-3 pe-0" style="width:400px;">
                <div class="w-100">
                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.Catalogs.MasaCatalog Model="@Text" Url="@Url" @ref="masaCatalog"/>
                </div>
            </div>
        </ChildContent>
    </MMenu>
}

@code {

    [Parameter]
    public string Class { get; set; }

    public string Text { get; set; }
    public string Url { get; set; }

    private bool menu { get; set; }

    CnGalWebSite.Shared.MasaComponent.Shared.Components.Catalogs.MasaCatalog masaCatalog;

    public async Task Refresh(string text, string url)
    {
        Text = text;
        Url = url;
        if(masaCatalog!=null)
        {
            await masaCatalog.Refresh();
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _dataCacheService.RefreshRequsted -= RefreshRequsted;
        _dataCacheService.RefreshRequsted += RefreshRequsted;

    }

    public async void RefreshRequsted(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);

    }
    #region 释放实例

    public void Dispose()
    {

        _dataCacheService.RefreshRequsted -= RefreshRequsted;

        GC.SuppressFinalize(this);
    }
    #endregion
}
