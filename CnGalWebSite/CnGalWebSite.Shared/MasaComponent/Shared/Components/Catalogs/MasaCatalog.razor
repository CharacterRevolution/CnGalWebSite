@inject IDataCacheService _dataCacheService
@inject IJSRuntime JS

@implements IDisposable

@if (CatalogItems != null && CatalogItems.Any())
{
            <div class="overflow-x-auto pe-3" style="max-height: 500px">
                <MTreeview OpenAll
                           Color="@_dataCacheService.ThemeSetting.Theme"
                           Items="CatalogItems"
                           TItem="ArticleCatalogModel"
                           TKey="string"
                           Activatable
                           ItemKey="u => u.Href"
                           ItemChildren="u => u.Nodes"
                           ItemText="u => u.Text"
                           OnActiveUpdate="OnActiveUpdate">
                </MTreeview>
            </div> 
}



@code {
    [Parameter]
    public string Model { get; set; }
    [Parameter]
    public string Url { get; set; }
    [Parameter]
    public EventCallback OnNav { get; set; }

    List<ArticleCatalogModel> CatalogItems = new List<ArticleCatalogModel>();


    protected override async Task OnInitializedAsync()
    {
        _dataCacheService.RefreshRequsted -= RefreshRequsted;
        _dataCacheService.RefreshRequsted += RefreshRequsted;
        await Refresh();

    }

    public Task Refresh()
    {
        CatalogItems = ArticleCatalogModel.GetCatalog(Model);

        return Task.CompletedTask;
    }

    public async Task OnActiveUpdate(List<ArticleCatalogModel> model)
    {
        if (model == null || model.Any() == false)
        {
            return;
        }
        await JS.InvokeAsync<string>("navigateTo", $"{Url}#{model.FirstOrDefault().Href}");
        await OnNav.InvokeAsync();
    }

    public async Task IsCollapsedChanged(bool value)
    {
        _dataCacheService.ThemeSetting.IsHiddeArticleCatalog = value;
        await _dataCacheService.ThemeChanged.InvokeAsync();
    }

    public async void RefreshRequsted(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);

    }
    #region 释放实例

    public void Dispose()
    {

        _dataCacheService.RefreshRequsted -= RefreshRequsted;

        GC.SuppressFinalize(this);
    }
    #endregion
}
