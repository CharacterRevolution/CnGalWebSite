@inject IDataCacheService _dataCacheService
@inject IJSRuntime JS

@implements IDisposable

@if (Model != null && Model.Any())
{
    <div class="rounded shadow-sm  bg-opacity">
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Icon="fa fa-fw fa-list" Title="目录" Collapable Outline OutlineHead Class="p-3">
            <div class="overflow-x-auto p-3 pt-0" style="max-height: calc(100vh - 180px)">
                <MTreeview OpenAll
                           Color="@_dataCacheService.ThemeSetting.Theme"
                           Items="CatalogItems"
                           TItem="ArticleCatalogModel"
                           TKey="string"
                           Activatable
                           ItemKey="u => u.Href"
                           ItemChildren="u => u.Nodes"
                           ItemText="u => u.Text"
                           OnActiveUpdate="OnActiveUpdate">
                </MTreeview>




            </div>

        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
    </div>
}



@code {
    [Parameter]
    public string Model { get; set; }
    [Parameter]
    public string Url { get; set; }

    List<ArticleCatalogModel> CatalogItems = new List<ArticleCatalogModel>();

    protected override async Task OnInitializedAsync()
    {
        _dataCacheService.RefreshRequsted += RefreshRequsted;

        CatalogItems = ArticleCatalogModel.GetCatalog(Model);
    }

    public async Task OnActiveUpdate(List<ArticleCatalogModel> model)
    {
        if (model == null || model.Any() == false)
        {
            return;
        }
        await JS.InvokeAsync<string>("navigateTo", $"{Url}#{model.FirstOrDefault().Href}");

    }


    public async void RefreshRequsted(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);

    }
    #region 释放实例

    public void Dispose()
    {

        _dataCacheService.RefreshRequsted -= RefreshRequsted;

        GC.SuppressFinalize(this);
    }
    #endregion
}
