@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IDataCacheService _dataCacheService

<MMenu OffsetY CloseOnContentClick="false" Value="IsEdit" ValueChanged="ValueChanged">
    <ActivatorContent Context="m">
        <MTooltip Bottom>
            <ActivatorContent Context="c">
                @{
                    var attrs = new Dictionary<string, object>();
                    m.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                    c.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                }
                @if (_dataCacheService.ThemeSetting.IsDark)
                {
                    <MButton Fab Small @attributes="@attrs" Class="@Class">
                        <MIcon>mdi-pencil</MIcon>
                    </MButton>
                }
                else
                {
                    <MButton Fab Dark Small Color="@_dataCacheService.ThemeSetting.Theme" @attributes="@attrs" Class="@Class">
                        <MIcon>mdi-pencil</MIcon>
                    </MButton>
                }

            </ActivatorContent>
            <ChildContent>
                <span>编辑</span>
            </ChildContent>
        </MTooltip>
    </ActivatorContent>

    <ChildContent>
        <div class="bg-opacity d-flex p-3" style="@("flex-direction: column; align-items: center; "+(ShowPerfection?"width:350px;":"width:300px;"))">
            <div class="w-100">
                @if (isReady)
                {
                    @if (PerfectionInfor != null && ShowPerfection)
                    {
                        <CnGalWebSite.Shared.MasaComponent.PC.Perfections.SingleOverviewCard Model="PerfectionInfor" OnClosed="OnClosed" />
                        <MDivider Class="w-100"></MDivider>
                    }
                    <MButton Text Block Color="warning" OnClick="OnClickHistory">
                        <MIcon Left>mdi-history </MIcon>
                        历史编辑记录
                    </MButton>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <EditHiddenButton IsHidden="IsHidden" IsHiddenChanged="IsHiddenChanged" Id="Id" Type="Type" />
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView>
                        <Authorized>
                            @foreach (var item in Items)
                            {
                                <PartNavButton Model="item" />
                            }
                        </Authorized>
                        <NotAuthorized>
                            <MButton Text Block Color="success" OnClick="OnClickLogin">
                                <MIcon Left>mdi-login </MIcon>
                                登入后编辑
                            </MButton>
                        </NotAuthorized>
                    </AuthorizeView>

                }
                else
                {
                    <MProgressCircular Size="60" Width="6" Indeterminate Color="@_dataCacheService.ThemeSetting.Theme" Class="mt-4 mb-4"></MProgressCircular>
                }


            </div>
        </div>
    </ChildContent>
</MMenu>
@code {
    [Parameter]
    public ExaminedNormalListModelType Type { get; set; }
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public bool ShowPerfection { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool IsEdit { get; set; }
    [Parameter]
    public bool IsHidden { get; set; }
    [Parameter]
    public EventCallback<bool> IsHiddenChanged { get; set; }
    [Parameter]
    public EventCallback<bool> IsEditChanged { get; set; }

    bool isReady { get; set; }

    public List<EditButtonLineModel> Items { get; set; } = new List<EditButtonLineModel>();

    public Dictionary<Operation, EditState> EditStates { get; set; } = new Dictionary<Operation, EditState>();

    public List<ExaminedNormalListModel> Examines { get; set; } = new List<ExaminedNormalListModel>();

    public PerfectionInforTipViewModel PerfectionInfor { get; set; } = new PerfectionInforTipViewModel();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await GetExamineInfor();
        ProcButtonList();
        isReady = true;
    }

    public async Task OnClickHistory()
    {
        var option = new DialogOption()
        {
            Title = "历史编辑记录"
        };
        option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<EditRecordListViewTip>(new Dictionary<string, object>
        {
            [nameof(EditRecordListViewTip.Id)] = Id,
            [nameof(EditRecordListViewTip.Model)] = Examines,
            [nameof(EditRecordListViewTip.Type)] = Type,
            [nameof(EditRecordListViewTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),

        }).Render();
        await DialogService.Show(option);
    }

    public void ProcButtonList()
    {
        Items.Clear();
        foreach (var item in EditStates)
        {
            Items.Add(new EditButtonLineModel
            {
                State = item.Value == EditState.Normal ? (Examines.Any(s => s.Operation == item.Key) ? EditState.Normal : EditState.None) : item.Value,
                EditCount = Examines.Count(s => s.Operation == item.Key),
                Id = long.Parse(Examines.FirstOrDefault()?.RelatedId),
                LastEditTime = Examines.Where(s => s.Operation == item.Key).OrderByDescending(s => s.ApplyTime).FirstOrDefault()?.ApplyTime,
                Operation = item.Key
            });
        }

    }

    public async Task GetExamineInfor()
    {
        var editStates = new Dictionary<Operation, EditState>();
        try
        {
            if (Type == ExaminedNormalListModelType.Entry)
            {

                var model = await Http.GetFromJsonAsync<EditEntryInforBindModel>(ToolHelper.WebApiPath + "api/entries/GetEntryEditInforBindModel/" + Id);

                Examines = model.Examines;

                if (ShowPerfection)
                {
                    PerfectionInfor = model.PerfectionInfor;
                }

                editStates.Add(Operation.EstablishMain, model.State.MainState);
                editStates.Add(Operation.EstablishAddInfor, model.State.InforState);
                editStates.Add(Operation.EstablishMainPage, model.State.MainPageState);
                editStates.Add(Operation.EstablishImages, model.State.ImagesState);
                editStates.Add(Operation.EstablishRelevances, model.State.RelevancesState);
                editStates.Add(Operation.EstablishTags, model.State.TagState);

            }
            else if (Type == ExaminedNormalListModelType.Article)
            {
                var model = await Http.GetFromJsonAsync<EditArticleInforBindModel>(ToolHelper.WebApiPath + "api/articles/GetArticleEditInforBindModel/" + Id);

                Examines = model.Examines;

                editStates.Add(Operation.EditArticleMain, model.State.MainState);
                editStates.Add(Operation.EditArticleMainPage, model.State.MainPageState);
                editStates.Add(Operation.EditArticleRelevanes, model.State.RelevancesState);

            }
            else if (Type == ExaminedNormalListModelType.Periphery)
            {
                var model = await Http.GetFromJsonAsync<EditPeripheryInforBindModel>(ToolHelper.WebApiPath + "api/Peripheries/GetPeripheryEditInforBindModel/" + Id);

                Examines = model.Examines;

                editStates.Add(Operation.EditPeripheryMain, model.State.MainState);
                editStates.Add(Operation.EditPeripheryImages, model.State.ImagesState);
                editStates.Add(Operation.EditPeripheryRelatedEntries, model.State.RelatedEntriesState);
                editStates.Add(Operation.EditPeripheryRelatedPeripheries, model.State.RelatedPeripheriesState);

            }
            else if (Type == ExaminedNormalListModelType.Tag)
            {
                var model = await Http.GetFromJsonAsync<EditTagInforBindModel>(ToolHelper.WebApiPath + "api/tags/GetTagEditInforBindModel/" + Id);

                Examines = model.Examines;

                editStates.Add(Operation.EditTagMain, model.State.MainState);
                editStates.Add(Operation.EditTagChildEntries, model.State.ChildEntriesState);
                editStates.Add(Operation.EditTagChildTags, model.State.ChildTagsState);

            }

            EditStates = editStates;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取" + Type.GetDisplayName() + "编辑信息失败");
            return;
        }

    }

    private async Task OnClickLogin()
    {

        NavigationManager.NavigateTo("account/login/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));


    }

    public async Task ValueChanged(bool value)
    {
        IsEdit = value;
        await IsEditChanged.InvokeAsync(IsEdit);
    }


    public async Task OnClosed()
    {
        IsEdit = false;
        //await IsEditChanged.InvokeAsync(IsEdit);

        StateHasChanged();
    }
}
