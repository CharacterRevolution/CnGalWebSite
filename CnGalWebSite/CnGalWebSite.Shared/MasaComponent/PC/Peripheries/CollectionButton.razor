@inject HttpClient Http
@inject ToastService? ToastService
@inject DialogService DialogService
@inject NavigationManager NavigationManager


<CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Fab Icon="@(IsCollected?"mdi-basket":"mdi-basket-plus-outline ")" Tooltip="@(IsCollected?"已收集":"收集")" Class="@Class" OnClick="OnClickStar" />


@code {
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public bool IsCollected { get; set; }

    [Parameter]
    public EventCallback<bool> CollectionChanged { get; set; }

    [Parameter]
    public string Class { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task OnClickStar()
    {
        //判断用户是否登录
        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            if (IsCollected)
            {
                await UnCollected();
            }
            else
            {
                await Collect();

            }
        }
        else
        {
            NavigationManager.NavigateTo("account/login/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
        }

    }


    private async Task UnCollected()
    {
        try
        {
            Result obj = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/peripheries/UnCollectPeriphery/" + Id);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("取消拥有周边失败", obj.Error);
            }
            else
            {
                IsCollected = false;
                await CollectionChanged.InvokeAsync(IsCollected);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "取消拥有周边失败");
        }
    }
    private async Task Collect()
    {
        try
        {
            Result obj = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/peripheries/CollectPeriphery/" + Id);

            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("拥有周边失败", obj.Error);
            }
            else
            {
                IsCollected = true;
                await CollectionChanged.InvokeAsync(IsCollected);

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "拥有周边失败");
        }
    }
}
