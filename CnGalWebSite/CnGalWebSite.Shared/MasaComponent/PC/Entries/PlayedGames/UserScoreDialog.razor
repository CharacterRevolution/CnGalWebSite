@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<MDialog @bind-Value="Dialog"
         MaxWidth="440">
    <MCard>

        <MCardText Class="pt-6">
            <div>
                <a href="@("/space/index/"+@Model.User.Id)" style="display:flex;">
                    <img loading="lazy" class="shadow-sm" src="@Model.User.PhotoPath" style="height: 50px;width: 50px;border-radius: 50%;" />
                    <div class="comment-tx-div">
                        <div class="new-row-warp no-margin">
                            @foreach (var item in Model.User.Ranks)
                            {
                                <RankAloneViewTip Model="item"></RankAloneViewTip>
                            }
                        </div>


                        <div class="a-font-color text-truncate-1">@Model.User.Name</div>

                    </div>
                </a>

                @if (Model.Socres.IsScored)
                {
                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaRating Disable Value="(int)Model.Socres.TotalSocre" Lable="总评" Class="pt-2" />
                    <div class="pb-2">
                        <span>音乐：@Model.Socres.MusicSocre</span>
                        <span>美术：@Model.Socres.PaintSocre</span>
                        <span>剧本：@Model.Socres.ScriptSocre</span>
                        <span>演出：@Model.Socres.ShowSocre</span>
                    </div>
                }

                @if (string.IsNullOrWhiteSpace(Model.PlayImpressions) == false)
                {
                    <div>评语：@Model.PlayImpressions</div>
                }
            </div>
        </MCardText>
        <MCardText>
            @Model.LastEditTime.ToString("yyyy-MM-dd HH:mm:ss")
        </MCardText>
    </MCard>
</MDialog>


@code {

    public PlayedGameUserScoreModel Model { get; set; }

    bool Dialog { get; set; }




    public Task Refresh(bool dialog, PlayedGameUserScoreModel model)
    {
        Dialog = dialog;
        Model = model;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
