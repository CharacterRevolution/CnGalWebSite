@inject HttpClient Http
@inject IDataCacheService _dataCacheService


    <div class="row">
        <div class="col-12 col-md-6">
            <div class="rounded shadow-sm bg-opacity rounded mb-3  p-3 pt-2 pb-2" style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h2 class="fw-bold m-0 font-color h5"><i class="fa fa-filter"></i>&nbsp;&nbsp;筛选</h2>
                </div>
                <Select TValue="ExaminedNormalListPassType" Value="ScreenType" ValueChanged="OnScreenTypeChanged" style="width:120px"></Select>
            </div>

        </div>
        <div class="col-12 col-md-6">
            <div class="rounded shadow-sm bg-opacity rounded mb-3  p-3 pt-2 pb-2" style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h2 class="fw-bold  m-0 font-color h5"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;排序</h2>
                </div>
                <Select TValue="ExaminedNormalListSortType" Value="OrderType" ValueChanged="OnOrderTypeChangedChanged" style="width:120px"></Select>
            </div>

        </div>
    </div>

<div>
    @foreach (var examine in pagedResultDto.Data)
    {
        <div class="rounded shadow-sm  bg-opacity mb-3 p-3">
            <div style="display: flex; align-items: center;">
                <div>
                    @if (examine.IsPassed != null)
                    {
                        if (examine.IsPassed == true)
                        {
                            <MIcon Color="success">mdi-checkbox-marked-circle-outline</MIcon>
                        }
                        else
                        {
                            <MIcon Color="error">mdi-alert-circle </MIcon>
                        }
                    }
                    else
                    {
                        <MIcon Color="warning">mdi-history</MIcon>
                    }
                </div>
                <div class="ms-3">
                    @{ string name = "";}
                    @if (examine.Type == ExaminedNormalListModelType.Entry)
                    {
                        name = "entries";

                    }
                    else if (examine.Type == ExaminedNormalListModelType.Article)
                    {
                        name = "articles";

                    }
                    else if (examine.Type == ExaminedNormalListModelType.Tag)
                    {
                        name = "tags";

                    }
                    else if (examine.Type == ExaminedNormalListModelType.Disambig)
                    {
                        name = "disambigs";

                    }
                    else if (examine.Type == ExaminedNormalListModelType.Periphery)
                    {
                        name = "peripheries";

                    }
                    else if (examine.Type == ExaminedNormalListModelType.User)
                    {
                        name = "space";

                    }


                    @if (examine.Type == ExaminedNormalListModelType.Comment)
                    {
                        <span>
                            @($"序号『{ examine.Id.ToString("00000")}』")
                            <TabLink Text="@name" Url="@("/home/examined/"+examine.Id)" Icon="fa fa-pencil">
                                @examine.Operation.GetDisplayName()
                            </TabLink>
                        </span>
                    }
                    else
                    {
                        <span>
                            对
                            @($"『{ examine.Id.ToString("00000")}』")
                            <TabLink Text="@examine.RelatedName" Url="@(name+"/index/"+examine.RelatedId)" Icon="fa fa-codepen">
                                @(string.IsNullOrWhiteSpace(examine.RelatedName) ?("Id："+ examine.RelatedId) : examine.RelatedName )
                            </TabLink>
                            进行
                            <TabLink Text="@name" Url="@((examine.IsPassed==true&&examine.Type!= ExaminedNormalListModelType.User&&examine.Type!= ExaminedNormalListModelType.Comment)?("/home/editrecord?ContrastId=" +examine.Id):("/home/examines?Id="+examine.Id))" Icon="fa fa-pencil">
                                @examine.Operation.GetDisplayName()
                            </TabLink>
                            操作
                        </span>
                    }

                    <br />
                    <span style="color:gray;">
                        @("申请时间："+examine.ApplyTime.ToString("yyyy-MM-dd HH:mm")) &nbsp; &nbsp;
                        @if (examine.PassedTime != null)
                        {
                            @("审核时间："+examine.PassedTime.Value.ToString("yyyy-MM-dd HH:mm"))
                        }

                    </span>
                </div>
            </div>
        </div>
    }
    @if (pagedResultDto.TotalPages > 1)
    {
        <MPagination Value="@pagedResultDto.CurrentPage" Class="my-4" Length="@pagedResultDto.TotalPages" ValueChanged="OnPageClick" Color="@_dataCacheService.ThemeSetting.Theme" TotalVisible="7"></MPagination>
    }
    @if (pagedResultDto.Data.Count == 0)
    {
        <div class="mb-3">
            <NotFoundTip IsNeedLayput="true" />
        </div>

    }
</div>


@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    [Parameter]
    public string Id { get; set; }

    public string Sorting { get; set; } = "Id desc";
    public string ScreeningConditions { get; set; } = "All";
    public int PageIndex { get; set; } = 1;

    public PagedResultDto<ExaminedNormalListModel> pagedResultDto = new CnGalWebSite.DataModel.Application.Dtos.PagedResultDto<ExaminedNormalListModel>();
    public ExaminedNormalListPassType ScreenType { get; set; }
    public ExaminedNormalListSortType OrderType { get; set; }


    public async Task OnScreenTypeChanged(ExaminedNormalListPassType type)
    {
        ScreenType = type;
        switch(type)
        {
            case ExaminedNormalListPassType.All:
                ScreeningConditions = "All";
                break;
            case ExaminedNormalListPassType.Passed:
                ScreeningConditions = "Passed";
                break;
            case ExaminedNormalListPassType.Passing:
                ScreeningConditions = "Passing";
                break;
            case ExaminedNormalListPassType.UnPassed:
                ScreeningConditions = "UnPassed";
                break;
        }
        await OnPageClick(1);
    }
    public async Task OnOrderTypeChangedChanged(ExaminedNormalListSortType type)
    {
        OrderType = type;
        switch (type)
        {
            case  ExaminedNormalListSortType.EditTime:
                Sorting = "Id desc";
                break;
            case ExaminedNormalListSortType.ExamineTime:
                Sorting = "PassedTime desc";
                break;
        }
        await OnPageClick(PageIndex);

    }

    protected override async Task OnInitializedAsync()
    {
        //获取审核列表
        await OnPageClick(1);
    }

    private async Task OnPageClick(int pageIndex)
    {
        PageIndex = pageIndex;
        try
        {
            var result = await Http.PostAsJsonAsync<GetExamineInput>(ToolHelper.WebApiPath + "api/space/GetUserEditRecord", new GetExamineInput
            {
                UserId = Id,
                Sorting = Sorting,
                MaxResultCount = 10,
                CurrentPage = pageIndex,
                ScreeningConditions = ScreeningConditions
            });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            pagedResultDto = JsonSerializer.Deserialize<PagedResultDto<ExaminedNormalListModel>>(jsonContent, ToolHelper.options);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑记录失败");
        }
    }

}
