@inject IDataCacheService _dataCacheService
@implements IDisposable

@if (Model.Tags.Any())
{
    <div class="rounded shadow-sm p-2 bg-opacity mb-4">
        <div class="row">
            @{ var i = 0;}
            @foreach (var item in Model.Tags.OrderByDescending(s => s.Children.Count))
            {

                <div class="col-12 col-lg-6">
                    <TagsRow Model="item" OnChanged="OnChanged" Color="@GetColor(i)" TotalCount="Model.CVInfors.Count" />
                </div>
                i++;
            }
        </div>

    </div>
}


@code {
    [Parameter]
    public CVThematicPageViewModel Model { get; set; } = new CVThematicPageViewModel();
    [Parameter]
    public EventCallback OnChanged { get; set; }

    public string GetColor(int index)
    {
        var baseStr = _dataCacheService.ThemeSetting.Theme.Split(' ').FirstOrDefault();

        return $"{baseStr} {index switch { 0 => "darken-3", 1 => "darken-2", 2 => "darken-1", 3 => "lighten-1", 4 => "lighten-2", 5 => "lighten-1", 6 => "darken-1", _ => "darken-2" }}";
    }

    protected override async Task OnInitializedAsync()
    {

        _dataCacheService.RefreshRequsted += RefreshRequsted;

    }

    public async void RefreshRequsted(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);

    }
    #region 释放实例

    public void Dispose()
    {

        _dataCacheService.RefreshRequsted -= RefreshRequsted;

        GC.SuppressFinalize(this);
    }
    #endregion
}
