@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IDataCacheService _dataCacheService
@inject ToastService ToastService

@if (string.IsNullOrWhiteSpace(Model.PhotoPath) == false)
{
    <a class="d-flex a-font-color" href="@("space/index/"+Model.Id)" style="align-items: center; flex-direction: column; ">
        <img src="@Model.PhotoPath" alt="@Model.Name" style="width:60px;border-radius:50%;" />
        <div style="display: flex; flex-direction: column; align-items: center; " class="mt-2">
            <span class="h6 fw-bold">@Model.Name</span>
            <span>
                <i class="fa fa-diamond fa-fw"></i>
                <span>积分：@Model.Integral</span>
                <i class="fa fa-magic fa-fw ms-3"></i>
                <span>Lv @ToolHelper.GetUserLevel(Model.Integral)</span>
            </span>
        </div>
    </a>
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider />
    <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="@(()=>OnClickUrl("/"))">
        <MIcon Left>mdi-home</MIcon>
        主页
    </MButton>
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider />
    @if (Admin == false)
    {
        <CnGalWebSite.Shared.MasaComponent.PC.Layout.SignInButton Model="_dataCacheService.UserInfor" Left />
        @if (ToolHelper.IsMaui == false)
        {
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MButton Text Block Color="success" OnClick="@(()=>OnClickUrl("/admin/index"))">
                        <MIcon Left>mdi-shield-crown </MIcon>
                        管理员后台
                    </MButton>
                </Authorized>
            </AuthorizeView>
        }

        <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="OnClickSpace">
            <MIcon Left>mdi-star</MIcon>
            个人空间
        </MButton>
        <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="@(()=>OnClickUrl("/space/messages"))">
            <MIcon Left>mdi-comment-text-multiple  </MIcon>
            消息通知
        </MButton>
        <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="@(()=>OnClickUrl("/home/editlist"))">
            <MIcon Left>mdi-plus  </MIcon>
            创建投稿
        </MButton>
        <MButton Text Block Color="@(_dataCacheService.ThemeSetting.Theme)" OnClick="@(()=>OnClickUrl("/account/logout"))">
            <MIcon Left>mdi-logout</MIcon>
            退出登入
        </MButton>

        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider />
        @if (ToolHelper.IsMaui == false)
        {
            <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="OnClickSetting">
                <MIcon Left>mdi-cog</MIcon>
                主题设置
            </MButton>

        }
        <MButton Text Block Color="@_dataCacheService.ThemeSetting.Theme" Left OnClick="@(()=>OnClickUrl("/about"))">
            <MIcon Left>mdi-information-outline</MIcon>
            关于我们
        </MButton>
    }


}
@code {

    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool Admin { get; set; }
    [Parameter]
    public EventCallback OnClickSetting { get; set; }
    [Parameter]
    public EventCallback OnClosed { get; set; }
    [Parameter]
    public EventCallback OnRefresh { get; set; }

    public UserInforViewModel Model { get; set; } = new UserInforViewModel();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //清除登入令牌
            _dataCacheService.LoginKey = "";
            _dataCacheService.IsOnThirdPartyLogin = true;
            _dataCacheService.ThirdPartyLoginTempModel = null;

            await RefreshUserInfor();
        }
    }

    public async Task RefreshUserInfor()
    {
        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            try
            {
                string userId = "";
                foreach (var item in user.User.Claims)
                {
                    if (item.Type == "userid")
                    {
                        userId = item.Value;
                    }
                }

                if (string.IsNullOrWhiteSpace(userId) == false)
                {
                    Model = await Http.GetFromJsonAsync<UserInforViewModel>(ToolHelper.WebApiPath + "api/space/GetUserData/" + userId);


                    _dataCacheService.UserInfor = Model;
                    StateHasChanged();
                }

            }
            catch
            {
                await ToastService.Error("获取用户信息失败", "未知错误，请在确保网络正常后联系开发人员");
            }
        }
    }

    private async Task OnClickUrl(string url)
    {
        if(url=="/" && Admin)
        {
            await OnRefresh.InvokeAsync();

        }
        else
        {
            NavigationManager.NavigateTo(url);

        }

        await OnClosed.InvokeAsync();
    }

    private async Task OnClickSpace()
    {
        NavigationManager.NavigateTo("space/index/" + _dataCacheService.UserInfor.Id);
        await OnClosed.InvokeAsync();
    }
}
