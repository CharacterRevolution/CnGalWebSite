@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IServiceProvider Provider
@inject IJSRuntime JS


<div class=" rounded shadow-sm  bg-opacity ps-4 pe-4 pt-3 h-100" style=" display: flex;flex-direction: column;">
    <div style="display: block;">
        <TabLink style="float: right" class="btn btn-outline-dark btn-sm" Url="/articles/news" Text="动态" Icon="fa fa-newspaper-o">
            <i class="fa fa-plane"></i>&nbsp;查看全部
        </TabLink>
        <h2 class="fw-bold mb-4 font-color h4"><i class="fa fa-newspaper-o"></i>&nbsp;&nbsp;最新动态</h2>
    </div>
    <div class="row h-100">

        @foreach(var item in Items.Take(6))
        {
            <div class="mb-3 col-12 col-lg-6 pointer">
                <HomeNewsAloneTip Model="item" OnClickNews="OnClickNews" OnClickUser="OnClickUser"></HomeNewsAloneTip>
            </div>
        }
    </div>

</div>
@code {

    public List<HomeNewsAloneViewModel> Items { get; set; } = new List<HomeNewsAloneViewModel>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Items.Count == 0)
        {
            try
            {
                //获取主页信息
                Items = await Http.GetFromJsonAsync<List<HomeNewsAloneViewModel>>(ToolHelper.WebApiPath + "api/home/GetHomeNewsView");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取主页动态列表失败");
            }
        }

    }

    #region 新建标签页
    public async void OpenNewPage(string url)
    {
        await JS.InvokeAsync<string>("openNewPage", url);
    }
    #endregion
    public async Task OnClickNews(HomeNewsAloneViewModel model)
    {

        try
        {
            await JS.InvokeAsync<string>("trackEvent", "动态", "点击", model.Text, "1", "click");
        }
        catch (Exception exc)
        {

        }

        var link = string.IsNullOrWhiteSpace(model.Link) ? ("/articles/index/" + model.ArticleId) : model.Link;
        bool isOpenNew = string.IsNullOrWhiteSpace(model.Link) == false;
        if (isOpenNew)
        {
            OpenNewPage(link);
        }
        else
        {
            NavigationManager.NavigateTo(Provider, link, model.Text, "fa fa-newspaper-o");
        }
    }

    public async Task OnClickUser(HomeNewsAloneViewModel model)
    {

        if (model.GroupId == -1)
        {
            NavigationManager.NavigateTo(Provider, "/space/index/" + model.UserId, model.Title, "fa fa-star-o");
        }
        else
        {
            NavigationManager.NavigateTo(Provider, "/entries/index/" + model.GroupId + "/10", model.Title, "fa fa-codepen");
        }

    }

  
}
