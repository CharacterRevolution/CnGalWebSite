@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IServiceProvider Provider
@inject IJSRuntime JS

@implements IAsyncDisposable


<div class=" rounded shadow  bg-opacity ps-4 pe-4 pt-3 h-100" style=" display: flex;flex-direction: column;">
    <div style="display: block;">
        <TabLink style="float: right" class="btn btn-outline-dark btn-sm" Url="/articles/news" Text="动态" Icon="fa fa-newspaper-o">
            <i class="fa fa-plane"></i>&nbsp;查看全部
        </TabLink>
        <h2 class="fw-bold mb-4 font-color h4"><i class="fa fa-newspaper-o"></i>&nbsp;&nbsp;最新动态</h2>
    </div>
    <div class="row h-100">

        @foreach(var item in Items.Take(ItemNum))
        {
            <div class="@(IsNormalScreen?" mb-3 col-6":"mb-3 col-12")" @onclick="@(()=>OnClickNews(item))" style="cursor:pointer;">
                <HomeNewsAloneTip Title="@item.Title" Time="@item.Time" Text="@item.Text" GroupId="@item.GroupId" Image="@item.Image" Type="@item.Type"></HomeNewsAloneTip>
            </div>
        }
    </div>

</div>
@code {
    public int ItemNum { get; set; } = 3;
    public bool IsSmallScreen { get; set; } = true;
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }
    public bool IsXLargeScreen { get; set; }

    public List<HomeNewsAloneViewModel> Items { get; set; } = new List<HomeNewsAloneViewModel>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Items.Count == 0)
        {
            try
            {
                //获取主页信息
                Items = await Http.GetFromJsonAsync<List<HomeNewsAloneViewModel>>(ToolHelper.WebApiPath + "api/home/GetHomeNewsView");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取主页动态列表失败");
            }
        }

    }

    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime JSRuntime { get; set; }

    private JSInterop<HomeNewsViewTip> Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<HomeNewsViewTip>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));
        }
    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 768))
        {
            IsSmallScreen = width < 768;
            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 768 && width < 1630))
        {
            IsNormalScreen = width >= 768 && width < 1630;
            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1630 && width < 2070))
        {
            IsLargeScreen = width >= 1630 && width < 2070;
            StateHasChanged();
        }
        if (IsXLargeScreen != (width >= 2070))
        {
            IsXLargeScreen = width >= 2070;
            StateHasChanged();
        }

        int temp = 3;
        if (IsSmallScreen)
        {
            temp = 3;
        }
        else if (IsNormalScreen)
        {
            temp = 6;
        }
        else if (IsLargeScreen)
        {
            temp = 2;
        }
        else
        {
            temp = 3;
        }

        if (temp != ItemNum)
        {
            ItemNum = temp;
            StateHasChanged();
        }
    }
    #endregion
    #region 新建标签页
    public async void OpenNewPage(string url)
    {
        await JS.InvokeAsync<string>("openNewPage", url);
    }
    #endregion
    public async Task OnClickNews(HomeNewsAloneViewModel model)
    {

        try
        {
            await JS.InvokeAsync<string>("trackEvent", "动态", "点击", model.Title, "1", "click");
        }
        catch (Exception exc)
        {

        }

        var link = string.IsNullOrWhiteSpace(model.Link) ? ("/articles/index/" + model.ArticleId) : model.Link;
        bool isOpenNew = string.IsNullOrWhiteSpace(model.Link) == false;
        if (isOpenNew)
        {
            OpenNewPage(link);
        }
        else
        {
            NavigationManager.NavigateTo(Provider, link, model.Title, "fa fa-newspaper-o");
        }
    }

    #region 释放实例
    private async ValueTask DisposeAsyncCore()
    {
        if (Interop != null)
        {
            await Interop.InvokeVoidAsync(this, null, "bb_layout", "dispose");
            Interop.Dispose();
            Interop = null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore();
        GC.SuppressFinalize(this);
    }
    #endregion
}
