@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

<AlertTip Type="AlertTip.AlertTipType.SpacePlayedTip"></AlertTip>
@if (is404 == true)
{
    <NotFoundTip IsNeedLayput="true"></NotFoundTip>
}

<div>

    <Virtualize ItemsProvider="@LoadArticles" @ref="virtualize">
        <EntryInforViewTip Model="context"></EntryInforViewTip>
    </Virtualize>
</div>



@code {
    [Parameter]
    public PagedSortedAndFilterInput Input { get; set; }
    [NotNull]
    public Virtualize<EntryInforTipViewModel>? virtualize { get; set; }
    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }

    private bool is404 = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private async Task<PagedResultDto<EntryInforTipViewModel>> OnGetNewItems()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<PagedSortedAndFilterInput>(ToolHelper.WebApiPath + "api/playedgame/GetUserPlayedGameList", Input);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<PagedResultDto<EntryInforTipViewModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取文章列表");
            return new PagedResultDto<EntryInforTipViewModel> { Data = new List<EntryInforTipViewModel>() };
        }
    }

    private async ValueTask<ItemsProviderResult<EntryInforTipViewModel>> LoadArticles(ItemsProviderRequest request)
    {
        Input.CurrentPage = request.StartIndex;
        Input.MaxResultCount = request.Count;
        var articles = await OnGetNewItems();

        if (is404 != (articles.TotalCount == 0))
        {
            is404 = (articles.TotalCount == 0);
            StateHasChanged();
        }

        return new ItemsProviderResult<EntryInforTipViewModel>(articles.Data, articles.TotalCount);
    }

    public async Task RefreshDataAsync()
    {
        await virtualize.RefreshDataAsync();
    }
}
