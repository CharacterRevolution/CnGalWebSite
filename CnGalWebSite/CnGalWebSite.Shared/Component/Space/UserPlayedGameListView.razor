@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject DialogService DialogService
<div>
    <div class=" rounded shadow-sm  bg-opacity rounded ps-3 pe-3 pt-2 pb-2" style="display: flex; flex-direction: row; justify-content: space-between;">
        <h5 class="fw-bold font-color m-0"><i class="fa fa-file-text-o"></i>&nbsp;&nbsp;游玩记录</h5>
        <div>
            @if (string.IsNullOrWhiteSpace(SteamId))
            {
                <Button OnClick="OnEditSteam" class="me-2" Color="Color.Dark" IsOutline="true" Size="Size.ExtraSmall" Icon="fa fa-pencil-square" Text="绑定Steam账号"/>
            }


            <Button OnClick="OnRefresh" Color="Color.Dark" IsOutline="true" Size="Size.ExtraSmall" IsAsync="true" Icon="fa fa-rotate-left" Text="刷新"/>
        </div>
    </div>
    @if (isReady)
    {

        @if (Model.Count == 0)
        {
<div class="mt-3">
    <NotFoundTip IsNeedLayput="true" />

</div>
        }
        else
        {
            <CnGalWebSite.Shared.Component.PlayedGames.ListGameRecordCard Model="Model" />
        }
    }
    else
    {
        <div style="height:300px">
            <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip Height="100%" />
        </div>
    }
</div>

@code {

    [Parameter]
    public string SteamId { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public List<GameRecordViewModel> Model = new List<GameRecordViewModel>();

    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<List<GameRecordViewModel>>(ToolHelper.WebApiPath + "api/playedgame/GetPlayedGameInfor");
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取用户游玩记录列表失败");
        }
    }

    public async Task OnEditSteam()
    {
        var option = new DialogOption()
        {
            Title = "绑定Steam账号"
        };
        option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<PlayedGames.EditUserSteamInforTip>(new Dictionary<string, object>
        {
            [nameof(PlayedGames.EditUserSteamInforTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),
            [nameof(PlayedGames.EditUserSteamInforTip.OnChanged)] = EventCallback.Factory.Create<string>(this, async (s) => { SteamId = s;await OnRefresh(); }),

        }).Render();
        await DialogService.Show(option);
    }

    public async Task OnRefresh()
    {
        try
        {
            var model = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/playedgame/RefreshPlayedGameSteamInfor");
            if(model.Successful)
            {
                await OnInitializedAsync();
                await ToastService.Success("刷新成功", "刷新成功");
                StateHasChanged();
            }
            else
            {
                await ToastService.Error("刷新失败", "刷新失败");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "刷新用户Steam信息失败");
        }
    }
}
