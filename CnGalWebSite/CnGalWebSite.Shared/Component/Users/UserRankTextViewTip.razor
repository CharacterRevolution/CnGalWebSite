@inject HttpClient Http
@inject ToastService? ToastService

@if (IsRight)
{
    <div style="display: flex; justify-content: flex-end;">

        <div class="comment-tx-div">
            <div class="new-row-warp no-margin">
                @if (Time != null)
                {
                    <div class="comment-username" style="color:gray;">@Time?.ToTimeFromNowString()</div>
                }
                <div class="comment-username a-font-color me-2 ms-2">@UserName</div>
                @foreach (var item in Ranks)
                {
                    <RankAloneViewTip Model="item"></RankAloneViewTip>
                }
            </div>
            <div class="comment-time a-font-color me-2">@Text</div>

        </div>
        <a href="@("/space/index/"+UserId)" style="display: flex;align-items: center;">
            <img class="shadow-sm" src="@Image" style="height: 50px;width: 50px;border-radius: 50%;" />
        </a>
    </div>
}
else
{
    <div style="display:flex;">
        <a href="@("/space/index/"+UserId)" style="display: flex;align-items: center;">
            <img class="shadow-sm" src="@Image" style="height: 50px;width: 50px;border-radius: 50%;" />
        </a>
        <div class="comment-tx-div">
            <a href="@("/space/index/"+UserId)" class="new-row-warp no-margin">
                @foreach (var item in Ranks)
                {
                    <RankAloneViewTip Model="item"></RankAloneViewTip>
                }
                <div class="comment-username a-font-color me-2">@UserName</div>
                @if (Time != null)
                {
                    <div class="comment-username" style="color:gray;">@Time?.ToTimeFromNowString()</div>
                }
            </a>
            <div class="comment-time a-font-color">@Text</div>
        </div>
    </div>
}



@code {
    [Parameter]
    public string Image { get; set; }
    [Parameter]
    public string UserName { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public bool IsRight { get; set; }
    [Parameter]
    public DateTime? Time { get; set; }

    [Parameter]
    public List<RankViewModel> Ranks { get; set; } = new List<RankViewModel>();
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Ranks.Count != 0)
        {
            return;
        }
        try
        {
            if (string.IsNullOrWhiteSpace(UserId))
            {
                return;
            }
            var model = await Http.GetFromJsonAsync<UserInforViewModel>(ToolHelper.WebApiPath + "api/space/GetUserData/" + UserId);
            Ranks = model.Ranks;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取用户信息失败");
        }
    }
}
