@inject HttpClient Http
@inject ToastService? ToastService
@inject IJSRuntime JS

@if (!isReady)
{
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
}
else
{
    <Table TItem="SteamInforTableModel" IsPagination="true" PageItemsSource="@PageItems" IsStriped=true
           OnQueryAsync="@OnQuerySteamAsync" SearchModel="@SearchModelSteam" ShowSearch="true" ShowLoading="true"
           ShowExtendButtons="true" ExtendButtonColumnWidth="70" FixedExtendButtonsColumn="true"
           ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false">
        <TableColumns>
            <TableColumn @bind-Field="@context.EntryId" Filterable="true" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Asc" Width="100" AllowTextWrap="true" Fixed="true" />
            <TableColumn @bind-Field="@context.Name" Filterable="true" Sortable="true" Searchable="true" Width="150" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.SteamId" Filterable="true" Sortable="true" Width="150" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.OriginalPrice" Filterable="true" Sortable="true" Width="100" AllowTextWrap="true"  Formatter="PriceFormatter" />
            <TableColumn @bind-Field="@context.PriceNow" Filterable="true" Sortable="true" Width="100" AllowTextWrap="true"  Formatter="PriceFormatter"/>
            <TableColumn @bind-Field="@context.CutNow" Filterable="true" Sortable="true" Width="150" AllowTextWrap="true"  Formatter="CutFormatter"/>
            <TableColumn @bind-Field="@context.PriceLowest" Filterable="true" Sortable="true" Width="150" AllowTextWrap="true"  Formatter="PriceLowestFormatter"/>
            <TableColumn @bind-Field="@context.CutLowest" Filterable="true" Sortable="true" Width="170" AllowTextWrap="true"   Formatter="CutLowestFormatter"/>
            <TableColumn @bind-Field="@context.LowestTime" Filterable="true" Sortable="true"  Width="170" AllowTextWrap="true"  Formatter="LowestTimeFormatter"/>
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-share-square-o" Text="查看" IsAsync="true" OnClickCallback="@(() =>OnLook(context.SteamId))" />
        </RowButtonTemplate>

    </Table>
}


@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 1000 };

    private bool isReady = false;

    public SteamInforListViewModel ModelSteam { get; set; } = new SteamInforListViewModel
    {
        SteamInfors = new List<SteamInforTableModel>()
    };
    private static readonly ConcurrentDictionary<Type, Func<IEnumerable<SteamInforTableModel>, string, SortOrder, IEnumerable<SteamInforTableModel>>> SortLambdaCacheSteam = new();
    private SteamInforTableModel SearchModelSteam { get; set; } = new SteamInforTableModel();

    public async Task OnLook(int id)
    {
        try
        {
            await OpenNewPage("https://store.steampowered.com/app/" + id);
        }
        catch { }
    }
    #region 新建标签页

    public async Task OpenNewPage(string url)
    {
        await JS.InvokeAsync<string>("openNewPage", url);
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //因为server端在处理大量数据时会断开连接 所以一切数据从服务端加载
            ModelSteam = await Http.GetFromJsonAsync<SteamInforListViewModel>(ToolHelper.WebApiPath + "api/tables/GetSteamInforList");
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取游戏价格信息汇总表格");
        }
    }

    public async Task< string> PriceFormatter(object price)
    {
        string res= ((double)(int)((BootstrapBlazor.Components.TableColumnContext<CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel, System.Object>)price).Value/100).ToString("0.00");
        if(res=="-0.01")
        {
            res = "未发售";
        }
        else if(res == "-0.02")
        {
            res = "已下架";
        }
        return res;
    }

    public async Task<string> PriceLowestFormatter(object price)
    {
        string res = ((double)(int)((BootstrapBlazor.Components.TableColumnContext<CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel, System.Object>)price).Value / 100).ToString("0.00");
        if (res == "-0.01")
        {
            res = "未记录";
        }
        else if (res == "-0.02")
        {
            res = "已下架";
        }

        return res;
    }

    public async Task<string> CutLowestFormatter(object cut)
    {
        string res = ((int)((BootstrapBlazor.Components.TableColumnContext<CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel, System.Object>)cut).Value).ToString();
        if (res == "-1")
        {
            res = "未记录";
        }
        else if (res == "-2")
        {
            res = "已下架";
        }

        return res;
    }

    public async Task<string> CutFormatter(object cut)
    {
        string res = ((int)((BootstrapBlazor.Components.TableColumnContext<CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel, System.Object>)cut).Value).ToString();
        if (res == "-1")
        {
            res = "未发售";
        }
        else if (res == "-2")
        {
            res = "已下架";
        }

        return res;
    }

    public async Task<string> LowestTimeFormatter(object cut)
    {
        DateTime res = (DateTime)((BootstrapBlazor.Components.TableColumnContext<CnGalWebSite.DataModel.ViewModel.Tables.SteamInforTableModel, System.Object>)cut).Value;
        if (res==DateTime.MinValue||res.Year==1970)
        {
            return  "未记录";
        }
        else
        {
            return res.ToString("yyyy-MM-dd");
        }
    }

    private Task<QueryData<SteamInforTableModel>> OnQuerySteamAsync(QueryPageOptions options)
    {
        IEnumerable<SteamInforTableModel> items = ModelSteam.SteamInfors;
        // 处理高级搜索
        if (!string.IsNullOrWhiteSpace(SearchModelSteam.Name))
        {
            items = items.Where(item => item.Name?.Contains(SearchModelSteam.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        }

        // 处理 Searchable=true 列与 SeachText 模糊搜索
        if (options.Searchs.Any())
        {
            items = items.Where(options.Searchs.GetFilterFunc<SteamInforTableModel>(FilterLogic.Or));
        }
        else
        {
            // 处理 SearchText 模糊搜索
            if (!string.IsNullOrWhiteSpace(options.SearchText))
            {
                items = items.Where(item => (item.Name?.Contains(options.SearchText) ?? false));
            }
        }
        // 过滤
        var isFiltered = false;
        if (options.Filters.Any())
        {
            items = items.Where(options.Filters.GetFilterFunc<SteamInforTableModel>());
            isFiltered = true;
        }

        // 排序
        var isSorted = false;
        if (!string.IsNullOrWhiteSpace(options.SortName))
        {
            // 外部未进行排序，内部自动进行排序处理
            var invoker = SortLambdaCacheSteam.GetOrAdd(typeof(SteamInforTableModel), key => LambdaExtensions.GetSortLambda<SteamInforTableModel>().Compile());
            items = invoker(items, options.SortName, options.SortOrder);
            isSorted = true;
        }

        // 设置记录总数
        var total = items.Count();

        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<SteamInforTableModel>()
        {
            Items = items,
            TotalCount = total,
            IsSorted = isSorted,
            IsFiltered = isFiltered
        });
    } }
