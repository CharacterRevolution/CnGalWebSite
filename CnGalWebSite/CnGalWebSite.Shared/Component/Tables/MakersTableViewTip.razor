@inject HttpClient Http
@inject ToastService? ToastService
@if (!isReady)
{
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
}
else
{
    <Table TItem="MakerInforTableModel" IsPagination="true" PageItemsSource="@PageItems" IsStriped=true
           OnQueryAsync="@OnQueryMakerAsync" SearchModel="@SearchModelMaker" ShowSearch="true" ShowLoading="true"
           ShowExtendButtons="true" ExtendButtonColumnWidth="70" FixedExtendButtonsColumn="true"
           ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false">
        <TableColumns>
            <TableColumn @bind-Field="@context.RealId" Filterable="true" Sortable="true" Width="100" AllowTextWrap="true" Fixed="true" />
            <TableColumn @bind-Field="@context.Name" Filterable="true" Sortable="true" Searchable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.AnotherName" Filterable="true" Sortable="true" Searchable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.Nickname" Filterable="true" Sortable="true" Searchable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.Bilibili" Filterable="true" Sortable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.MicroBlog" Filterable="true" Sortable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.Blog" Filterable="true" Sortable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.Lofter" Filterable="true" Sortable="true" Width="200" AllowTextWrap="true" />
            <TableColumn @bind-Field="@context.Other" Filterable="true" Sortable="true" Width="200" AllowTextWrap="true" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-share-square-o" Text="查看" IsAsync="true" OnClickWithoutRender="@(() =>OnLook(context.RealId,context.Name))" />
        </RowButtonTemplate>

    </Table>
}


@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 1000 };

    private bool isReady = false;
    public MakerInforListViewModel ModelMaker { get; set; } = new MakerInforListViewModel
    {
        MakerInfors = new List<MakerInforTableModel>()
    };
    private static readonly ConcurrentDictionary<Type, Func<IEnumerable<MakerInforTableModel>, string, BootstrapBlazor.Components.SortOrder, IEnumerable<MakerInforTableModel>>> SortLambdaCacheMaker = new();
    private MakerInforTableModel SearchModelMaker { get; set; } = new MakerInforTableModel();

    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }

    public async Task OnLook(long id, string name)
    {
        await OnClickUrl.InvokeAsync(new NavigateModel
        {
            Url = "/entries/index/" + id,
            Title = name,
            Icon = "fa fa-link"
        });
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //因为server端在处理大量数据时会断开连接 所以一切数据从服务端加载
            ModelMaker = await Http.GetFromJsonAsync<MakerInforListViewModel>(ToolHelper.WebApiPath + "api/tables/GetMakerInforList");
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取制作人信息汇总表格");
        }
    }

    private Task<QueryData<MakerInforTableModel>> OnQueryMakerAsync(QueryPageOptions options)
    {


        IEnumerable<MakerInforTableModel> items = ModelMaker.MakerInfors;
        // 处理高级搜索
        if (!string.IsNullOrWhiteSpace(SearchModelMaker.Name))
        {
            items = items.Where(item => item.Name?.Contains(SearchModelMaker.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        }

        if (!string.IsNullOrWhiteSpace(SearchModelMaker.Nickname))
        {
            items = items.Where(item => item.Nickname?.Contains(SearchModelMaker.Nickname, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        if (!string.IsNullOrWhiteSpace(SearchModelMaker.AnotherName))
        {
            items = items.Where(item => item.AnotherName?.Contains(SearchModelMaker.AnotherName, StringComparison.OrdinalIgnoreCase) ?? false);
        }



        // 处理 Searchable=true 列与 SeachText 模糊搜索
        if (options.Searchs.Any())
        {
            items = items.Where(options.Searchs.GetFilterFunc<MakerInforTableModel>(FilterLogic.Or));
        }
        else
        {
            // 处理 SearchText 模糊搜索
            if (!string.IsNullOrWhiteSpace(options.SearchText))
            {
                items = items.Where(item => (item.Name?.Contains(options.SearchText) ?? false)
                             || (item.Nickname?.Contains(options.SearchText) ?? false)
                             || (item.AnotherName?.Contains(options.SearchText) ?? false));
            }
        }
        // 过滤
        var isFiltered = false;
        if (options.Filters.Any())
        {
            items = items.Where(options.Filters.GetFilterFunc<MakerInforTableModel>());
            isFiltered = true;
        }

        // 排序
        var isSorted = false;
        if (!string.IsNullOrWhiteSpace(options.SortName))
        {
            // 外部未进行排序，内部自动进行排序处理
            var invoker = SortLambdaCacheMaker.GetOrAdd(typeof(MakerInforTableModel), key => LambdaExtensions.GetSortLambda<MakerInforTableModel>().Compile());
            items = invoker(items, options.SortName, (BootstrapBlazor.Components.SortOrder) options.SortOrder);
            isSorted = true;
        }

        // 设置记录总数
        var total = items.Count();

        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MakerInforTableModel>()
        {
            Items = items,
            TotalCount = total,
            IsSorted = isSorted,
            IsFiltered = isFiltered
        });
    }
}
