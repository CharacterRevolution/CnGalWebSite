@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<MDialog @bind-Value="Dialog"
         MaxWidth="440">
    <MCard>
        <TabLink Icon="fa fa-codepen" Url="@("/entries/index/" + Model.GameId)" Text="@Model.GameName" class="a-font-color" OnClick="OnClose">
            <img style="width:100%;" src="@Model.GameImage" alt="@Model.GameName">
        </TabLink>

        <MCardTitle Class="text-h5">
            @Model.GameName
        </MCardTitle>
        <MCardText Class="pb-2">
            @Model.GameBriefIntroduction
        </MCardText>
        <MCardTitle Class="text-h6">
            标签
        </MCardTitle>
        <MCardText Class="pb-2">
            <GameRecordTagCard Model="Model" IsDark="true" />
        </MCardText>

        @if (IsCurrentUser)
        {
            <MCardTitle Class="text-h6 pt-0">
                感想
            </MCardTitle>
            <MCardText Class="pb-2">
                @(string.IsNullOrWhiteSpace(Model.PlayImpressions)?"无": Model.PlayImpressions)
            </MCardText>
        }

        @if (IsCurrentUser)
        {
            <MCardActions Class="ps-2 pe-2">

                <MButton Color="green darken-1"
                         Text
                         OnClick="OnHidden">
                    @(Model.IsHidden? "显示" : "隐藏")
                </MButton>


                <MSpacer></MSpacer>
                <MButton Color="green darken-1"
                         Text
                         OnClick="OnClickEdit">
                    编辑
                </MButton>
            </MCardActions>
                }
 
        </MCard>
</MDialog>


@code {
    public GameRecordViewModel Model { get; set; }
    [Parameter]
    public EventCallback<GameRecordViewModel> OnEdit { get; set; }
    [Parameter]
    public EventCallback OnChanged { get; set; }

    [Parameter]
    public bool IsCurrentUser { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    bool Dialog { get; set; }

    public async Task OnClickEdit()
    {
        Dialog = false;
        await OnEdit.InvokeAsync(Model);
    }

    public Task OnClose()
    {
        Dialog = false;
        return Task.CompletedTask;
    }


    public async Task OnHidden()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenGameRecordModel>(ToolHelper.WebApiPath + "api/playedgame/HiddenGameRecord", new HiddenGameRecordModel { IsHidden = !Model.IsHidden, Ids = new int?[] { Model.GameId } });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("修改游玩记录显示状态失败", obj.Error);
            }
            else
            {
                Model.IsHidden = !Model.IsHidden;
                await ToastService.Success("修改游玩记录显示状态成功", "修改游玩记录显示状态成功");
                Dialog = false;
               await OnChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改游玩记录显示状态失败");
        }
    }


    public Task Refresh(bool dialog, GameRecordViewModel model)
    {
        Dialog = dialog;
        Model = model;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
