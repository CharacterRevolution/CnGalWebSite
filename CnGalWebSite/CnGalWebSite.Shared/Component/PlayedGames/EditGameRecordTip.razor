@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService

<MDialog @bind-Value="Dialog"
         MaxWidth="550">
    <MCard>
        <MCardTitle Class="text-h5">
            编辑游玩记录
        </MCardTitle>
        <MCardText Class="pb-2">
            你可以在这里记录游玩状态和感想，还可以在个人空间中绑定Steam库存
        </MCardText>

        <MCardText Class="pb-0">
            @if (isReady)
            {

                <MTextarea Label="感想" Rows="5" Color="@_dataCacheService.ThemeSetting.Theme"
                           @bind-Value="Model.PlayImpressions">

                </MTextarea>
                <MButtonGroup Tile Group Value="(int)Model.Type" ValueChanged="ValueChanged" Color="@_dataCacheService.ThemeSetting.Theme" Class="pb-2">
                    <MButton Class="m-0" Value="(int)PlayedGameType.WantToPlay">
                        想玩
                    </MButton>
                    <MButton Class="m-0" Value="(int)PlayedGameType.Playing">
                        正在玩
                    </MButton>
                    <MButton Class="m-0" Value="(int)PlayedGameType.Played">
                        已玩
                    </MButton>
                    <MButton Class="m-0" Value="(int)PlayedGameType.Uninterested">
                        不感兴趣
                    </MButton>
                    <MButton Class="m-0" Value="(int)PlayedGameType.UnPlayed">
                        未玩
                    </MButton>
                </MButtonGroup>
                <MCheckbox @bind-Value="Model.IsHidden"
                           Label="折叠" Class="m-0"
                           HideDetails="true"
                           Color="@_dataCacheService.ThemeSetting.Theme"></MCheckbox>


            }
            else
            {
                <div style="min-height:200px;" class="mt-8">
                    <h3 class="mb-3 text-center">正在加载</h3>
                    <div class="d-flex" style="justify-content: center;">
                        <Spinner Color="Color.Primary" Size="Size.ExtraLarge"></Spinner>
                    </div>
                </div>
            }
        </MCardText>

        <MCardActions>
            <MSpacer></MSpacer>
            <MButton Color="green darken-1"
                     Text
                     OnClick="OnSubmit">
                保存
            </MButton>
        </MCardActions>
    </MCard>
</MDialog>

@code {

    [Parameter]
    public EventCallback OnChanged { get; set; }

    public int Id { get; set; }

    public GameRecordViewModel ViewModel { get; set; }

    public EditGameRecordModel Model = new EditGameRecordModel();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    bool Dialog { get; set; }

    bool isReady = false;

    public Task ValueChanged(StringNumber index)
    {
        if(index==null)
        {
            return Task.CompletedTask;
        }
        Model.Type = (PlayedGameType)index.ToInt32();

        return Task.CompletedTask;
    }

    protected async Task OnInit()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<EditGameRecordModel>(ToolHelper.WebApiPath + "api/playedgame/EditGameRecord/" + Id);
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取游玩记录失败");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<EditGameRecordModel>(ToolHelper.WebApiPath + "api/playedgame/EditGameRecord", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {

                await ToastService.Error("编辑游玩记录失败", obj.Error);
            }
            else
            {
                await ToastService.Success("编辑游玩记录成功", "编辑游玩记录成功");
                if (ViewModel != null)
                {
                    ViewModel.Type = Model.Type;
                    ViewModel.PlayImpressions = Model.PlayImpressions;
                    ViewModel.IsHidden = Model.IsHidden;
                }
                Dialog = false;
                await OnChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "编辑游玩记录失败");
        }
    }

    public async Task Refresh(bool dialog, int id, GameRecordViewModel viewModel)
    {
        Dialog = dialog;
        Id = id;
        ViewModel = viewModel;

        await OnInit();

        StateHasChanged();
    }
}
