@inject ToastService ToastService
@inject HttpClient Http
@implements IDisposable
@inject IDataCacheService _dataCatcheService


<div class="@(Class+(Outline?" ":" card h-100  rounded shadow-sm  bg-opacity p-4"))" style="border:0px">
    <div style="height:100%">
        <Chart ChartType="@(Stacked?ChartType.Bar:ChartType.Line)" OnInitAsync="@OnInitAsync" @ref="LineChart" />
    </div>
</div>
@code {
    [Parameter]
    public string Url { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool Stacked { get; set; }
    [Parameter]
    public bool Outline { get; set; }
    [Parameter]
    public bool HideTitle { get; set; }

    [NotNull]
    private Chart LineChart { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private async Task<ChartDataSource> OnInitAsync()
    {
        try
        {
            var result = await _dataCatcheService.ChartDataCatche.GetCatche(Url,true);

            if (Stacked)
            {
                result.Options.X.Stacked = true;
                result.Options.Y.Stacked = true;
            }
            if (HideTitle)
            {
                result.Options.Title = null;
            }

            return result;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取图表数据失败");
            return new ChartDataSource();
        }

    }

    public void Dispose()
    {
        if (LineChart != null)
        {
            LineChart.Dispose();
        }
        GC.SuppressFinalize(this);
    }
}

