<div class=" rounded shadow-sm  bg-opacity rounded mb-3">
    @if (Model.IsEdit == true)
    {

        @switch (Model.MainState)
        {
            case EditState.locked:
                <AlertTip Type="AlertTip.AlertTipType.Blocked"></AlertTip>
                break;
            case EditState.Normal:
                <AlertTip Title="编辑主要信息" Type="AlertTip.AlertTipType.Editable" Url="@("/tags/EditMain/" + Model.Id)"></AlertTip>
                break;
        }
    }
    @if (Model.MainState == EditState.Preview)
    {
        <AlertTip Title="编辑主要信息" Type="AlertTip.AlertTipType.preview" Url="@("/tags/EditMain/" + Model.Id)" ExamineType="Operation.EditTagMain" OnClickRevoke="OnClickRevoke"></AlertTip>
    }

    @if (IsSmallScreen)
    {
        <div class="">
            <div class="pb-3">
                <img style="width:100%;height:auto;" src="@Model.MainPicture" alt="@Model.Name">
            </div>
            <div class="ps-3 pe-3 pb-3">
                <div style="display: flex; flex-wrap: wrap; justify-content: space-between; flex-direction: row; align-items: center;">
                    <h1 class="fw-bold h3">@Model.Name</h1>
                    @if (IsShowButton)
                    {
                        <div style="display: flex; flex-wrap: wrap; flex-direction: row; align-items: center; justify-content: flex-end;">

                            <AuthorizeView Roles="Admin">
                                @if (Model.IsHidden)
                                {
                                    <Button Color="Color.Info" class="me-3" style="float: right" Size="Size.Small" IsOutline="true" Icon="fa fa-map-signs" Text="取消隐藏" OnClick="@(() => OnClick(4))" />

                                }
                                else
                                {
                                    <Button Color="Color.Danger" class="me-3" style="float: right" Size="Size.Small" IsOutline="true" Icon="fa fa-unlink fa-check" Text="隐藏" OnClick="@(() => OnClick(5))" />

                                }

                            </AuthorizeView>
                            <Button Color="Color.Warning" IsOutline="true" Text="历史" Size="Size.Small" Icon="fa fa-history" OnClick="@(() => OnClick(0))"
                                    style="float: right" class="me-3"></Button>

                            <AuthorizeView>
                                <Authorized>
                                    @if (Model.IsEdit)
                                    {
                                        <Button Color="Color.Primary" IsOutline="true" Text="退出编辑" Size="Size.Small" Icon="fa fa-sign-out" OnClick="@(() => OnClick(1))"
                                                style="float: right"></Button>
                                    }
                                    else
                                    {
                                        <Button Color="Color.Success" IsOutline="true" Text="编辑" Size="Size.Small" Icon="fa fa-pencil" OnClick="@(() => OnClick(2))"
                                                style="float: right"></Button>
                                    }

                                </Authorized>
                                <NotAuthorized>
                                    <Button Color="Color.Success" Size="Size.Small" IsOutline="true" Icon="fa fa-sign-in " Text="登入后编辑" OnClick="@(() => OnClick(3))" style="float: right" />
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    }



                </div>
                <span style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical;">
                    @Model.BriefIntroduction
                </span>
            </div>
        </div>
    }
    else
    {
        <div class="p-3" style="display:flex;">
            <div class="">
                <img style="height:200px;" src="@Model.MainPicture" alt="@Model.Name">
            </div>
            <div class="ms-3 w-100">
                <div style="display: flex; flex-wrap: wrap; justify-content: space-between; flex-direction: row; align-items: center;">
                    <h1 class="fw-bold h3">@Model.Name</h1>
                    @if (IsShowButton)
                    {
                        <div style="display: flex; flex-wrap: wrap; flex-direction: row; align-items: center; justify-content: flex-end;">

                            <AuthorizeView Roles="Admin">
                                @if (Model.IsHidden)
                                {
                                    <Button Color="Color.Info" class="me-3" style="float: right" Size="Size.Small" IsOutline="true" Icon="fa fa-map-signs" Text="取消隐藏" OnClick="@(() => OnClick(4))" />

                                }
                                else
                                {
                                    <Button Color="Color.Danger" class="me-3" style="float: right" Size="Size.Small" IsOutline="true" Icon="fa fa-unlink fa-check" Text="隐藏" OnClick="@(() => OnClick(5))" />

                                }

                            </AuthorizeView>
                            <Button Color="Color.Warning" IsOutline="true" Text="历史" Size="Size.Small" Icon="fa fa-history" OnClick="@(() => OnClick(0))"
                                    style="float: right" class="me-3"></Button>

                            <AuthorizeView>
                                <Authorized>
                                    @if (Model.IsEdit)
                                    {
                                        <Button Color="Color.Primary" IsOutline="true" Text="退出编辑" Size="Size.Small" Icon="fa fa-sign-out" OnClick="@(() => OnClick(1))"
                                                style="float: right"></Button>
                                    }
                                    else
                                    {
                                        <Button Color="Color.Success" IsOutline="true" Text="编辑" Size="Size.Small" Icon="fa fa-pencil" OnClick="@(() => OnClick(2))"
                                                style="float: right"></Button>
                                    }

                                </Authorized>
                                <NotAuthorized>
                                    <Button Color="Color.Success" Size="Size.Small" IsOutline="true" Icon="fa fa-sign-in " Text="登入后编辑" OnClick="@(() => OnClick(3))" style="float: right" />
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    }

                </div>
                <span style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical;">
                    @Model.BriefIntroduction
                </span>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public TagIndexViewModel Model { get; set; } = new TagIndexViewModel();
    [Parameter]
    public EventCallback<int> OnTagClick { get; set; }
    [Parameter]
    public EventCallback<Operation> OnClickRevoke { get; set; }
    [Parameter]
    public bool IsSmallScreen { get; set; }
    [Parameter]
    public bool IsShowButton { get; set; }

    public void OnClick(int index)
    {
        OnTagClick.InvokeAsync(index);
    }
}
