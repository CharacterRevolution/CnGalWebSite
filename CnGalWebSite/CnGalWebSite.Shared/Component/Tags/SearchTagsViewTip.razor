@inject HttpClient Http
@inject ToastService? ToastService
@inject IDataCacheService _dataCacheService

<CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="可选标签" Icon="fa fa-fw fa-search" Collapable Class="@Class">
        <MTextField Value="_search" ValueChanged="OnSearch" TValue="string" Class="ps-3 pe-3"
                    Label="可以搜索标签哦~"
                    Clearable
                    Color="@_dataCacheService.ThemeSetting.Theme"
                    ClearIcon="mdi-close-circle-outline"></MTextField>
    <MTreeview Items="Items"
               Search="@_search"
               TItem="TagTreeModel"
               TKey="long"
               ItemKey="r=>r.Id"
               ItemText="r=>r.Title"
               ItemChildren="r=>r.Children"
               Activatable
               OpenOnClick
               Color="@_dataCacheService.ThemeSetting.Theme">
        <PrependContent>
            @if (string.IsNullOrWhiteSpace(context.Item.Icon) == false)
            {
                <MIcon Color="@_dataCacheService.ThemeSetting.Theme">
                    @context.Item.Icon
                </MIcon>
            }
        </PrependContent>
    </MTreeview>
</CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>




@code {
    [Parameter]
    public string Class { get; set; }

    private List<string> SearchResult = new List<string>();
    private List<TagTreeModel> Items { get; set; } = new List<TagTreeModel>();
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    private string _search;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取所有标签
            Items = await Http.GetFromJsonAsync<List<TagTreeModel>>(ToolHelper.WebApiPath + "api/tags/GetTagsTreeView");
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }
    private async Task OnSearch(string text)
    {
        _search = text;
    }
}
