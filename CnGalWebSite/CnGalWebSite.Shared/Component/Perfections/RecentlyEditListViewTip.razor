@inject HttpClient Http
@inject ToastService ToastService


<div class=" rounded shadow  bg-opacity rounded h-100  pt-3 pb-3" style="display: flex; flex-direction: column;">
    <div class="ps-4 pe-4">
        <Button @onclick="GetNewRandomList" class="btn-sm" Color="Color.Dark" IsOutline="true" Size="Size.Small" Icon="fa fa-refresh" style="float: right" IsAsync="true">
            &nbsp;刷新
        </Button>
        <h2 class="fw-bold mb-3 font-color h4"><i class="fa fa-pencil"></i>&nbsp;&nbsp;最新编辑</h2>
    </div>

    <div class="row h-100 ps-2 pe-2">
        @for (int i = 0; i < Model.Count; i++)
        {
            var item =Model[i];
        <div class="@(IsTransverse?"col-6":"col-12" )">
            @{
                string name = item.RelatedName + " 编辑记录";
                string context = string.IsNullOrWhiteSpace(item.RelatedName) ? ("Id：" + item.RelatedId) : item.RelatedName;
            }
            @if (item.Type == ExaminedNormalListModelType.Entry)
            {
                <TabLink Text="@item.RelatedName" Url="@("/entries/index/"+@item.RelatedId)" Icon="fa fa-codepen">
                    <div class=" p-3 ">
                        <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                             Text="@("对 "+context+" "+item.Operation.GetDisplayName())"></UserRankTextViewTip>
                    </div>
                </TabLink>
            }
            else if (item.Type == ExaminedNormalListModelType.Article)
            {
                <TabLink Text="@item.RelatedName" Url="@("/articles/index/"+@item.RelatedId)" Icon="fa fa-newspaper-o">
                    <div class=" p-3 ">
                        <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                             Text="@("对 "+context+" "+item.Operation.GetDisplayName())"></UserRankTextViewTip>
                    </div>
                </TabLink>
            }
            else if (item.Type == ExaminedNormalListModelType.Tag)
            {
                <TabLink Text="@item.RelatedName" Url="@("/tags/index/"+item.RelatedId)" Icon="fa fa-tag">
                    <div class=" p-3 ">
                        <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                             Text="@("对 "+context+" "+item.Operation.GetDisplayName())"></UserRankTextViewTip>
                    </div>
                </TabLink>
            }
            else if (item.Type == ExaminedNormalListModelType.Disambig)
            {
                <TabLink Text="@item.RelatedName" Url="@("/disambigs/index/"+@item.RelatedId)" Icon="fa fa-tag">
                    <div class=" p-3 ">
                        <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                             Text="@("对 "+context+" "+item.Operation.GetDisplayName())"></UserRankTextViewTip>
                    </div>
                </TabLink>
            }
            else if (item.Type == ExaminedNormalListModelType.Periphery)
            {
                <TabLink Text="@item.RelatedName" Url="@("/peripheries/index/"+@item.RelatedId)" Icon="fa fa-tag">
                    <div class=" p-3 ">
                        <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                             Text="@("对 "+context+" "+item.Operation.GetDisplayName())"></UserRankTextViewTip>
                    </div>
                </TabLink>
            }
        </div>
        }
    </div>
</div>
   
@code {
    int ItemNum = 4;

    public List<ExaminedNormalListModel> Model { get; set; } = new List<ExaminedNormalListModel>();

    [Parameter]
    public bool IsTransverse { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<List<ExaminedNormalListModel>>(ToolHelper.WebApiPath + "api/perfections/GetRecentlyEditList");

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取近期编辑列表失败");
        }
    }


    public async Task GetNewRandomList()
    {
        await OnInitializedAsync();
    }



}
