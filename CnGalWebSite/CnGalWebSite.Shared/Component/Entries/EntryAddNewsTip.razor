@inject DialogService DialogService
@inject ToastService ToastService
@inject HttpClient Http

<div class="alert alert-warning  rounded shadow-sm  rounded " role="alert">
    或者你可以在此快速<a class="alert-link" @onclick="@OnCreateNew">发布动态</a>
</div>

@code {
    [Parameter]
    public string EntryName { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private CreateArticleViewModel Model { get; set; } = new CreateArticleViewModel
    {
        Roles = new List<RelevancesModel>(),
        articles = new List<RelevancesModel>(),
        Groups = new List<RelevancesModel>(),
        Games = new List<RelevancesModel>(),
        others = new List<RelevancesModel>(),
        staffs = new List<RelevancesModel>()
    };

    public async Task OnCreateNew()
    {
        EntryAddNewsViewModel model = new EntryAddNewsViewModel();
        var items = Utility.GenerateEditorItems<EntryAddNewsViewModel>();

        var item = items.First(i => i.GetFieldName() == nameof(model.Text));
        item.Rows = 10;

        var option = new EditDialogOption<EntryAddNewsViewModel>()
        {
            Title = "快速发布动态",
            Model = model,
            Items = items,
            OnCloseAsync = () =>
            {
                //Trace.Log("关闭按钮被点击");
                return Task.CompletedTask;
            },
            OnEditAsync = async context =>
            {
                //复制数据
                var model = (EntryAddNewsViewModel)context.Model;

                Model.Name = model.Name;
                Model.Type = ArticleType.News;
                Model.DisplayName = model.Name;
                Model.RealNewsTime = model.RealTime;
                Model.BriefIntroduction = model.BriefIntroduction;
                Model.Context = model.Text;
                Model.Games = new List<RelevancesModel> { new RelevancesModel { DisplayName = EntryName } };
                //处理时间
                if (Model.RealNewsTime != null)
                {
                    Model.RealNewsTime = Model.RealNewsTime.Value.AddHours(Model.RealNewsTime.Value.Hour < 12 ? (12 - Model.RealNewsTime.Value.Hour) : 0);
                }
                await OnSubmit();
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    private async Task OnSubmit()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<CreateArticleViewModel>(ToolHelper.WebApiPath + "api/articles/createarticle", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("创建文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("创建文章成功", "创建文章成功，等待审核通过");
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "创建文章失败");
        }
    }
}
