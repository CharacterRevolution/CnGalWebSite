@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SwalService SwalService
@inject ToastService ToastService
@inject IServiceProvider Provider


<div class="row">
    @for (int i = 0; i < Model.Count; i++)
    {
        int temp = i;
        <div class="col-12 col-md-6 col-lg-4 col-xxl-3 mt-2">
            <AutoComplete Items="@AutoCompleteItems" IsLikeMatch="true" IgnoreCase="true" Id="name" @bind-Value="Model[temp].DisplayName" placeholder="标签" />
        </div>
    }
</div>
<div>
    <Button Color="Color.Primary" IsOutline="true" class="mt-4" style="width:100px" @onclick="@(() => OnAdd())" Text="添加" Icon="fa fa-plus"></Button>
    <Button Color="Color.Success" IsOutline="true" class="ms-2 mt-4" style="width:100px" @onclick="@(() => OnCreate())" Text="创建" Icon="fa fa-cubes"></Button>
</div>

@code {
    [Parameter]
    public List<RelevancesModel> Model { get; set; }
    [Parameter]
    public IEnumerable<string> AutoCompleteItems { get; set; }

    private async Task OnAdd()
    {
        try
        {
            Model.Add(new RelevancesModel());
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("添加标签失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    public async Task OnCreate()
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认跳转标签创建页面",
            Content = "跳转后当前页面数据不会保存，请确保备份编辑数据后跳转",
            IsConfirm = true,
            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        NavigationManager.NavigateTo(Provider, "/tags/createtag", "创建标签", "fa fa-pencil");
    }

}
