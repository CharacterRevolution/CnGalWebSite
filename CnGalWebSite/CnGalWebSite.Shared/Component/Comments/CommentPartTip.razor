@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using System.Text.Json

<style>
    /*评论Markdown样式*/
    .comment-text-markdown .markdown-body {
        font-weight: 300;
    }

        .comment-text-markdown .markdown-body p {
            font-size: 19px;
        }
</style>
<div class=" ps-4 pe-4 pt-3 pb-3 mt-3 @(IsChild ? "comment-layout-child" : "comment-layout") comment-layout-transition div-shadow rounded bg-opacity" style="cursor:default">
    <div>
        <UserRankTextViewTip UserId="@Model.ApplicationUserId" UserName="@Model.UserName" Image="@Model.UserImage" Ranks="@Model.Ranks" Text="@Model.CommentTime.ToString("yyyy年M月d日 H:mm")"></UserRankTextViewTip>
        <div class="mt-2">
            <div class="markdown-body">
                @((MarkupString)(ReplyTip+Model.Text))
            </div>
        </div>
     
            <AuthorizeView>
                <Authorized>
                    <div class="mt-2" style=" display: flex; justify-content: flex-end; ">
                        @if (IsReplying)
                        {
                            <button class="comment-reply comment-reply-color mb-3" style="float: right;" @onclick="OnUnReplyClick">取消回复</button>
                        }
                        else
                        {
                            <button class="comment-reply comment-reply-color" style="float: right;" @onclick="OnReplyClick">回复</button>
                        }


                        @if (CanDeleted)
                        {
                            <button class="comment-reply comment-reply-color" style="float: right;" @onclick="OnDeleteClick">删除</button>
                        }
                    </div>
                </Authorized>
            </AuthorizeView>

   

        @if (Deepth < MaxDeepth)
        {
            if (IsReplying)
            {
                <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" RelyCallBack="OnRely" CurrentUserRank="@CurrentUserRank" IsAdmin="IsAdmin"></ReplyCommentTip>
            }
        @foreach (var item in Model.InverseParentCodeNavigation)
        {

            <CommentPartTip Model="item" IsChild="true" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely_Comment" IsAdmin="IsAdmin" IsSmallScreen="IsSmallScreen"
                            Deepth="Deepth+1" ParentCommentUserName="@Model.UserName" CanDeleted="@CanDeleted" DeletedCallBack="DeletedCallBack"></CommentPartTip>
        }
    }

    </div>
</div>
@if (Deepth >= MaxDeepth)
{
    @if (IsReplying)
    {
        <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" RelyCallBack="OnRely" CurrentUserRank="@CurrentUserRank" IsAdmin="IsAdmin"></ReplyCommentTip>
    }
    @foreach (var item in Model.InverseParentCodeNavigation)
    {
        <CommentPartTip Model="item" IsChild="true" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely_Comment" IsAdmin="IsAdmin" IsSmallScreen="IsSmallScreen"
                        Deepth="Deepth+1" ParentCommentUserName="@Model.UserName" CanDeleted="@CanDeleted" DeletedCallBack="DeletedCallBack"></CommentPartTip>
    }
}

@code {
    [Parameter]
    public CommentViewModel Model { get; set; }

    [Parameter]
    public bool IsChild { get; set; }
    [Parameter]
    public bool IsSmallScreen { get; set; }
    [Parameter]
    public bool IsAdmin { get; set; }
    [Parameter]
    public EventCallback RelyCallBack { get; set; }

    [Parameter]
    public string ParentCommentUserName { get; set; }

    public long LastId { get; set; }

    [Parameter]
    public bool CanDeleted { get; set; }

    [Parameter]
    public string CurrentUserRank { get; set; }

    [Parameter]
    public int Deepth { get; set; }

    private int MaxDeepth { get { return IsSmallScreen ? 2 : 5; } }

    bool isRead = false;

    [Parameter]
    public EventCallback DeletedCallBack { get; set; }

    private bool IsReplying { get; set; }

    private string StringMarked { get; set; }

    public string ReplyTip { get { return Deepth > MaxDeepth ? "回复@" + ParentCommentUserName + "：\n" : ""; } }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private string ObjectId
    {
        get
        {
            return Model.Id.ToString();
        }
    }

    public void OnReplyClick()
    {
        IsReplying = true;
        StateHasChanged();
    }

    public void OnUnReplyClick()
    {
        IsReplying = false;
        StateHasChanged();
    }

    public void OnLoginClick()
    {
        NavigationManager.NavigateTo("/account/longin");
    }

    public async Task OnRely()
    {
        //这是回复组件的事件回调
        IsReplying = false;
        await RelyCallBack.InvokeAsync();
    }

    public async Task OnRely_Comment()
    {
        //这是级联传递的事件回调
        await RelyCallBack.InvokeAsync();
    }

    public void OnUserClick()
    {
        if (Model != null)
        {
            NavigationManager.NavigateTo(Provider,"/space/index/" + Model.ApplicationUserId, Model.UserName, "fa fa-star-o");
        }
    }

    int count = 0;
    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnDeleteClick()
    {

        //调用API
        try
        {
            count++;
            if (count < 2)
            {
                await ToastService.Error("你确定要删除这条评论吗？", "确认删除请再次点击删除按钮");
                return;
            }

            var result = await Http.PostAsJsonAsync<DeleteCommentModel>(ToolHelper.WebApiPath + "api/comments/UserDeleteComment", new DeleteCommentModel { Ids = new long[] { Model.Id } });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("删除评论失败", obj.Error);
            }
            else
            {

                await ToastService.Success("删除评论成功", "删除评论成功");
                await DeletedCallBack.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "删除评论失败");
        }
    }
}
