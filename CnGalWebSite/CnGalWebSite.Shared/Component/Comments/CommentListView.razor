<div class="mb-3">
    @if (Comments.TotalCount == 0)
    {
        if (IsShowNotFound)
        {
            <CnGalWebSite.Shared.Component.Errors.NotFoundTip IsNeedLayput="true"></CnGalWebSite.Shared.Component.Errors.NotFoundTip>
        }
    }
    else
    {
        @for (int i = 0; i < Comments.Data.Count; i++)
        {
            int temp = i;
            <CommentPartTip Model="Comments.Data[temp]" IsChild="false" RelyCallBack="OnRely"
                            DeletedCallBack="OnDelete" CanDeleted="CanDeleted"></CommentPartTip>
        }
        @if (Comments.TotalPages > 1)
        {
            <MPagination Value="Comments.CurrentPage" Class="my-4" Length="Comments.TotalPages" ValueChanged="OnPage" Color="pink lighten-3" TotalVisible="7"></MPagination>
        }
    }

</div>



@code {
    [Parameter]
    public PagedResultDto<CommentViewModel> Comments {
        get;
        set;
    }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter]
    public bool CanDeleted { get; set; }
    [Parameter]
    public EventCallback RelyCallBack { get; set; }

    [Parameter]
    public EventCallback DeletedCallBack { get; set; }

    [Parameter]
    /// <summary>
    /// 是否展示空白提示
    /// </summary>
    public bool IsShowNotFound { get; set; }


    private bool shouldRender;
    private long LastCommentId = 0;

    protected override void OnParametersSet()
    {
        if (Comments.TotalCount > 0)
        {

            if (LastCommentId == PlusId())
            {
                shouldRender = false;
            }
            else
            {
                shouldRender = true;
                LastCommentId = PlusId();
            }

        }
        else
        {
            if (LastCommentId != 0)
            {
                shouldRender = true;
                LastCommentId = 0;
            }
            else
            {
                shouldRender = false;
            }
        }
    }

    protected override bool ShouldRender() => shouldRender;

    public async Task OnPage(int index)
    {
        await OnPageChanged.InvokeAsync(index);
    }

    public async Task OnRely()
    {
        await RelyCallBack.InvokeAsync();
    }
    public async Task OnDelete ()
    {
        await RelyCallBack.InvokeAsync();
    }

    private long PlusId()
    {
        long result = 0;
        foreach(var item in Comments.Data)
        {
            result += PlusCommentId(item);
        }

        return result;
    }

    //递归计算评论Id的和
    private long PlusCommentId(CommentViewModel index)
    {
        long sum = 0;
        sum += index.Id;

        foreach(var item in index.InverseParentCodeNavigation)
        {
            sum += PlusCommentId(item);
        }
        return sum;
    }
}
