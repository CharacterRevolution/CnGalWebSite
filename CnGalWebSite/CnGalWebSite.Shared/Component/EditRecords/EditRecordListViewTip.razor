@inject ToastService ToastService
@inject HttpClient Http

<MDialog Value="Dialog" ValueChanged="ValueChanged"
         Width="800">
    <MCard>
        <MCardTitle Class="text-h5">
            编辑记录
        </MCardTitle>
        <MCardText>
            点击头像可查看对应用户空间，点击卡片可查看编辑记录详情
        </MCardText>

        <Scroll style="max-height:500px" class="ps-4 pe-4">
            <div>
                @if (isReady)
                {
                    <CnGalWebSite.Shared.Component.Entries.NewVersion.ExaminesInforCard Model="Model" OnNavClick="OnClickClose" />
                }
                else
                {
                    <div style="min-height:200px;">
                        <h3 class="mb-3 text-center">正在加载</h3>
                        <div class="d-flex" style="justify-content: center;">
                            <Spinner Color="Color.Primary" Size="Size.ExtraLarge"></Spinner>
                        </div>
                    </div>
                }
            </div>
        </Scroll>
        <MCardActions>
            <MSpacer></MSpacer>
            <MButton Color="green darken-1"
                     Text
                     OnClick="async ()=> { Dialog = false;await OnClickClose.InvokeAsync(); }">
                关闭
            </MButton>
        </MCardActions>
    </MCard>
</MDialog>

@code {
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public ExaminedNormalListModelType Type { get; set; }

    [Parameter]
    public EventCallback OnClickClose { get; set; }

    [Parameter]
    public List<ExaminedNormalListModel> Model { get; set; } = new List<ExaminedNormalListModel>();

    private readonly List<TimelineItem> AlternateTimelineItems = new List<TimelineItem>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public string Text { get; set; }
    private IEnumerable<long> Value1 { get; set; }
    bool isReady = false;
    bool Dialog { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        @if (Model.Count == 0)
        {
            try
            {
                if (Type == ExaminedNormalListModelType.Article)
                {
                    var model = await Http.GetFromJsonAsync<EditArticleInforBindModel>(ToolHelper.WebApiPath + "api/articles/GetArticleEditInforBindModel/" + Id);
                    Model = model.Examines;
                }
                else if (Type == ExaminedNormalListModelType.Periphery)
                {
                    var model = await Http.GetFromJsonAsync<EditPeripheryInforBindModel>(ToolHelper.WebApiPath + "api/peripheries/GetPeripheryEditInforBindModel/" + Id);
                    Model = model.Examines;
                }
                else if (Type == ExaminedNormalListModelType.Tag)
                {
                    var model = await Http.GetFromJsonAsync<EditTagInforBindModel>(ToolHelper.WebApiPath + "api/tags/GetTagEditInforBindModel/" + Id);
                    Model = model.Examines;
                }



                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取历史编辑记录列表失败");
            }
        }
        else
        {
            isReady = true;
            StateHasChanged();
        }

    }

    public async Task ValueChanged(bool value)
    {
        if (value == false)
        {
            await OnClickClose.InvokeAsync();
        }
    }
}
