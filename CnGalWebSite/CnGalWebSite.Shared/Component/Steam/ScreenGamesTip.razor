@inject IDataCacheService _datacacheService

<div class="rounded shadow-sm  bg-opacity mb-4">

    <div style="display: flex;flex-direction: column;align-items: center;align-content: center;" class="pt-4">
        @if (_datacacheService.IsApp == false)
        {
            <div class="h4 fw-bold font-color">折扣中的游戏</div>
        }
        <div style="color: gray; word-break: break-all; text-align-last: center; " class="ps-4 pe-4">Steam信息来源：<a href="https://isthereanydeal.com/" rel="noreferrer"> https://isthereanydeal.com/</a></div>
    </div>
    <div style="display: flex; justify-content: space-around; flex-wrap: wrap; " class="pt-4">
        <div class="ps-4 pe-4" style="max-width: 400px; width: 100%;">
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaSelecte Value="ScreenType" ValueChanged="OnScreenTypeChanged" TValue="ScreenSteamType" Class="pt-0" Lable="筛选" />
        </div>
        <div class="ps-4 pe-4" style="max-width: 400px; width: 100%;">
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaSelecte Value="OrderType" ValueChanged="OnOrderTypeChangedChanged" TValue="SteamSortType" Class="pt-0" Lable="排序" />
        </div>
        <div class="ps-4 pe-4" style="max-width: 400px; width: 100%;">
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaSelecte Value="DisplayType" ValueChanged="OnDisplayTypeChangedChanged" TValue="SteamDisplayType" Class="pt-0" Lable="样式" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ScreenSteamType ScreenType { get; set; }
    [Parameter]
    public SteamSortType OrderType { get; set; }
    [Parameter]
    public SteamDisplayType DisplayType { get; set; }

    [Parameter]
    public EventCallback<ScreenSteamType> ScreenTypeChanged { get; set; }
    [Parameter]
    public EventCallback<SteamSortType> OrderTypeChanged { get; set; }
    [Parameter]
    public EventCallback<SteamDisplayType> DisplayTypeChanged { get; set; }


    public async Task OnScreenTypeChanged(ScreenSteamType type)
    {
        await ScreenTypeChanged.InvokeAsync(type);
    }
    public async Task OnOrderTypeChangedChanged(SteamSortType type)
    {
        await OrderTypeChanged.InvokeAsync(type);
    }

    public async Task OnDisplayTypeChangedChanged(SteamDisplayType type)
    {
        await DisplayTypeChanged.InvokeAsync(type);
    }
}
