@inject DialogService DialogService
@inject ToastService ToastService
@inject IAppHelper _appHelper;

<div>
    <InputFile class="form-control form-control-lg d-none" id="@Id" OnChange="OnInputFileChange"></InputFile>
</div>
<div class="card text-black" style="background-color:transparent;">
    <img src="@(string.IsNullOrWhiteSpace(ImagePath)?"https://app.cngal.org/_content/CnGalWebSite.Shared/images/default/app.png":ImagePath)" class="card-img" alt="...">
    <div class="card-img-overlay d-flex">
        @if (Type == ImageAspectType.None)
        {
            @if (IsMustCropper)
            {
                <div>
                    <label for="@Id" class="m-btn m-btn--is-elevated m-btn--has-bg m-size--default theme--dark green pointer mb-3 me-3"><i class="fa fa-fw fa-upload" aria-hidden="true"></i> @Text</label>
                </div>
            }
            else
            {
                <ImageUpLoadButton OnUploadedImage="OnUploaded" Text="@Text" Class="mb-3 me-3"></ImageUpLoadButton>
            }
        }
        else
        {
            <div>
                <label for="@Id" class="m-btn m-btn--is-elevated m-btn--has-bg m-size--default theme--dark pointer green mb-3 me-3"><i class="fa fa-fw fa-upload" aria-hidden="true"></i> @Text</label>
            </div>
        }

        @if (string.IsNullOrWhiteSpace(ImagePath) == false)
        {
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton OnClick="OnClean" Icon="mdi-trash-can-outline " Class="mb-3" Color="error" Fab/>
        }


    </div>
</div>
@code {
    [Parameter]
    public ImageAspectType Type { get; set; }
    public EntryType entryType_;
    [Parameter]
    public EntryType EntryType_
    {
        get { return entryType_; }
        set
        {
            if (value == EntryType.Game || value == EntryType.ProductionGroup)
            {
                Type = ImageAspectType._16_9;
            }
            else
            {
                Type = ImageAspectType.None;
            }
            entryType_ = value;
        }
    }
    [Parameter]
    public bool IsMainImage { get; set; }
    [Parameter]
    public string ImagePath { get; set; }

    [Parameter]
    public EventCallback<string> ImagePathChanged { get; set; }

    [Parameter]
    public bool IsMustCropper { get; set; }
    [Parameter]
    public string Text { get; set; } = "上传图片";

    public List<UploadFile> uploadFiles { get; set; } = new List<UploadFile>();

    public string Id = "input" + new Random().Next();
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private async void OnInputFileChange(InputFileChangeEventArgs args)
    {
        //设置裁剪比例
        if (IsMainImage)
        {
            if (EntryType_ == EntryType.Game || EntryType_ == EntryType.ProductionGroup)
            {
                Type = ImageAspectType._16_9;
            }
            else
            {
                Type = ImageAspectType.None;
            }
        }
        var option = new DialogOption()
        {
            Title = "裁剪图片",
            ShowCloseButton = false,
            Size= Size.Large
        };
        option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<ImageCropperViewTip>(new Dictionary<string, object>
        {
            [nameof(ImageCropperViewTip.Type)] = Type,
            [nameof(ImageCropperViewTip.file)] = args.File,
            [nameof(ImageCropperViewTip.Id)] = Id,
            [nameof(ImageCropperViewTip.OnUploadedImage)] = EventCallback.Factory.Create<string>(this, async (url) => await OnUploaded(url)),
            [nameof(ImageCropperViewTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),

        }).Render();
        await DialogService.Show(option);
    }

    public async Task OnUploaded(string url)
    {
        ImagePath = url;
        StateHasChanged();
        await ImagePathChanged.InvokeAsync(url);
    }

    private async Task OnCardUploadMain(UploadFile file)
    {
        try
        {
            var obj = await _appHelper.UploadImagesAsync(file.File, Type);
            if (obj.Uploaded == true)
            {
                ImagePath = obj.FileURL;
                await ImagePathChanged.InvokeAsync(obj.FileURL);

                StateHasChanged();
            }
            else
            {
                await ToastService.Error("图片上传失败", $"<{file.FileName}> " + obj.Error);
            }

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "图片上传失败", "图片大小超过3MB", "将图片压缩后再上传，大图可上传到相册");
        }
    }

    public async Task OnClean()
    {
        ImagePath = null;

        uploadFiles.Clear();

        await ImagePathChanged.InvokeAsync(null);
        StateHasChanged();
    }
}
