@inject IJSRuntime JS
@implements IDisposable

<div style="height:800px">
    <div id="editor">
    </div>
</div>
@code {
        [Parameter]
        public string Context { get; set; }
    public string _context { get; set; }


    [Parameter]
    public EventCallback<string> ContextChanged { get; set; }
    private DotNetObjectReference<EditorMdViewTip> objRef;

    bool isLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        if (isLoaded && _context != Context)
        {
            _context = Context;
            await JS.InvokeAsync<string>("setEditorMdContext", Context);
        }
    }

    /// <summary>
    /// 在光标位置插入文本
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    public async Task InsertContext(string context)
    {
        if (isLoaded)
        {
            await JS.InvokeAsync<string>("insertEditorMdContext", context);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            //初始化编辑器
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initEditorMd", objRef, Context??"");
            isLoaded = true;
        }
    }

    [JSInvokable]
    public async Task OnContextChanged(string context)
    {
        if(Context!=context)
        {
            Context = context;
            await ContextChanged.InvokeAsync(Context);

        }
    }


    #region 释放实例
    public void Dispose()
    {
        if (objRef != null)
        {
            objRef?.Dispose();
        }
        GC.SuppressFinalize(this);
    }
    #endregion
}
