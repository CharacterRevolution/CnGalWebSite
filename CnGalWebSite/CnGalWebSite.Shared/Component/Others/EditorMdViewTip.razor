@inject IJSRuntime JS
@implements IDisposable

<div style="height:800px">
    <div id="editor">
    </div>
</div>
@code {
    [Parameter]
    public string Context { get; set; }
    [Parameter]
    public EventCallback<string> ContextChanged { get; set; }
    private DotNetObjectReference<EditorMdViewTip> objRef;

    bool isLoaded = false;

    public async Task<string> GetContext()
    {
        if (isLoaded)
        {
            Context = await JS.InvokeAsync<string>("getEditorMdContext");
        }
        return Context;
    }

    /// <summary>
    /// 在光标位置插入文本
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    public async Task InsertContext(string context)
    {
        if (isLoaded)
        {
            await JS.InvokeAsync<string>("insertEditorMdContext", context);
        }
    }

    /// <summary>
    /// 设置文本
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    public async Task SetContext(string context)
    {
        if (isLoaded)
        {
            await JS.InvokeAsync<string>("setEditorMdContext", context);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            //初始化编辑器
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("initEditorMd", objRef, Context);
            isLoaded = true;
        }
    }
    [JSInvokable]
    public async Task OnContextChanged(string context)
    {
        Context = context;
        await ContextChanged.InvokeAsync(Context);
    }


    #region 释放实例
    public void Dispose()
    {
        if (objRef != null)
        {
            objRef?.Dispose();
        }
        GC.SuppressFinalize(this);
    }
    #endregion
}
