
@inject IJSRuntime JS


<style>
    :root {
        --main-color: @colorMain;
        --hover-color: @colorHover;
        --active-color: @colorActive;
    }
</style>
<style>
    .layout.is-page.@colorString .layout-header-bar {
        background-color: var(--hover-color);
    }
    .layout.is-page.@colorString .layout-side .layout-banner {
        background-color: var(--active-color);
    }
    .layout.is-page.@colorString .layout-drawer:hover {
        background-color: var(--hover-color);
    }

</style>

@if (isDark)
{
    <link href="https://cdn.bootcdn.net/ajax/libs/github-markdown-css/5.1.0/github-markdown-dark.min.css" rel="stylesheet" media="none" onload="this.media='all'">
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/vs2015.min.css" media="none" onload="this.media='all'" />
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/dark-cover.min.css" />
    <style>
        [data-bs-toggle="lgbSelect"] .form-select {
            background-color: transparent;
            color: white;
        }
    </style>
}
else
{
    <!-- <link rel="stylesheet" href="//app.cngal.org/_content/CnGalWebSite.Shared/editor.md/css/editormd.min.css" media="none" onload="this.media='all'" />
    -->
    <link rel="stylesheet" href="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/github-markdown-css/4.0.0/github-markdown.min.css" media="none" onload="this.media='all'" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/atom-one-light.min.css" media="none" onload="this.media='all'" />
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/Lighting-mode.min.css" />

    <style>
        #__vconsole .vc-switch {
            margin-right: 20px;
            box-shadow: 0 0.5rem 1rem rgb(255, 255, 255, 15%) !important;
        }
    </style>

    if (IsOnBgImage)
    {
        <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/show-background.min.css" />
    }
    else
    {
        <style>
                .layout.is-page .layout-side {
                    background-color: @colorMain !important;
                }

                .layout.is-page .layout-footer {
                    background-color: @colorHover !important;
                }
                #web_bg {
                    display: none;
                }
        </style>
    }
}
@if (IsOnMouse)
{
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/mouse.min.css" />


}

@if (IsOnBgImage && isDark == false)
{
    <style>
        .layout.is-page .layout-footer {
            background-color: transparent !important;
            box-shadow: 0 0.5rem 1rem rgb(0 0 0 / 50%) !important;
        }
    </style>


    <AuthorizeView>
        <Authorized>
            @{
                string mimage = "";
                string simage = "";
                foreach (var item in context.User.Claims)
                {
                    if (item.Type == "mbgimage")
                    {
                        mimage = item.Value;
                    }
                    else if (item.Type == "sbgimage")
                    {
                        simage = item.Value;
                    }
                }
            }
            <div id="web_bg" style="background-image: url(@simage)" class=" d-none bg-d-lg-block"></div>
            <div id="web_bg" style="background-image: url(@mimage)" class=" d-none d-sm-block"></div>
        </Authorized>
        <NotAuthorized>
            <div id="web_bg" style="background-image: url(https://app.cngal.org/_content/CnGalWebSite.Shared/images/CnGal5thMin.png) " class=" d-none bg-d-lg-block"></div>
            <div id="web_bg" style="background-image: url(https://app.cngal.org/_content/CnGalWebSite.Shared/images/oppsitebackground.png)" class=" d-none d-sm-block"></div>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <style>
        .bgimage-ison {
            display: none !important;
        }
    </style>
}
<style>
    .markdown-body img {
        background-color: transparent;
    }

    .markdown-body {
        background-color: transparent;
    }

        .markdown-body b, .markdown-body strong {
            font-weight: bolder;
        }
</style>

@code {
    public string colorMain = "#D979A2";
    public string colorHover = "#C6447E";
    public string colorActive = "#CC578C";
    public string colorString = "color3";

    [Parameter]
    public string ColorString
    {
        set
        {
            colorString = value;

            if (IsDark == true)
            {
                return;
            }
            switch (value)
            {
                case "color1":
                    colorMain = "#5E9CFB";
                    colorHover = "#5B8BEE";
                    colorActive = "#5284ED";
                    break;
                case "color2":
                    colorMain = "#28B559";
                    colorHover = "#1F8B45";
                    colorActive = "#1E8650";
                    break;
                case "color3":
                    colorMain = "#D979A2";
                    colorHover = "#C6447E";
                    colorActive = "#CC578C";
                    break;
                case "color4":
                    colorMain = "#EC8904";
                    colorHover = "#B46803";
                    colorActive = "#CE7804";
                    break;
                case "color5":
                    colorMain = "#17a2b8";
                    colorHover = "#1ab394";
                    colorActive = "#367fa9";
                    break;
                case "color6":
                    colorMain = "#9D91CA";
                    colorHover = "#7E5B95";
                    colorActive = "#9D72BA";
                    break;

            }
        }
    }
    private bool isDark;
    [Parameter]
    public bool IsDark
    {
        get
        {
            return isDark;
        }
        set
        {
            isDark = value;
            if (value == true)
            {
                colorMain = "#1F1F1F";
                colorHover = "#262626";
                colorActive = "#1F1F1F";
            }
            else
            {
                ColorString = colorString;
            }
        }
    }

    [Parameter]
    public bool IsOnMouse { get; set; }
    [Parameter]
    public bool IsOnBgImage { get; set; }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (IsOnMouse)
            {
                try
                {
                    await JS.InvokeAsync<string>("InitMouse");
                }
                catch
                {

                }
            }
        }
    }
    public async void Refresh()
    {
        if (IsOnMouse)
        {
            try
            {
                await JS.InvokeAsync<string>("InitMouse");
            }
            catch
            {

            }
        }
        StateHasChanged();
    }
}
