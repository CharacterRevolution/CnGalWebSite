@inject ImagesLargeViewService ImagesLargeViewService
@inject IDataCacheService _dataCatcheService
@inject IEventService _eventService

<div class="@Class">

    @if (images.Count != 0)
    {
        <div class="row">
            @foreach (var item in images)
            {

                <div class="col-6 col-lg-4 col-xl-3 mb-3">
                    <div class="rounded shadow-sm bg-opacity h-100 ">
                        <img src="@item.Image" class="w-100 pointer" @onclick="()=>OnClickImage(images.IndexOf(item))">

                        <div style="display: flex; flex-direction: column; word-break: break-all; " class="ps-3 pe-3 pt-2 pb-2">

                            <span>
                                <span>
                                    @item.Image
                                </span>
                            </span>
                        </div>

                    </div>
                </div>
            }
        </div>
    }

    <div style="display:flex">
        <ImageUpLoadButton OnUploadedImage="UpLoaded" Class="mb-3" />
        @ChildContent

    </div>

</div>


@code {
    [Parameter]
    public EventCallback<string> OnUploadedImage { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public List<ImagesUploadAloneModel> images { get; set; } = new List<ImagesUploadAloneModel>();
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public async Task<string> UpLoaded(string url)
    {
        //添加到数据模型中
        images.Add(new ImagesUploadAloneModel
        {
            Image = url
        });

        await OnUploadedImage.InvokeAsync(url);

        StateHasChanged();

        return url;
    }
    protected override async Task OnInitializedAsync()
    {

    }

    public Task Refresh()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task OnClickImage(int index)
    {
        if (_dataCatcheService.IsApp)
        {
            await _eventService.OpenNewPage(images[index].Image);
        }
        else
        {
            await ImagesLargeViewService.ViewLargeImages(new ImagesLargeViewModel
            {
                Index = index,
                Pictures = images.Select(s => new EditImageAloneModel
                {
                    Image = s.Image
                }).ToList()
            });
        }

    }
}
